// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/stablecog/sc-go/database/ent/bannedwords"
	"github.com/stablecog/sc-go/database/ent/predicate"
)

// BannedWordsUpdate is the builder for updating BannedWords entities.
type BannedWordsUpdate struct {
	config
	hooks     []Hook
	mutation  *BannedWordsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BannedWordsUpdate builder.
func (bwu *BannedWordsUpdate) Where(ps ...predicate.BannedWords) *BannedWordsUpdate {
	bwu.mutation.Where(ps...)
	return bwu
}

// SetWords sets the "words" field.
func (bwu *BannedWordsUpdate) SetWords(s []string) *BannedWordsUpdate {
	bwu.mutation.SetWords(s)
	return bwu
}

// AppendWords appends s to the "words" field.
func (bwu *BannedWordsUpdate) AppendWords(s []string) *BannedWordsUpdate {
	bwu.mutation.AppendWords(s)
	return bwu
}

// SetReason sets the "reason" field.
func (bwu *BannedWordsUpdate) SetReason(s string) *BannedWordsUpdate {
	bwu.mutation.SetReason(s)
	return bwu
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (bwu *BannedWordsUpdate) SetNillableReason(s *string) *BannedWordsUpdate {
	if s != nil {
		bwu.SetReason(*s)
	}
	return bwu
}

// SetSplitMatch sets the "split_match" field.
func (bwu *BannedWordsUpdate) SetSplitMatch(b bool) *BannedWordsUpdate {
	bwu.mutation.SetSplitMatch(b)
	return bwu
}

// SetNillableSplitMatch sets the "split_match" field if the given value is not nil.
func (bwu *BannedWordsUpdate) SetNillableSplitMatch(b *bool) *BannedWordsUpdate {
	if b != nil {
		bwu.SetSplitMatch(*b)
	}
	return bwu
}

// SetUpdatedAt sets the "updated_at" field.
func (bwu *BannedWordsUpdate) SetUpdatedAt(t time.Time) *BannedWordsUpdate {
	bwu.mutation.SetUpdatedAt(t)
	return bwu
}

// Mutation returns the BannedWordsMutation object of the builder.
func (bwu *BannedWordsUpdate) Mutation() *BannedWordsMutation {
	return bwu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bwu *BannedWordsUpdate) Save(ctx context.Context) (int, error) {
	bwu.defaults()
	return withHooks(ctx, bwu.sqlSave, bwu.mutation, bwu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bwu *BannedWordsUpdate) SaveX(ctx context.Context) int {
	affected, err := bwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bwu *BannedWordsUpdate) Exec(ctx context.Context) error {
	_, err := bwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bwu *BannedWordsUpdate) ExecX(ctx context.Context) {
	if err := bwu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bwu *BannedWordsUpdate) defaults() {
	if _, ok := bwu.mutation.UpdatedAt(); !ok {
		v := bannedwords.UpdateDefaultUpdatedAt()
		bwu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bwu *BannedWordsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BannedWordsUpdate {
	bwu.modifiers = append(bwu.modifiers, modifiers...)
	return bwu
}

func (bwu *BannedWordsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(bannedwords.Table, bannedwords.Columns, sqlgraph.NewFieldSpec(bannedwords.FieldID, field.TypeUUID))
	if ps := bwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bwu.mutation.Words(); ok {
		_spec.SetField(bannedwords.FieldWords, field.TypeJSON, value)
	}
	if value, ok := bwu.mutation.AppendedWords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, bannedwords.FieldWords, value)
		})
	}
	if value, ok := bwu.mutation.Reason(); ok {
		_spec.SetField(bannedwords.FieldReason, field.TypeString, value)
	}
	if value, ok := bwu.mutation.SplitMatch(); ok {
		_spec.SetField(bannedwords.FieldSplitMatch, field.TypeBool, value)
	}
	if value, ok := bwu.mutation.UpdatedAt(); ok {
		_spec.SetField(bannedwords.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(bwu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, bwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bannedwords.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bwu.mutation.done = true
	return n, nil
}

// BannedWordsUpdateOne is the builder for updating a single BannedWords entity.
type BannedWordsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BannedWordsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetWords sets the "words" field.
func (bwuo *BannedWordsUpdateOne) SetWords(s []string) *BannedWordsUpdateOne {
	bwuo.mutation.SetWords(s)
	return bwuo
}

// AppendWords appends s to the "words" field.
func (bwuo *BannedWordsUpdateOne) AppendWords(s []string) *BannedWordsUpdateOne {
	bwuo.mutation.AppendWords(s)
	return bwuo
}

// SetReason sets the "reason" field.
func (bwuo *BannedWordsUpdateOne) SetReason(s string) *BannedWordsUpdateOne {
	bwuo.mutation.SetReason(s)
	return bwuo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (bwuo *BannedWordsUpdateOne) SetNillableReason(s *string) *BannedWordsUpdateOne {
	if s != nil {
		bwuo.SetReason(*s)
	}
	return bwuo
}

// SetSplitMatch sets the "split_match" field.
func (bwuo *BannedWordsUpdateOne) SetSplitMatch(b bool) *BannedWordsUpdateOne {
	bwuo.mutation.SetSplitMatch(b)
	return bwuo
}

// SetNillableSplitMatch sets the "split_match" field if the given value is not nil.
func (bwuo *BannedWordsUpdateOne) SetNillableSplitMatch(b *bool) *BannedWordsUpdateOne {
	if b != nil {
		bwuo.SetSplitMatch(*b)
	}
	return bwuo
}

// SetUpdatedAt sets the "updated_at" field.
func (bwuo *BannedWordsUpdateOne) SetUpdatedAt(t time.Time) *BannedWordsUpdateOne {
	bwuo.mutation.SetUpdatedAt(t)
	return bwuo
}

// Mutation returns the BannedWordsMutation object of the builder.
func (bwuo *BannedWordsUpdateOne) Mutation() *BannedWordsMutation {
	return bwuo.mutation
}

// Where appends a list predicates to the BannedWordsUpdate builder.
func (bwuo *BannedWordsUpdateOne) Where(ps ...predicate.BannedWords) *BannedWordsUpdateOne {
	bwuo.mutation.Where(ps...)
	return bwuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bwuo *BannedWordsUpdateOne) Select(field string, fields ...string) *BannedWordsUpdateOne {
	bwuo.fields = append([]string{field}, fields...)
	return bwuo
}

// Save executes the query and returns the updated BannedWords entity.
func (bwuo *BannedWordsUpdateOne) Save(ctx context.Context) (*BannedWords, error) {
	bwuo.defaults()
	return withHooks(ctx, bwuo.sqlSave, bwuo.mutation, bwuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bwuo *BannedWordsUpdateOne) SaveX(ctx context.Context) *BannedWords {
	node, err := bwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bwuo *BannedWordsUpdateOne) Exec(ctx context.Context) error {
	_, err := bwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bwuo *BannedWordsUpdateOne) ExecX(ctx context.Context) {
	if err := bwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bwuo *BannedWordsUpdateOne) defaults() {
	if _, ok := bwuo.mutation.UpdatedAt(); !ok {
		v := bannedwords.UpdateDefaultUpdatedAt()
		bwuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bwuo *BannedWordsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BannedWordsUpdateOne {
	bwuo.modifiers = append(bwuo.modifiers, modifiers...)
	return bwuo
}

func (bwuo *BannedWordsUpdateOne) sqlSave(ctx context.Context) (_node *BannedWords, err error) {
	_spec := sqlgraph.NewUpdateSpec(bannedwords.Table, bannedwords.Columns, sqlgraph.NewFieldSpec(bannedwords.FieldID, field.TypeUUID))
	id, ok := bwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BannedWords.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bwuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bannedwords.FieldID)
		for _, f := range fields {
			if !bannedwords.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bannedwords.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bwuo.mutation.Words(); ok {
		_spec.SetField(bannedwords.FieldWords, field.TypeJSON, value)
	}
	if value, ok := bwuo.mutation.AppendedWords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, bannedwords.FieldWords, value)
		})
	}
	if value, ok := bwuo.mutation.Reason(); ok {
		_spec.SetField(bannedwords.FieldReason, field.TypeString, value)
	}
	if value, ok := bwuo.mutation.SplitMatch(); ok {
		_spec.SetField(bannedwords.FieldSplitMatch, field.TypeBool, value)
	}
	if value, ok := bwuo.mutation.UpdatedAt(); ok {
		_spec.SetField(bannedwords.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(bwuo.modifiers...)
	_node = &BannedWords{config: bwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bannedwords.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bwuo.mutation.done = true
	return _node, nil
}
