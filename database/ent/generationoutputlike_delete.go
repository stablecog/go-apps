// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stablecog/sc-go/database/ent/generationoutputlike"
	"github.com/stablecog/sc-go/database/ent/predicate"
)

// GenerationOutputLikeDelete is the builder for deleting a GenerationOutputLike entity.
type GenerationOutputLikeDelete struct {
	config
	hooks    []Hook
	mutation *GenerationOutputLikeMutation
}

// Where appends a list predicates to the GenerationOutputLikeDelete builder.
func (gold *GenerationOutputLikeDelete) Where(ps ...predicate.GenerationOutputLike) *GenerationOutputLikeDelete {
	gold.mutation.Where(ps...)
	return gold
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (gold *GenerationOutputLikeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, gold.sqlExec, gold.mutation, gold.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (gold *GenerationOutputLikeDelete) ExecX(ctx context.Context) int {
	n, err := gold.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (gold *GenerationOutputLikeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(generationoutputlike.Table, sqlgraph.NewFieldSpec(generationoutputlike.FieldID, field.TypeUUID))
	if ps := gold.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, gold.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	gold.mutation.done = true
	return affected, err
}

// GenerationOutputLikeDeleteOne is the builder for deleting a single GenerationOutputLike entity.
type GenerationOutputLikeDeleteOne struct {
	gold *GenerationOutputLikeDelete
}

// Where appends a list predicates to the GenerationOutputLikeDelete builder.
func (goldo *GenerationOutputLikeDeleteOne) Where(ps ...predicate.GenerationOutputLike) *GenerationOutputLikeDeleteOne {
	goldo.gold.mutation.Where(ps...)
	return goldo
}

// Exec executes the deletion query.
func (goldo *GenerationOutputLikeDeleteOne) Exec(ctx context.Context) error {
	n, err := goldo.gold.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{generationoutputlike.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (goldo *GenerationOutputLikeDeleteOne) ExecX(ctx context.Context) {
	if err := goldo.Exec(ctx); err != nil {
		panic(err)
	}
}
