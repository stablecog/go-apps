// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/apitoken"
	"github.com/stablecog/sc-go/database/ent/deviceinfo"
	"github.com/stablecog/sc-go/database/ent/upscale"
	"github.com/stablecog/sc-go/database/ent/upscalemodel"
	"github.com/stablecog/sc-go/database/ent/user"
	"github.com/stablecog/sc-go/database/enttypes"
)

// Upscale is the model entity for the Upscale schema.
type Upscale struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Width holds the value of the "width" field.
	Width int32 `json:"width,omitempty"`
	// Height holds the value of the "height" field.
	Height int32 `json:"height,omitempty"`
	// Scale holds the value of the "scale" field.
	Scale int32 `json:"scale,omitempty"`
	// CountryCode holds the value of the "country_code" field.
	CountryCode *string `json:"country_code,omitempty"`
	// Status holds the value of the "status" field.
	Status upscale.Status `json:"status,omitempty"`
	// FailureReason holds the value of the "failure_reason" field.
	FailureReason *string `json:"failure_reason,omitempty"`
	// StripeProductID holds the value of the "stripe_product_id" field.
	StripeProductID *string `json:"stripe_product_id,omitempty"`
	// SystemGenerated holds the value of the "system_generated" field.
	SystemGenerated bool `json:"system_generated,omitempty"`
	// SourceType holds the value of the "source_type" field.
	SourceType enttypes.SourceType `json:"source_type,omitempty"`
	// WebhookToken holds the value of the "webhook_token" field.
	WebhookToken uuid.UUID `json:"webhook_token,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// DeviceInfoID holds the value of the "device_info_id" field.
	DeviceInfoID uuid.UUID `json:"device_info_id,omitempty"`
	// ModelID holds the value of the "model_id" field.
	ModelID uuid.UUID `json:"model_id,omitempty"`
	// APITokenID holds the value of the "api_token_id" field.
	APITokenID *uuid.UUID `json:"api_token_id,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt *time.Time `json:"started_at,omitempty"`
	// CompletedAt holds the value of the "completed_at" field.
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UpscaleQuery when eager-loading is set.
	Edges UpscaleEdges `json:"edges"`
}

// UpscaleEdges holds the relations/edges for other nodes in the graph.
type UpscaleEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// DeviceInfo holds the value of the device_info edge.
	DeviceInfo *DeviceInfo `json:"device_info,omitempty"`
	// UpscaleModels holds the value of the upscale_models edge.
	UpscaleModels *UpscaleModel `json:"upscale_models,omitempty"`
	// APITokens holds the value of the api_tokens edge.
	APITokens *ApiToken `json:"api_tokens,omitempty"`
	// UpscaleOutputs holds the value of the upscale_outputs edge.
	UpscaleOutputs []*UpscaleOutput `json:"upscale_outputs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UpscaleEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// DeviceInfoOrErr returns the DeviceInfo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UpscaleEdges) DeviceInfoOrErr() (*DeviceInfo, error) {
	if e.loadedTypes[1] {
		if e.DeviceInfo == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: deviceinfo.Label}
		}
		return e.DeviceInfo, nil
	}
	return nil, &NotLoadedError{edge: "device_info"}
}

// UpscaleModelsOrErr returns the UpscaleModels value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UpscaleEdges) UpscaleModelsOrErr() (*UpscaleModel, error) {
	if e.loadedTypes[2] {
		if e.UpscaleModels == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: upscalemodel.Label}
		}
		return e.UpscaleModels, nil
	}
	return nil, &NotLoadedError{edge: "upscale_models"}
}

// APITokensOrErr returns the APITokens value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UpscaleEdges) APITokensOrErr() (*ApiToken, error) {
	if e.loadedTypes[3] {
		if e.APITokens == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: apitoken.Label}
		}
		return e.APITokens, nil
	}
	return nil, &NotLoadedError{edge: "api_tokens"}
}

// UpscaleOutputsOrErr returns the UpscaleOutputs value or an error if the edge
// was not loaded in eager-loading.
func (e UpscaleEdges) UpscaleOutputsOrErr() ([]*UpscaleOutput, error) {
	if e.loadedTypes[4] {
		return e.UpscaleOutputs, nil
	}
	return nil, &NotLoadedError{edge: "upscale_outputs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Upscale) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case upscale.FieldAPITokenID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case upscale.FieldSystemGenerated:
			values[i] = new(sql.NullBool)
		case upscale.FieldWidth, upscale.FieldHeight, upscale.FieldScale:
			values[i] = new(sql.NullInt64)
		case upscale.FieldCountryCode, upscale.FieldStatus, upscale.FieldFailureReason, upscale.FieldStripeProductID, upscale.FieldSourceType:
			values[i] = new(sql.NullString)
		case upscale.FieldStartedAt, upscale.FieldCompletedAt, upscale.FieldCreatedAt, upscale.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case upscale.FieldID, upscale.FieldWebhookToken, upscale.FieldUserID, upscale.FieldDeviceInfoID, upscale.FieldModelID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Upscale", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Upscale fields.
func (u *Upscale) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case upscale.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case upscale.FieldWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[i])
			} else if value.Valid {
				u.Width = int32(value.Int64)
			}
		case upscale.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				u.Height = int32(value.Int64)
			}
		case upscale.FieldScale:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scale", values[i])
			} else if value.Valid {
				u.Scale = int32(value.Int64)
			}
		case upscale.FieldCountryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country_code", values[i])
			} else if value.Valid {
				u.CountryCode = new(string)
				*u.CountryCode = value.String
			}
		case upscale.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				u.Status = upscale.Status(value.String)
			}
		case upscale.FieldFailureReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field failure_reason", values[i])
			} else if value.Valid {
				u.FailureReason = new(string)
				*u.FailureReason = value.String
			}
		case upscale.FieldStripeProductID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_product_id", values[i])
			} else if value.Valid {
				u.StripeProductID = new(string)
				*u.StripeProductID = value.String
			}
		case upscale.FieldSystemGenerated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field system_generated", values[i])
			} else if value.Valid {
				u.SystemGenerated = value.Bool
			}
		case upscale.FieldSourceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_type", values[i])
			} else if value.Valid {
				u.SourceType = enttypes.SourceType(value.String)
			}
		case upscale.FieldWebhookToken:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field webhook_token", values[i])
			} else if value != nil {
				u.WebhookToken = *value
			}
		case upscale.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				u.UserID = *value
			}
		case upscale.FieldDeviceInfoID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field device_info_id", values[i])
			} else if value != nil {
				u.DeviceInfoID = *value
			}
		case upscale.FieldModelID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field model_id", values[i])
			} else if value != nil {
				u.ModelID = *value
			}
		case upscale.FieldAPITokenID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field api_token_id", values[i])
			} else if value.Valid {
				u.APITokenID = new(uuid.UUID)
				*u.APITokenID = *value.S.(*uuid.UUID)
			}
		case upscale.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				u.StartedAt = new(time.Time)
				*u.StartedAt = value.Time
			}
		case upscale.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				u.CompletedAt = new(time.Time)
				*u.CompletedAt = value.Time
			}
		case upscale.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case upscale.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Upscale entity.
func (u *Upscale) QueryUser() *UserQuery {
	return NewUpscaleClient(u.config).QueryUser(u)
}

// QueryDeviceInfo queries the "device_info" edge of the Upscale entity.
func (u *Upscale) QueryDeviceInfo() *DeviceInfoQuery {
	return NewUpscaleClient(u.config).QueryDeviceInfo(u)
}

// QueryUpscaleModels queries the "upscale_models" edge of the Upscale entity.
func (u *Upscale) QueryUpscaleModels() *UpscaleModelQuery {
	return NewUpscaleClient(u.config).QueryUpscaleModels(u)
}

// QueryAPITokens queries the "api_tokens" edge of the Upscale entity.
func (u *Upscale) QueryAPITokens() *ApiTokenQuery {
	return NewUpscaleClient(u.config).QueryAPITokens(u)
}

// QueryUpscaleOutputs queries the "upscale_outputs" edge of the Upscale entity.
func (u *Upscale) QueryUpscaleOutputs() *UpscaleOutputQuery {
	return NewUpscaleClient(u.config).QueryUpscaleOutputs(u)
}

// Update returns a builder for updating this Upscale.
// Note that you need to call Upscale.Unwrap() before calling this method if this Upscale
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *Upscale) Update() *UpscaleUpdateOne {
	return NewUpscaleClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the Upscale entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *Upscale) Unwrap() *Upscale {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: Upscale is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *Upscale) String() string {
	var builder strings.Builder
	builder.WriteString("Upscale(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("width=")
	builder.WriteString(fmt.Sprintf("%v", u.Width))
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", u.Height))
	builder.WriteString(", ")
	builder.WriteString("scale=")
	builder.WriteString(fmt.Sprintf("%v", u.Scale))
	builder.WriteString(", ")
	if v := u.CountryCode; v != nil {
		builder.WriteString("country_code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", u.Status))
	builder.WriteString(", ")
	if v := u.FailureReason; v != nil {
		builder.WriteString("failure_reason=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.StripeProductID; v != nil {
		builder.WriteString("stripe_product_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("system_generated=")
	builder.WriteString(fmt.Sprintf("%v", u.SystemGenerated))
	builder.WriteString(", ")
	builder.WriteString("source_type=")
	builder.WriteString(fmt.Sprintf("%v", u.SourceType))
	builder.WriteString(", ")
	builder.WriteString("webhook_token=")
	builder.WriteString(fmt.Sprintf("%v", u.WebhookToken))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", u.UserID))
	builder.WriteString(", ")
	builder.WriteString("device_info_id=")
	builder.WriteString(fmt.Sprintf("%v", u.DeviceInfoID))
	builder.WriteString(", ")
	builder.WriteString("model_id=")
	builder.WriteString(fmt.Sprintf("%v", u.ModelID))
	builder.WriteString(", ")
	if v := u.APITokenID; v != nil {
		builder.WriteString("api_token_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := u.StartedAt; v != nil {
		builder.WriteString("started_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := u.CompletedAt; v != nil {
		builder.WriteString("completed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Upscales is a parsable slice of Upscale.
type Upscales []*Upscale

func (u Upscales) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
