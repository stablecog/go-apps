// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/generationmodel"
)

// GenerationModel is the model entity for the GenerationModel schema.
type GenerationModel struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// NameInWorker holds the value of the "name_in_worker" field.
	NameInWorker string `json:"name_in_worker,omitempty"`
	// ShortName holds the value of the "short_name" field.
	ShortName string `json:"short_name,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// IsDefault holds the value of the "is_default" field.
	IsDefault bool `json:"is_default,omitempty"`
	// IsHidden holds the value of the "is_hidden" field.
	IsHidden bool `json:"is_hidden,omitempty"`
	// RunpodEndpoint holds the value of the "runpod_endpoint" field.
	RunpodEndpoint *string `json:"runpod_endpoint,omitempty"`
	// RunpodActive holds the value of the "runpod_active" field.
	RunpodActive bool `json:"runpod_active,omitempty"`
	// DisplayWeight holds the value of the "display_weight" field.
	DisplayWeight int32 `json:"display_weight,omitempty"`
	// DefaultSchedulerID holds the value of the "default_scheduler_id" field.
	DefaultSchedulerID *uuid.UUID `json:"default_scheduler_id,omitempty"`
	// DefaultWidth holds the value of the "default_width" field.
	DefaultWidth int32 `json:"default_width,omitempty"`
	// DefaultHeight holds the value of the "default_height" field.
	DefaultHeight int32 `json:"default_height,omitempty"`
	// DefaultInferenceSteps holds the value of the "default_inference_steps" field.
	DefaultInferenceSteps int32 `json:"default_inference_steps,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GenerationModelQuery when eager-loading is set.
	Edges        GenerationModelEdges `json:"edges"`
	selectValues sql.SelectValues
}

// GenerationModelEdges holds the relations/edges for other nodes in the graph.
type GenerationModelEdges struct {
	// Generations holds the value of the generations edge.
	Generations []*Generation `json:"generations,omitempty"`
	// Schedulers holds the value of the schedulers edge.
	Schedulers []*Scheduler `json:"schedulers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GenerationsOrErr returns the Generations value or an error if the edge
// was not loaded in eager-loading.
func (e GenerationModelEdges) GenerationsOrErr() ([]*Generation, error) {
	if e.loadedTypes[0] {
		return e.Generations, nil
	}
	return nil, &NotLoadedError{edge: "generations"}
}

// SchedulersOrErr returns the Schedulers value or an error if the edge
// was not loaded in eager-loading.
func (e GenerationModelEdges) SchedulersOrErr() ([]*Scheduler, error) {
	if e.loadedTypes[1] {
		return e.Schedulers, nil
	}
	return nil, &NotLoadedError{edge: "schedulers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GenerationModel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case generationmodel.FieldDefaultSchedulerID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case generationmodel.FieldIsActive, generationmodel.FieldIsDefault, generationmodel.FieldIsHidden, generationmodel.FieldRunpodActive:
			values[i] = new(sql.NullBool)
		case generationmodel.FieldDisplayWeight, generationmodel.FieldDefaultWidth, generationmodel.FieldDefaultHeight, generationmodel.FieldDefaultInferenceSteps:
			values[i] = new(sql.NullInt64)
		case generationmodel.FieldNameInWorker, generationmodel.FieldShortName, generationmodel.FieldRunpodEndpoint:
			values[i] = new(sql.NullString)
		case generationmodel.FieldCreatedAt, generationmodel.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case generationmodel.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GenerationModel fields.
func (gm *GenerationModel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case generationmodel.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				gm.ID = *value
			}
		case generationmodel.FieldNameInWorker:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_in_worker", values[i])
			} else if value.Valid {
				gm.NameInWorker = value.String
			}
		case generationmodel.FieldShortName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short_name", values[i])
			} else if value.Valid {
				gm.ShortName = value.String
			}
		case generationmodel.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				gm.IsActive = value.Bool
			}
		case generationmodel.FieldIsDefault:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_default", values[i])
			} else if value.Valid {
				gm.IsDefault = value.Bool
			}
		case generationmodel.FieldIsHidden:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_hidden", values[i])
			} else if value.Valid {
				gm.IsHidden = value.Bool
			}
		case generationmodel.FieldRunpodEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field runpod_endpoint", values[i])
			} else if value.Valid {
				gm.RunpodEndpoint = new(string)
				*gm.RunpodEndpoint = value.String
			}
		case generationmodel.FieldRunpodActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field runpod_active", values[i])
			} else if value.Valid {
				gm.RunpodActive = value.Bool
			}
		case generationmodel.FieldDisplayWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field display_weight", values[i])
			} else if value.Valid {
				gm.DisplayWeight = int32(value.Int64)
			}
		case generationmodel.FieldDefaultSchedulerID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field default_scheduler_id", values[i])
			} else if value.Valid {
				gm.DefaultSchedulerID = new(uuid.UUID)
				*gm.DefaultSchedulerID = *value.S.(*uuid.UUID)
			}
		case generationmodel.FieldDefaultWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field default_width", values[i])
			} else if value.Valid {
				gm.DefaultWidth = int32(value.Int64)
			}
		case generationmodel.FieldDefaultHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field default_height", values[i])
			} else if value.Valid {
				gm.DefaultHeight = int32(value.Int64)
			}
		case generationmodel.FieldDefaultInferenceSteps:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field default_inference_steps", values[i])
			} else if value.Valid {
				gm.DefaultInferenceSteps = int32(value.Int64)
			}
		case generationmodel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gm.CreatedAt = value.Time
			}
		case generationmodel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gm.UpdatedAt = value.Time
			}
		default:
			gm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GenerationModel.
// This includes values selected through modifiers, order, etc.
func (gm *GenerationModel) Value(name string) (ent.Value, error) {
	return gm.selectValues.Get(name)
}

// QueryGenerations queries the "generations" edge of the GenerationModel entity.
func (gm *GenerationModel) QueryGenerations() *GenerationQuery {
	return NewGenerationModelClient(gm.config).QueryGenerations(gm)
}

// QuerySchedulers queries the "schedulers" edge of the GenerationModel entity.
func (gm *GenerationModel) QuerySchedulers() *SchedulerQuery {
	return NewGenerationModelClient(gm.config).QuerySchedulers(gm)
}

// Update returns a builder for updating this GenerationModel.
// Note that you need to call GenerationModel.Unwrap() before calling this method if this GenerationModel
// was returned from a transaction, and the transaction was committed or rolled back.
func (gm *GenerationModel) Update() *GenerationModelUpdateOne {
	return NewGenerationModelClient(gm.config).UpdateOne(gm)
}

// Unwrap unwraps the GenerationModel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gm *GenerationModel) Unwrap() *GenerationModel {
	_tx, ok := gm.config.driver.(*txDriver)
	if !ok {
		panic("ent: GenerationModel is not a transactional entity")
	}
	gm.config.driver = _tx.drv
	return gm
}

// String implements the fmt.Stringer.
func (gm *GenerationModel) String() string {
	var builder strings.Builder
	builder.WriteString("GenerationModel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gm.ID))
	builder.WriteString("name_in_worker=")
	builder.WriteString(gm.NameInWorker)
	builder.WriteString(", ")
	builder.WriteString("short_name=")
	builder.WriteString(gm.ShortName)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", gm.IsActive))
	builder.WriteString(", ")
	builder.WriteString("is_default=")
	builder.WriteString(fmt.Sprintf("%v", gm.IsDefault))
	builder.WriteString(", ")
	builder.WriteString("is_hidden=")
	builder.WriteString(fmt.Sprintf("%v", gm.IsHidden))
	builder.WriteString(", ")
	if v := gm.RunpodEndpoint; v != nil {
		builder.WriteString("runpod_endpoint=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("runpod_active=")
	builder.WriteString(fmt.Sprintf("%v", gm.RunpodActive))
	builder.WriteString(", ")
	builder.WriteString("display_weight=")
	builder.WriteString(fmt.Sprintf("%v", gm.DisplayWeight))
	builder.WriteString(", ")
	if v := gm.DefaultSchedulerID; v != nil {
		builder.WriteString("default_scheduler_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("default_width=")
	builder.WriteString(fmt.Sprintf("%v", gm.DefaultWidth))
	builder.WriteString(", ")
	builder.WriteString("default_height=")
	builder.WriteString(fmt.Sprintf("%v", gm.DefaultHeight))
	builder.WriteString(", ")
	builder.WriteString("default_inference_steps=")
	builder.WriteString(fmt.Sprintf("%v", gm.DefaultInferenceSteps))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(gm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(gm.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GenerationModels is a parsable slice of GenerationModel.
type GenerationModels []*GenerationModel
