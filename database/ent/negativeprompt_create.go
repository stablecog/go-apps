// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/generation"
	"github.com/stablecog/sc-go/database/ent/negativeprompt"
)

// NegativePromptCreate is the builder for creating a NegativePrompt entity.
type NegativePromptCreate struct {
	config
	mutation *NegativePromptMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetText sets the "text" field.
func (npc *NegativePromptCreate) SetText(s string) *NegativePromptCreate {
	npc.mutation.SetText(s)
	return npc
}

// SetTranslatedText sets the "translated_text" field.
func (npc *NegativePromptCreate) SetTranslatedText(s string) *NegativePromptCreate {
	npc.mutation.SetTranslatedText(s)
	return npc
}

// SetNillableTranslatedText sets the "translated_text" field if the given value is not nil.
func (npc *NegativePromptCreate) SetNillableTranslatedText(s *string) *NegativePromptCreate {
	if s != nil {
		npc.SetTranslatedText(*s)
	}
	return npc
}

// SetRanTranslation sets the "ran_translation" field.
func (npc *NegativePromptCreate) SetRanTranslation(b bool) *NegativePromptCreate {
	npc.mutation.SetRanTranslation(b)
	return npc
}

// SetNillableRanTranslation sets the "ran_translation" field if the given value is not nil.
func (npc *NegativePromptCreate) SetNillableRanTranslation(b *bool) *NegativePromptCreate {
	if b != nil {
		npc.SetRanTranslation(*b)
	}
	return npc
}

// SetCreatedAt sets the "created_at" field.
func (npc *NegativePromptCreate) SetCreatedAt(t time.Time) *NegativePromptCreate {
	npc.mutation.SetCreatedAt(t)
	return npc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (npc *NegativePromptCreate) SetNillableCreatedAt(t *time.Time) *NegativePromptCreate {
	if t != nil {
		npc.SetCreatedAt(*t)
	}
	return npc
}

// SetUpdatedAt sets the "updated_at" field.
func (npc *NegativePromptCreate) SetUpdatedAt(t time.Time) *NegativePromptCreate {
	npc.mutation.SetUpdatedAt(t)
	return npc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (npc *NegativePromptCreate) SetNillableUpdatedAt(t *time.Time) *NegativePromptCreate {
	if t != nil {
		npc.SetUpdatedAt(*t)
	}
	return npc
}

// SetID sets the "id" field.
func (npc *NegativePromptCreate) SetID(u uuid.UUID) *NegativePromptCreate {
	npc.mutation.SetID(u)
	return npc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (npc *NegativePromptCreate) SetNillableID(u *uuid.UUID) *NegativePromptCreate {
	if u != nil {
		npc.SetID(*u)
	}
	return npc
}

// AddGenerationIDs adds the "generations" edge to the Generation entity by IDs.
func (npc *NegativePromptCreate) AddGenerationIDs(ids ...uuid.UUID) *NegativePromptCreate {
	npc.mutation.AddGenerationIDs(ids...)
	return npc
}

// AddGenerations adds the "generations" edges to the Generation entity.
func (npc *NegativePromptCreate) AddGenerations(g ...*Generation) *NegativePromptCreate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return npc.AddGenerationIDs(ids...)
}

// Mutation returns the NegativePromptMutation object of the builder.
func (npc *NegativePromptCreate) Mutation() *NegativePromptMutation {
	return npc.mutation
}

// Save creates the NegativePrompt in the database.
func (npc *NegativePromptCreate) Save(ctx context.Context) (*NegativePrompt, error) {
	npc.defaults()
	return withHooks(ctx, npc.sqlSave, npc.mutation, npc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (npc *NegativePromptCreate) SaveX(ctx context.Context) *NegativePrompt {
	v, err := npc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (npc *NegativePromptCreate) Exec(ctx context.Context) error {
	_, err := npc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (npc *NegativePromptCreate) ExecX(ctx context.Context) {
	if err := npc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (npc *NegativePromptCreate) defaults() {
	if _, ok := npc.mutation.RanTranslation(); !ok {
		v := negativeprompt.DefaultRanTranslation
		npc.mutation.SetRanTranslation(v)
	}
	if _, ok := npc.mutation.CreatedAt(); !ok {
		v := negativeprompt.DefaultCreatedAt()
		npc.mutation.SetCreatedAt(v)
	}
	if _, ok := npc.mutation.UpdatedAt(); !ok {
		v := negativeprompt.DefaultUpdatedAt()
		npc.mutation.SetUpdatedAt(v)
	}
	if _, ok := npc.mutation.ID(); !ok {
		v := negativeprompt.DefaultID()
		npc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (npc *NegativePromptCreate) check() error {
	if _, ok := npc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "NegativePrompt.text"`)}
	}
	if _, ok := npc.mutation.RanTranslation(); !ok {
		return &ValidationError{Name: "ran_translation", err: errors.New(`ent: missing required field "NegativePrompt.ran_translation"`)}
	}
	if _, ok := npc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "NegativePrompt.created_at"`)}
	}
	if _, ok := npc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "NegativePrompt.updated_at"`)}
	}
	return nil
}

func (npc *NegativePromptCreate) sqlSave(ctx context.Context) (*NegativePrompt, error) {
	if err := npc.check(); err != nil {
		return nil, err
	}
	_node, _spec := npc.createSpec()
	if err := sqlgraph.CreateNode(ctx, npc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	npc.mutation.id = &_node.ID
	npc.mutation.done = true
	return _node, nil
}

func (npc *NegativePromptCreate) createSpec() (*NegativePrompt, *sqlgraph.CreateSpec) {
	var (
		_node = &NegativePrompt{config: npc.config}
		_spec = sqlgraph.NewCreateSpec(negativeprompt.Table, sqlgraph.NewFieldSpec(negativeprompt.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = npc.conflict
	if id, ok := npc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := npc.mutation.Text(); ok {
		_spec.SetField(negativeprompt.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := npc.mutation.TranslatedText(); ok {
		_spec.SetField(negativeprompt.FieldTranslatedText, field.TypeString, value)
		_node.TranslatedText = &value
	}
	if value, ok := npc.mutation.RanTranslation(); ok {
		_spec.SetField(negativeprompt.FieldRanTranslation, field.TypeBool, value)
		_node.RanTranslation = value
	}
	if value, ok := npc.mutation.CreatedAt(); ok {
		_spec.SetField(negativeprompt.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := npc.mutation.UpdatedAt(); ok {
		_spec.SetField(negativeprompt.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := npc.mutation.GenerationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   negativeprompt.GenerationsTable,
			Columns: []string{negativeprompt.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NegativePrompt.Create().
//		SetText(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NegativePromptUpsert) {
//			SetText(v+v).
//		}).
//		Exec(ctx)
func (npc *NegativePromptCreate) OnConflict(opts ...sql.ConflictOption) *NegativePromptUpsertOne {
	npc.conflict = opts
	return &NegativePromptUpsertOne{
		create: npc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NegativePrompt.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (npc *NegativePromptCreate) OnConflictColumns(columns ...string) *NegativePromptUpsertOne {
	npc.conflict = append(npc.conflict, sql.ConflictColumns(columns...))
	return &NegativePromptUpsertOne{
		create: npc,
	}
}

type (
	// NegativePromptUpsertOne is the builder for "upsert"-ing
	//  one NegativePrompt node.
	NegativePromptUpsertOne struct {
		create *NegativePromptCreate
	}

	// NegativePromptUpsert is the "OnConflict" setter.
	NegativePromptUpsert struct {
		*sql.UpdateSet
	}
)

// SetText sets the "text" field.
func (u *NegativePromptUpsert) SetText(v string) *NegativePromptUpsert {
	u.Set(negativeprompt.FieldText, v)
	return u
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *NegativePromptUpsert) UpdateText() *NegativePromptUpsert {
	u.SetExcluded(negativeprompt.FieldText)
	return u
}

// SetTranslatedText sets the "translated_text" field.
func (u *NegativePromptUpsert) SetTranslatedText(v string) *NegativePromptUpsert {
	u.Set(negativeprompt.FieldTranslatedText, v)
	return u
}

// UpdateTranslatedText sets the "translated_text" field to the value that was provided on create.
func (u *NegativePromptUpsert) UpdateTranslatedText() *NegativePromptUpsert {
	u.SetExcluded(negativeprompt.FieldTranslatedText)
	return u
}

// ClearTranslatedText clears the value of the "translated_text" field.
func (u *NegativePromptUpsert) ClearTranslatedText() *NegativePromptUpsert {
	u.SetNull(negativeprompt.FieldTranslatedText)
	return u
}

// SetRanTranslation sets the "ran_translation" field.
func (u *NegativePromptUpsert) SetRanTranslation(v bool) *NegativePromptUpsert {
	u.Set(negativeprompt.FieldRanTranslation, v)
	return u
}

// UpdateRanTranslation sets the "ran_translation" field to the value that was provided on create.
func (u *NegativePromptUpsert) UpdateRanTranslation() *NegativePromptUpsert {
	u.SetExcluded(negativeprompt.FieldRanTranslation)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NegativePromptUpsert) SetUpdatedAt(v time.Time) *NegativePromptUpsert {
	u.Set(negativeprompt.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NegativePromptUpsert) UpdateUpdatedAt() *NegativePromptUpsert {
	u.SetExcluded(negativeprompt.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.NegativePrompt.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(negativeprompt.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NegativePromptUpsertOne) UpdateNewValues() *NegativePromptUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(negativeprompt.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(negativeprompt.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NegativePrompt.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NegativePromptUpsertOne) Ignore() *NegativePromptUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NegativePromptUpsertOne) DoNothing() *NegativePromptUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NegativePromptCreate.OnConflict
// documentation for more info.
func (u *NegativePromptUpsertOne) Update(set func(*NegativePromptUpsert)) *NegativePromptUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NegativePromptUpsert{UpdateSet: update})
	}))
	return u
}

// SetText sets the "text" field.
func (u *NegativePromptUpsertOne) SetText(v string) *NegativePromptUpsertOne {
	return u.Update(func(s *NegativePromptUpsert) {
		s.SetText(v)
	})
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *NegativePromptUpsertOne) UpdateText() *NegativePromptUpsertOne {
	return u.Update(func(s *NegativePromptUpsert) {
		s.UpdateText()
	})
}

// SetTranslatedText sets the "translated_text" field.
func (u *NegativePromptUpsertOne) SetTranslatedText(v string) *NegativePromptUpsertOne {
	return u.Update(func(s *NegativePromptUpsert) {
		s.SetTranslatedText(v)
	})
}

// UpdateTranslatedText sets the "translated_text" field to the value that was provided on create.
func (u *NegativePromptUpsertOne) UpdateTranslatedText() *NegativePromptUpsertOne {
	return u.Update(func(s *NegativePromptUpsert) {
		s.UpdateTranslatedText()
	})
}

// ClearTranslatedText clears the value of the "translated_text" field.
func (u *NegativePromptUpsertOne) ClearTranslatedText() *NegativePromptUpsertOne {
	return u.Update(func(s *NegativePromptUpsert) {
		s.ClearTranslatedText()
	})
}

// SetRanTranslation sets the "ran_translation" field.
func (u *NegativePromptUpsertOne) SetRanTranslation(v bool) *NegativePromptUpsertOne {
	return u.Update(func(s *NegativePromptUpsert) {
		s.SetRanTranslation(v)
	})
}

// UpdateRanTranslation sets the "ran_translation" field to the value that was provided on create.
func (u *NegativePromptUpsertOne) UpdateRanTranslation() *NegativePromptUpsertOne {
	return u.Update(func(s *NegativePromptUpsert) {
		s.UpdateRanTranslation()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NegativePromptUpsertOne) SetUpdatedAt(v time.Time) *NegativePromptUpsertOne {
	return u.Update(func(s *NegativePromptUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NegativePromptUpsertOne) UpdateUpdatedAt() *NegativePromptUpsertOne {
	return u.Update(func(s *NegativePromptUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *NegativePromptUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NegativePromptCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NegativePromptUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NegativePromptUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: NegativePromptUpsertOne.ID is not supported by MySQL driver. Use NegativePromptUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NegativePromptUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NegativePromptCreateBulk is the builder for creating many NegativePrompt entities in bulk.
type NegativePromptCreateBulk struct {
	config
	err      error
	builders []*NegativePromptCreate
	conflict []sql.ConflictOption
}

// Save creates the NegativePrompt entities in the database.
func (npcb *NegativePromptCreateBulk) Save(ctx context.Context) ([]*NegativePrompt, error) {
	if npcb.err != nil {
		return nil, npcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(npcb.builders))
	nodes := make([]*NegativePrompt, len(npcb.builders))
	mutators := make([]Mutator, len(npcb.builders))
	for i := range npcb.builders {
		func(i int, root context.Context) {
			builder := npcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NegativePromptMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, npcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = npcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, npcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, npcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (npcb *NegativePromptCreateBulk) SaveX(ctx context.Context) []*NegativePrompt {
	v, err := npcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (npcb *NegativePromptCreateBulk) Exec(ctx context.Context) error {
	_, err := npcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (npcb *NegativePromptCreateBulk) ExecX(ctx context.Context) {
	if err := npcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NegativePrompt.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NegativePromptUpsert) {
//			SetText(v+v).
//		}).
//		Exec(ctx)
func (npcb *NegativePromptCreateBulk) OnConflict(opts ...sql.ConflictOption) *NegativePromptUpsertBulk {
	npcb.conflict = opts
	return &NegativePromptUpsertBulk{
		create: npcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NegativePrompt.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (npcb *NegativePromptCreateBulk) OnConflictColumns(columns ...string) *NegativePromptUpsertBulk {
	npcb.conflict = append(npcb.conflict, sql.ConflictColumns(columns...))
	return &NegativePromptUpsertBulk{
		create: npcb,
	}
}

// NegativePromptUpsertBulk is the builder for "upsert"-ing
// a bulk of NegativePrompt nodes.
type NegativePromptUpsertBulk struct {
	create *NegativePromptCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.NegativePrompt.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(negativeprompt.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NegativePromptUpsertBulk) UpdateNewValues() *NegativePromptUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(negativeprompt.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(negativeprompt.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NegativePrompt.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NegativePromptUpsertBulk) Ignore() *NegativePromptUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NegativePromptUpsertBulk) DoNothing() *NegativePromptUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NegativePromptCreateBulk.OnConflict
// documentation for more info.
func (u *NegativePromptUpsertBulk) Update(set func(*NegativePromptUpsert)) *NegativePromptUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NegativePromptUpsert{UpdateSet: update})
	}))
	return u
}

// SetText sets the "text" field.
func (u *NegativePromptUpsertBulk) SetText(v string) *NegativePromptUpsertBulk {
	return u.Update(func(s *NegativePromptUpsert) {
		s.SetText(v)
	})
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *NegativePromptUpsertBulk) UpdateText() *NegativePromptUpsertBulk {
	return u.Update(func(s *NegativePromptUpsert) {
		s.UpdateText()
	})
}

// SetTranslatedText sets the "translated_text" field.
func (u *NegativePromptUpsertBulk) SetTranslatedText(v string) *NegativePromptUpsertBulk {
	return u.Update(func(s *NegativePromptUpsert) {
		s.SetTranslatedText(v)
	})
}

// UpdateTranslatedText sets the "translated_text" field to the value that was provided on create.
func (u *NegativePromptUpsertBulk) UpdateTranslatedText() *NegativePromptUpsertBulk {
	return u.Update(func(s *NegativePromptUpsert) {
		s.UpdateTranslatedText()
	})
}

// ClearTranslatedText clears the value of the "translated_text" field.
func (u *NegativePromptUpsertBulk) ClearTranslatedText() *NegativePromptUpsertBulk {
	return u.Update(func(s *NegativePromptUpsert) {
		s.ClearTranslatedText()
	})
}

// SetRanTranslation sets the "ran_translation" field.
func (u *NegativePromptUpsertBulk) SetRanTranslation(v bool) *NegativePromptUpsertBulk {
	return u.Update(func(s *NegativePromptUpsert) {
		s.SetRanTranslation(v)
	})
}

// UpdateRanTranslation sets the "ran_translation" field to the value that was provided on create.
func (u *NegativePromptUpsertBulk) UpdateRanTranslation() *NegativePromptUpsertBulk {
	return u.Update(func(s *NegativePromptUpsert) {
		s.UpdateRanTranslation()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NegativePromptUpsertBulk) SetUpdatedAt(v time.Time) *NegativePromptUpsertBulk {
	return u.Update(func(s *NegativePromptUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NegativePromptUpsertBulk) UpdateUpdatedAt() *NegativePromptUpsertBulk {
	return u.Update(func(s *NegativePromptUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *NegativePromptUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the NegativePromptCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NegativePromptCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NegativePromptUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
