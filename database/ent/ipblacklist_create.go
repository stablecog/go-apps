// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/ipblacklist"
)

// IPBlackListCreate is the builder for creating a IPBlackList entity.
type IPBlackListCreate struct {
	config
	mutation *IPBlackListMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIP sets the "ip" field.
func (iblc *IPBlackListCreate) SetIP(s string) *IPBlackListCreate {
	iblc.mutation.SetIP(s)
	return iblc
}

// SetCreatedAt sets the "created_at" field.
func (iblc *IPBlackListCreate) SetCreatedAt(t time.Time) *IPBlackListCreate {
	iblc.mutation.SetCreatedAt(t)
	return iblc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iblc *IPBlackListCreate) SetNillableCreatedAt(t *time.Time) *IPBlackListCreate {
	if t != nil {
		iblc.SetCreatedAt(*t)
	}
	return iblc
}

// SetUpdatedAt sets the "updated_at" field.
func (iblc *IPBlackListCreate) SetUpdatedAt(t time.Time) *IPBlackListCreate {
	iblc.mutation.SetUpdatedAt(t)
	return iblc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iblc *IPBlackListCreate) SetNillableUpdatedAt(t *time.Time) *IPBlackListCreate {
	if t != nil {
		iblc.SetUpdatedAt(*t)
	}
	return iblc
}

// SetID sets the "id" field.
func (iblc *IPBlackListCreate) SetID(u uuid.UUID) *IPBlackListCreate {
	iblc.mutation.SetID(u)
	return iblc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (iblc *IPBlackListCreate) SetNillableID(u *uuid.UUID) *IPBlackListCreate {
	if u != nil {
		iblc.SetID(*u)
	}
	return iblc
}

// Mutation returns the IPBlackListMutation object of the builder.
func (iblc *IPBlackListCreate) Mutation() *IPBlackListMutation {
	return iblc.mutation
}

// Save creates the IPBlackList in the database.
func (iblc *IPBlackListCreate) Save(ctx context.Context) (*IPBlackList, error) {
	iblc.defaults()
	return withHooks(ctx, iblc.sqlSave, iblc.mutation, iblc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iblc *IPBlackListCreate) SaveX(ctx context.Context) *IPBlackList {
	v, err := iblc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iblc *IPBlackListCreate) Exec(ctx context.Context) error {
	_, err := iblc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iblc *IPBlackListCreate) ExecX(ctx context.Context) {
	if err := iblc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iblc *IPBlackListCreate) defaults() {
	if _, ok := iblc.mutation.CreatedAt(); !ok {
		v := ipblacklist.DefaultCreatedAt()
		iblc.mutation.SetCreatedAt(v)
	}
	if _, ok := iblc.mutation.UpdatedAt(); !ok {
		v := ipblacklist.DefaultUpdatedAt()
		iblc.mutation.SetUpdatedAt(v)
	}
	if _, ok := iblc.mutation.ID(); !ok {
		v := ipblacklist.DefaultID()
		iblc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iblc *IPBlackListCreate) check() error {
	if _, ok := iblc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "IPBlackList.ip"`)}
	}
	if _, ok := iblc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "IPBlackList.created_at"`)}
	}
	if _, ok := iblc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "IPBlackList.updated_at"`)}
	}
	return nil
}

func (iblc *IPBlackListCreate) sqlSave(ctx context.Context) (*IPBlackList, error) {
	if err := iblc.check(); err != nil {
		return nil, err
	}
	_node, _spec := iblc.createSpec()
	if err := sqlgraph.CreateNode(ctx, iblc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	iblc.mutation.id = &_node.ID
	iblc.mutation.done = true
	return _node, nil
}

func (iblc *IPBlackListCreate) createSpec() (*IPBlackList, *sqlgraph.CreateSpec) {
	var (
		_node = &IPBlackList{config: iblc.config}
		_spec = sqlgraph.NewCreateSpec(ipblacklist.Table, sqlgraph.NewFieldSpec(ipblacklist.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = iblc.conflict
	if id, ok := iblc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := iblc.mutation.IP(); ok {
		_spec.SetField(ipblacklist.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := iblc.mutation.CreatedAt(); ok {
		_spec.SetField(ipblacklist.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := iblc.mutation.UpdatedAt(); ok {
		_spec.SetField(ipblacklist.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IPBlackList.Create().
//		SetIP(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IPBlackListUpsert) {
//			SetIP(v+v).
//		}).
//		Exec(ctx)
func (iblc *IPBlackListCreate) OnConflict(opts ...sql.ConflictOption) *IPBlackListUpsertOne {
	iblc.conflict = opts
	return &IPBlackListUpsertOne{
		create: iblc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IPBlackList.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iblc *IPBlackListCreate) OnConflictColumns(columns ...string) *IPBlackListUpsertOne {
	iblc.conflict = append(iblc.conflict, sql.ConflictColumns(columns...))
	return &IPBlackListUpsertOne{
		create: iblc,
	}
}

type (
	// IPBlackListUpsertOne is the builder for "upsert"-ing
	//  one IPBlackList node.
	IPBlackListUpsertOne struct {
		create *IPBlackListCreate
	}

	// IPBlackListUpsert is the "OnConflict" setter.
	IPBlackListUpsert struct {
		*sql.UpdateSet
	}
)

// SetIP sets the "ip" field.
func (u *IPBlackListUpsert) SetIP(v string) *IPBlackListUpsert {
	u.Set(ipblacklist.FieldIP, v)
	return u
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *IPBlackListUpsert) UpdateIP() *IPBlackListUpsert {
	u.SetExcluded(ipblacklist.FieldIP)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IPBlackListUpsert) SetUpdatedAt(v time.Time) *IPBlackListUpsert {
	u.Set(ipblacklist.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IPBlackListUpsert) UpdateUpdatedAt() *IPBlackListUpsert {
	u.SetExcluded(ipblacklist.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.IPBlackList.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ipblacklist.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IPBlackListUpsertOne) UpdateNewValues() *IPBlackListUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(ipblacklist.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(ipblacklist.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IPBlackList.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IPBlackListUpsertOne) Ignore() *IPBlackListUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IPBlackListUpsertOne) DoNothing() *IPBlackListUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IPBlackListCreate.OnConflict
// documentation for more info.
func (u *IPBlackListUpsertOne) Update(set func(*IPBlackListUpsert)) *IPBlackListUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IPBlackListUpsert{UpdateSet: update})
	}))
	return u
}

// SetIP sets the "ip" field.
func (u *IPBlackListUpsertOne) SetIP(v string) *IPBlackListUpsertOne {
	return u.Update(func(s *IPBlackListUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *IPBlackListUpsertOne) UpdateIP() *IPBlackListUpsertOne {
	return u.Update(func(s *IPBlackListUpsert) {
		s.UpdateIP()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IPBlackListUpsertOne) SetUpdatedAt(v time.Time) *IPBlackListUpsertOne {
	return u.Update(func(s *IPBlackListUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IPBlackListUpsertOne) UpdateUpdatedAt() *IPBlackListUpsertOne {
	return u.Update(func(s *IPBlackListUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *IPBlackListUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IPBlackListCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IPBlackListUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IPBlackListUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: IPBlackListUpsertOne.ID is not supported by MySQL driver. Use IPBlackListUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IPBlackListUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IPBlackListCreateBulk is the builder for creating many IPBlackList entities in bulk.
type IPBlackListCreateBulk struct {
	config
	err      error
	builders []*IPBlackListCreate
	conflict []sql.ConflictOption
}

// Save creates the IPBlackList entities in the database.
func (iblcb *IPBlackListCreateBulk) Save(ctx context.Context) ([]*IPBlackList, error) {
	if iblcb.err != nil {
		return nil, iblcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iblcb.builders))
	nodes := make([]*IPBlackList, len(iblcb.builders))
	mutators := make([]Mutator, len(iblcb.builders))
	for i := range iblcb.builders {
		func(i int, root context.Context) {
			builder := iblcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IPBlackListMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iblcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = iblcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iblcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iblcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iblcb *IPBlackListCreateBulk) SaveX(ctx context.Context) []*IPBlackList {
	v, err := iblcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iblcb *IPBlackListCreateBulk) Exec(ctx context.Context) error {
	_, err := iblcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iblcb *IPBlackListCreateBulk) ExecX(ctx context.Context) {
	if err := iblcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IPBlackList.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IPBlackListUpsert) {
//			SetIP(v+v).
//		}).
//		Exec(ctx)
func (iblcb *IPBlackListCreateBulk) OnConflict(opts ...sql.ConflictOption) *IPBlackListUpsertBulk {
	iblcb.conflict = opts
	return &IPBlackListUpsertBulk{
		create: iblcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IPBlackList.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iblcb *IPBlackListCreateBulk) OnConflictColumns(columns ...string) *IPBlackListUpsertBulk {
	iblcb.conflict = append(iblcb.conflict, sql.ConflictColumns(columns...))
	return &IPBlackListUpsertBulk{
		create: iblcb,
	}
}

// IPBlackListUpsertBulk is the builder for "upsert"-ing
// a bulk of IPBlackList nodes.
type IPBlackListUpsertBulk struct {
	create *IPBlackListCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IPBlackList.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ipblacklist.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IPBlackListUpsertBulk) UpdateNewValues() *IPBlackListUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(ipblacklist.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(ipblacklist.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IPBlackList.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IPBlackListUpsertBulk) Ignore() *IPBlackListUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IPBlackListUpsertBulk) DoNothing() *IPBlackListUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IPBlackListCreateBulk.OnConflict
// documentation for more info.
func (u *IPBlackListUpsertBulk) Update(set func(*IPBlackListUpsert)) *IPBlackListUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IPBlackListUpsert{UpdateSet: update})
	}))
	return u
}

// SetIP sets the "ip" field.
func (u *IPBlackListUpsertBulk) SetIP(v string) *IPBlackListUpsertBulk {
	return u.Update(func(s *IPBlackListUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *IPBlackListUpsertBulk) UpdateIP() *IPBlackListUpsertBulk {
	return u.Update(func(s *IPBlackListUpsert) {
		s.UpdateIP()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IPBlackListUpsertBulk) SetUpdatedAt(v time.Time) *IPBlackListUpsertBulk {
	return u.Update(func(s *IPBlackListUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IPBlackListUpsertBulk) UpdateUpdatedAt() *IPBlackListUpsertBulk {
	return u.Update(func(s *IPBlackListUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *IPBlackListUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IPBlackListCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IPBlackListCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IPBlackListUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
