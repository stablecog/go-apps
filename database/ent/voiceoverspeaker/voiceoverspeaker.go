// Code generated by ent, DO NOT EDIT.

package voiceoverspeaker

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the voiceoverspeaker type in the database.
	Label = "voiceover_speaker"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNameInWorker holds the string denoting the name_in_worker field in the database.
	FieldNameInWorker = "name_in_worker"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldIsDefault holds the string denoting the is_default field in the database.
	FieldIsDefault = "is_default"
	// FieldIsHidden holds the string denoting the is_hidden field in the database.
	FieldIsHidden = "is_hidden"
	// FieldLocale holds the string denoting the locale field in the database.
	FieldLocale = "locale"
	// FieldModelID holds the string denoting the model_id field in the database.
	FieldModelID = "model_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeVoiceovers holds the string denoting the voiceovers edge name in mutations.
	EdgeVoiceovers = "voiceovers"
	// EdgeVoiceoverModels holds the string denoting the voiceover_models edge name in mutations.
	EdgeVoiceoverModels = "voiceover_models"
	// Table holds the table name of the voiceoverspeaker in the database.
	Table = "voiceover_speakers"
	// VoiceoversTable is the table that holds the voiceovers relation/edge.
	VoiceoversTable = "voiceovers"
	// VoiceoversInverseTable is the table name for the Voiceover entity.
	// It exists in this package in order to avoid circular dependency with the "voiceover" package.
	VoiceoversInverseTable = "voiceovers"
	// VoiceoversColumn is the table column denoting the voiceovers relation/edge.
	VoiceoversColumn = "speaker_id"
	// VoiceoverModelsTable is the table that holds the voiceover_models relation/edge.
	VoiceoverModelsTable = "voiceover_speakers"
	// VoiceoverModelsInverseTable is the table name for the VoiceoverModel entity.
	// It exists in this package in order to avoid circular dependency with the "voiceovermodel" package.
	VoiceoverModelsInverseTable = "voiceover_models"
	// VoiceoverModelsColumn is the table column denoting the voiceover_models relation/edge.
	VoiceoverModelsColumn = "model_id"
)

// Columns holds all SQL columns for voiceoverspeaker fields.
var Columns = []string{
	FieldID,
	FieldNameInWorker,
	FieldName,
	FieldIsActive,
	FieldIsDefault,
	FieldIsHidden,
	FieldLocale,
	FieldModelID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultIsDefault holds the default value on creation for the "is_default" field.
	DefaultIsDefault bool
	// DefaultIsHidden holds the default value on creation for the "is_hidden" field.
	DefaultIsHidden bool
	// DefaultLocale holds the default value on creation for the "locale" field.
	DefaultLocale string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the VoiceoverSpeaker queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNameInWorker orders the results by the name_in_worker field.
func ByNameInWorker(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameInWorker, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByIsDefault orders the results by the is_default field.
func ByIsDefault(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDefault, opts...).ToFunc()
}

// ByIsHidden orders the results by the is_hidden field.
func ByIsHidden(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsHidden, opts...).ToFunc()
}

// ByLocale orders the results by the locale field.
func ByLocale(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocale, opts...).ToFunc()
}

// ByModelID orders the results by the model_id field.
func ByModelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByVoiceoversCount orders the results by voiceovers count.
func ByVoiceoversCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVoiceoversStep(), opts...)
	}
}

// ByVoiceovers orders the results by voiceovers terms.
func ByVoiceovers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVoiceoversStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVoiceoverModelsField orders the results by voiceover_models field.
func ByVoiceoverModelsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVoiceoverModelsStep(), sql.OrderByField(field, opts...))
	}
}
func newVoiceoversStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VoiceoversInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VoiceoversTable, VoiceoversColumn),
	)
}
func newVoiceoverModelsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VoiceoverModelsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, VoiceoverModelsTable, VoiceoverModelsColumn),
	)
}
