// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/predicate"
	"github.com/stablecog/sc-go/database/ent/voiceover"
	"github.com/stablecog/sc-go/database/ent/voiceovermodel"
	"github.com/stablecog/sc-go/database/ent/voiceoverspeaker"
)

// VoiceoverModelUpdate is the builder for updating VoiceoverModel entities.
type VoiceoverModelUpdate struct {
	config
	hooks     []Hook
	mutation  *VoiceoverModelMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the VoiceoverModelUpdate builder.
func (vmu *VoiceoverModelUpdate) Where(ps ...predicate.VoiceoverModel) *VoiceoverModelUpdate {
	vmu.mutation.Where(ps...)
	return vmu
}

// SetNameInWorker sets the "name_in_worker" field.
func (vmu *VoiceoverModelUpdate) SetNameInWorker(s string) *VoiceoverModelUpdate {
	vmu.mutation.SetNameInWorker(s)
	return vmu
}

// SetNillableNameInWorker sets the "name_in_worker" field if the given value is not nil.
func (vmu *VoiceoverModelUpdate) SetNillableNameInWorker(s *string) *VoiceoverModelUpdate {
	if s != nil {
		vmu.SetNameInWorker(*s)
	}
	return vmu
}

// SetIsActive sets the "is_active" field.
func (vmu *VoiceoverModelUpdate) SetIsActive(b bool) *VoiceoverModelUpdate {
	vmu.mutation.SetIsActive(b)
	return vmu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (vmu *VoiceoverModelUpdate) SetNillableIsActive(b *bool) *VoiceoverModelUpdate {
	if b != nil {
		vmu.SetIsActive(*b)
	}
	return vmu
}

// SetIsDefault sets the "is_default" field.
func (vmu *VoiceoverModelUpdate) SetIsDefault(b bool) *VoiceoverModelUpdate {
	vmu.mutation.SetIsDefault(b)
	return vmu
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (vmu *VoiceoverModelUpdate) SetNillableIsDefault(b *bool) *VoiceoverModelUpdate {
	if b != nil {
		vmu.SetIsDefault(*b)
	}
	return vmu
}

// SetIsHidden sets the "is_hidden" field.
func (vmu *VoiceoverModelUpdate) SetIsHidden(b bool) *VoiceoverModelUpdate {
	vmu.mutation.SetIsHidden(b)
	return vmu
}

// SetNillableIsHidden sets the "is_hidden" field if the given value is not nil.
func (vmu *VoiceoverModelUpdate) SetNillableIsHidden(b *bool) *VoiceoverModelUpdate {
	if b != nil {
		vmu.SetIsHidden(*b)
	}
	return vmu
}

// SetUpdatedAt sets the "updated_at" field.
func (vmu *VoiceoverModelUpdate) SetUpdatedAt(t time.Time) *VoiceoverModelUpdate {
	vmu.mutation.SetUpdatedAt(t)
	return vmu
}

// AddVoiceoverIDs adds the "voiceovers" edge to the Voiceover entity by IDs.
func (vmu *VoiceoverModelUpdate) AddVoiceoverIDs(ids ...uuid.UUID) *VoiceoverModelUpdate {
	vmu.mutation.AddVoiceoverIDs(ids...)
	return vmu
}

// AddVoiceovers adds the "voiceovers" edges to the Voiceover entity.
func (vmu *VoiceoverModelUpdate) AddVoiceovers(v ...*Voiceover) *VoiceoverModelUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vmu.AddVoiceoverIDs(ids...)
}

// AddVoiceoverSpeakerIDs adds the "voiceover_speakers" edge to the VoiceoverSpeaker entity by IDs.
func (vmu *VoiceoverModelUpdate) AddVoiceoverSpeakerIDs(ids ...uuid.UUID) *VoiceoverModelUpdate {
	vmu.mutation.AddVoiceoverSpeakerIDs(ids...)
	return vmu
}

// AddVoiceoverSpeakers adds the "voiceover_speakers" edges to the VoiceoverSpeaker entity.
func (vmu *VoiceoverModelUpdate) AddVoiceoverSpeakers(v ...*VoiceoverSpeaker) *VoiceoverModelUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vmu.AddVoiceoverSpeakerIDs(ids...)
}

// Mutation returns the VoiceoverModelMutation object of the builder.
func (vmu *VoiceoverModelUpdate) Mutation() *VoiceoverModelMutation {
	return vmu.mutation
}

// ClearVoiceovers clears all "voiceovers" edges to the Voiceover entity.
func (vmu *VoiceoverModelUpdate) ClearVoiceovers() *VoiceoverModelUpdate {
	vmu.mutation.ClearVoiceovers()
	return vmu
}

// RemoveVoiceoverIDs removes the "voiceovers" edge to Voiceover entities by IDs.
func (vmu *VoiceoverModelUpdate) RemoveVoiceoverIDs(ids ...uuid.UUID) *VoiceoverModelUpdate {
	vmu.mutation.RemoveVoiceoverIDs(ids...)
	return vmu
}

// RemoveVoiceovers removes "voiceovers" edges to Voiceover entities.
func (vmu *VoiceoverModelUpdate) RemoveVoiceovers(v ...*Voiceover) *VoiceoverModelUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vmu.RemoveVoiceoverIDs(ids...)
}

// ClearVoiceoverSpeakers clears all "voiceover_speakers" edges to the VoiceoverSpeaker entity.
func (vmu *VoiceoverModelUpdate) ClearVoiceoverSpeakers() *VoiceoverModelUpdate {
	vmu.mutation.ClearVoiceoverSpeakers()
	return vmu
}

// RemoveVoiceoverSpeakerIDs removes the "voiceover_speakers" edge to VoiceoverSpeaker entities by IDs.
func (vmu *VoiceoverModelUpdate) RemoveVoiceoverSpeakerIDs(ids ...uuid.UUID) *VoiceoverModelUpdate {
	vmu.mutation.RemoveVoiceoverSpeakerIDs(ids...)
	return vmu
}

// RemoveVoiceoverSpeakers removes "voiceover_speakers" edges to VoiceoverSpeaker entities.
func (vmu *VoiceoverModelUpdate) RemoveVoiceoverSpeakers(v ...*VoiceoverSpeaker) *VoiceoverModelUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vmu.RemoveVoiceoverSpeakerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vmu *VoiceoverModelUpdate) Save(ctx context.Context) (int, error) {
	vmu.defaults()
	return withHooks(ctx, vmu.sqlSave, vmu.mutation, vmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vmu *VoiceoverModelUpdate) SaveX(ctx context.Context) int {
	affected, err := vmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vmu *VoiceoverModelUpdate) Exec(ctx context.Context) error {
	_, err := vmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmu *VoiceoverModelUpdate) ExecX(ctx context.Context) {
	if err := vmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vmu *VoiceoverModelUpdate) defaults() {
	if _, ok := vmu.mutation.UpdatedAt(); !ok {
		v := voiceovermodel.UpdateDefaultUpdatedAt()
		vmu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vmu *VoiceoverModelUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VoiceoverModelUpdate {
	vmu.modifiers = append(vmu.modifiers, modifiers...)
	return vmu
}

func (vmu *VoiceoverModelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(voiceovermodel.Table, voiceovermodel.Columns, sqlgraph.NewFieldSpec(voiceovermodel.FieldID, field.TypeUUID))
	if ps := vmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vmu.mutation.NameInWorker(); ok {
		_spec.SetField(voiceovermodel.FieldNameInWorker, field.TypeString, value)
	}
	if value, ok := vmu.mutation.IsActive(); ok {
		_spec.SetField(voiceovermodel.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := vmu.mutation.IsDefault(); ok {
		_spec.SetField(voiceovermodel.FieldIsDefault, field.TypeBool, value)
	}
	if value, ok := vmu.mutation.IsHidden(); ok {
		_spec.SetField(voiceovermodel.FieldIsHidden, field.TypeBool, value)
	}
	if value, ok := vmu.mutation.UpdatedAt(); ok {
		_spec.SetField(voiceovermodel.FieldUpdatedAt, field.TypeTime, value)
	}
	if vmu.mutation.VoiceoversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voiceovermodel.VoiceoversTable,
			Columns: []string{voiceovermodel.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceover.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vmu.mutation.RemovedVoiceoversIDs(); len(nodes) > 0 && !vmu.mutation.VoiceoversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voiceovermodel.VoiceoversTable,
			Columns: []string{voiceovermodel.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vmu.mutation.VoiceoversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voiceovermodel.VoiceoversTable,
			Columns: []string{voiceovermodel.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vmu.mutation.VoiceoverSpeakersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voiceovermodel.VoiceoverSpeakersTable,
			Columns: []string{voiceovermodel.VoiceoverSpeakersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceoverspeaker.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vmu.mutation.RemovedVoiceoverSpeakersIDs(); len(nodes) > 0 && !vmu.mutation.VoiceoverSpeakersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voiceovermodel.VoiceoverSpeakersTable,
			Columns: []string{voiceovermodel.VoiceoverSpeakersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceoverspeaker.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vmu.mutation.VoiceoverSpeakersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voiceovermodel.VoiceoverSpeakersTable,
			Columns: []string{voiceovermodel.VoiceoverSpeakersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceoverspeaker.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(vmu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, vmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{voiceovermodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vmu.mutation.done = true
	return n, nil
}

// VoiceoverModelUpdateOne is the builder for updating a single VoiceoverModel entity.
type VoiceoverModelUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *VoiceoverModelMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetNameInWorker sets the "name_in_worker" field.
func (vmuo *VoiceoverModelUpdateOne) SetNameInWorker(s string) *VoiceoverModelUpdateOne {
	vmuo.mutation.SetNameInWorker(s)
	return vmuo
}

// SetNillableNameInWorker sets the "name_in_worker" field if the given value is not nil.
func (vmuo *VoiceoverModelUpdateOne) SetNillableNameInWorker(s *string) *VoiceoverModelUpdateOne {
	if s != nil {
		vmuo.SetNameInWorker(*s)
	}
	return vmuo
}

// SetIsActive sets the "is_active" field.
func (vmuo *VoiceoverModelUpdateOne) SetIsActive(b bool) *VoiceoverModelUpdateOne {
	vmuo.mutation.SetIsActive(b)
	return vmuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (vmuo *VoiceoverModelUpdateOne) SetNillableIsActive(b *bool) *VoiceoverModelUpdateOne {
	if b != nil {
		vmuo.SetIsActive(*b)
	}
	return vmuo
}

// SetIsDefault sets the "is_default" field.
func (vmuo *VoiceoverModelUpdateOne) SetIsDefault(b bool) *VoiceoverModelUpdateOne {
	vmuo.mutation.SetIsDefault(b)
	return vmuo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (vmuo *VoiceoverModelUpdateOne) SetNillableIsDefault(b *bool) *VoiceoverModelUpdateOne {
	if b != nil {
		vmuo.SetIsDefault(*b)
	}
	return vmuo
}

// SetIsHidden sets the "is_hidden" field.
func (vmuo *VoiceoverModelUpdateOne) SetIsHidden(b bool) *VoiceoverModelUpdateOne {
	vmuo.mutation.SetIsHidden(b)
	return vmuo
}

// SetNillableIsHidden sets the "is_hidden" field if the given value is not nil.
func (vmuo *VoiceoverModelUpdateOne) SetNillableIsHidden(b *bool) *VoiceoverModelUpdateOne {
	if b != nil {
		vmuo.SetIsHidden(*b)
	}
	return vmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vmuo *VoiceoverModelUpdateOne) SetUpdatedAt(t time.Time) *VoiceoverModelUpdateOne {
	vmuo.mutation.SetUpdatedAt(t)
	return vmuo
}

// AddVoiceoverIDs adds the "voiceovers" edge to the Voiceover entity by IDs.
func (vmuo *VoiceoverModelUpdateOne) AddVoiceoverIDs(ids ...uuid.UUID) *VoiceoverModelUpdateOne {
	vmuo.mutation.AddVoiceoverIDs(ids...)
	return vmuo
}

// AddVoiceovers adds the "voiceovers" edges to the Voiceover entity.
func (vmuo *VoiceoverModelUpdateOne) AddVoiceovers(v ...*Voiceover) *VoiceoverModelUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vmuo.AddVoiceoverIDs(ids...)
}

// AddVoiceoverSpeakerIDs adds the "voiceover_speakers" edge to the VoiceoverSpeaker entity by IDs.
func (vmuo *VoiceoverModelUpdateOne) AddVoiceoverSpeakerIDs(ids ...uuid.UUID) *VoiceoverModelUpdateOne {
	vmuo.mutation.AddVoiceoverSpeakerIDs(ids...)
	return vmuo
}

// AddVoiceoverSpeakers adds the "voiceover_speakers" edges to the VoiceoverSpeaker entity.
func (vmuo *VoiceoverModelUpdateOne) AddVoiceoverSpeakers(v ...*VoiceoverSpeaker) *VoiceoverModelUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vmuo.AddVoiceoverSpeakerIDs(ids...)
}

// Mutation returns the VoiceoverModelMutation object of the builder.
func (vmuo *VoiceoverModelUpdateOne) Mutation() *VoiceoverModelMutation {
	return vmuo.mutation
}

// ClearVoiceovers clears all "voiceovers" edges to the Voiceover entity.
func (vmuo *VoiceoverModelUpdateOne) ClearVoiceovers() *VoiceoverModelUpdateOne {
	vmuo.mutation.ClearVoiceovers()
	return vmuo
}

// RemoveVoiceoverIDs removes the "voiceovers" edge to Voiceover entities by IDs.
func (vmuo *VoiceoverModelUpdateOne) RemoveVoiceoverIDs(ids ...uuid.UUID) *VoiceoverModelUpdateOne {
	vmuo.mutation.RemoveVoiceoverIDs(ids...)
	return vmuo
}

// RemoveVoiceovers removes "voiceovers" edges to Voiceover entities.
func (vmuo *VoiceoverModelUpdateOne) RemoveVoiceovers(v ...*Voiceover) *VoiceoverModelUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vmuo.RemoveVoiceoverIDs(ids...)
}

// ClearVoiceoverSpeakers clears all "voiceover_speakers" edges to the VoiceoverSpeaker entity.
func (vmuo *VoiceoverModelUpdateOne) ClearVoiceoverSpeakers() *VoiceoverModelUpdateOne {
	vmuo.mutation.ClearVoiceoverSpeakers()
	return vmuo
}

// RemoveVoiceoverSpeakerIDs removes the "voiceover_speakers" edge to VoiceoverSpeaker entities by IDs.
func (vmuo *VoiceoverModelUpdateOne) RemoveVoiceoverSpeakerIDs(ids ...uuid.UUID) *VoiceoverModelUpdateOne {
	vmuo.mutation.RemoveVoiceoverSpeakerIDs(ids...)
	return vmuo
}

// RemoveVoiceoverSpeakers removes "voiceover_speakers" edges to VoiceoverSpeaker entities.
func (vmuo *VoiceoverModelUpdateOne) RemoveVoiceoverSpeakers(v ...*VoiceoverSpeaker) *VoiceoverModelUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vmuo.RemoveVoiceoverSpeakerIDs(ids...)
}

// Where appends a list predicates to the VoiceoverModelUpdate builder.
func (vmuo *VoiceoverModelUpdateOne) Where(ps ...predicate.VoiceoverModel) *VoiceoverModelUpdateOne {
	vmuo.mutation.Where(ps...)
	return vmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vmuo *VoiceoverModelUpdateOne) Select(field string, fields ...string) *VoiceoverModelUpdateOne {
	vmuo.fields = append([]string{field}, fields...)
	return vmuo
}

// Save executes the query and returns the updated VoiceoverModel entity.
func (vmuo *VoiceoverModelUpdateOne) Save(ctx context.Context) (*VoiceoverModel, error) {
	vmuo.defaults()
	return withHooks(ctx, vmuo.sqlSave, vmuo.mutation, vmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vmuo *VoiceoverModelUpdateOne) SaveX(ctx context.Context) *VoiceoverModel {
	node, err := vmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vmuo *VoiceoverModelUpdateOne) Exec(ctx context.Context) error {
	_, err := vmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmuo *VoiceoverModelUpdateOne) ExecX(ctx context.Context) {
	if err := vmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vmuo *VoiceoverModelUpdateOne) defaults() {
	if _, ok := vmuo.mutation.UpdatedAt(); !ok {
		v := voiceovermodel.UpdateDefaultUpdatedAt()
		vmuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vmuo *VoiceoverModelUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VoiceoverModelUpdateOne {
	vmuo.modifiers = append(vmuo.modifiers, modifiers...)
	return vmuo
}

func (vmuo *VoiceoverModelUpdateOne) sqlSave(ctx context.Context) (_node *VoiceoverModel, err error) {
	_spec := sqlgraph.NewUpdateSpec(voiceovermodel.Table, voiceovermodel.Columns, sqlgraph.NewFieldSpec(voiceovermodel.FieldID, field.TypeUUID))
	id, ok := vmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VoiceoverModel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, voiceovermodel.FieldID)
		for _, f := range fields {
			if !voiceovermodel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != voiceovermodel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vmuo.mutation.NameInWorker(); ok {
		_spec.SetField(voiceovermodel.FieldNameInWorker, field.TypeString, value)
	}
	if value, ok := vmuo.mutation.IsActive(); ok {
		_spec.SetField(voiceovermodel.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := vmuo.mutation.IsDefault(); ok {
		_spec.SetField(voiceovermodel.FieldIsDefault, field.TypeBool, value)
	}
	if value, ok := vmuo.mutation.IsHidden(); ok {
		_spec.SetField(voiceovermodel.FieldIsHidden, field.TypeBool, value)
	}
	if value, ok := vmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(voiceovermodel.FieldUpdatedAt, field.TypeTime, value)
	}
	if vmuo.mutation.VoiceoversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voiceovermodel.VoiceoversTable,
			Columns: []string{voiceovermodel.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceover.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vmuo.mutation.RemovedVoiceoversIDs(); len(nodes) > 0 && !vmuo.mutation.VoiceoversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voiceovermodel.VoiceoversTable,
			Columns: []string{voiceovermodel.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vmuo.mutation.VoiceoversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voiceovermodel.VoiceoversTable,
			Columns: []string{voiceovermodel.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vmuo.mutation.VoiceoverSpeakersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voiceovermodel.VoiceoverSpeakersTable,
			Columns: []string{voiceovermodel.VoiceoverSpeakersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceoverspeaker.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vmuo.mutation.RemovedVoiceoverSpeakersIDs(); len(nodes) > 0 && !vmuo.mutation.VoiceoverSpeakersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voiceovermodel.VoiceoverSpeakersTable,
			Columns: []string{voiceovermodel.VoiceoverSpeakersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceoverspeaker.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vmuo.mutation.VoiceoverSpeakersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voiceovermodel.VoiceoverSpeakersTable,
			Columns: []string{voiceovermodel.VoiceoverSpeakersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceoverspeaker.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(vmuo.modifiers...)
	_node = &VoiceoverModel{config: vmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{voiceovermodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vmuo.mutation.done = true
	return _node, nil
}
