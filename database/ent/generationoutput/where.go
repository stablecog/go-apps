// Code generated by ent, DO NOT EDIT.

package generationoutput

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldLTE(FieldID, id))
}

// ImagePath applies equality check predicate on the "image_path" field. It's identical to ImagePathEQ.
func ImagePath(v string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldImagePath, v))
}

// UpscaledImagePath applies equality check predicate on the "upscaled_image_path" field. It's identical to UpscaledImagePathEQ.
func UpscaledImagePath(v string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldUpscaledImagePath, v))
}

// IsFavorited applies equality check predicate on the "is_favorited" field. It's identical to IsFavoritedEQ.
func IsFavorited(v bool) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldIsFavorited, v))
}

// HasEmbeddings applies equality check predicate on the "has_embeddings" field. It's identical to HasEmbeddingsEQ.
func HasEmbeddings(v bool) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldHasEmbeddings, v))
}

// HasEmbeddingsNew applies equality check predicate on the "has_embeddings_new" field. It's identical to HasEmbeddingsNewEQ.
func HasEmbeddingsNew(v bool) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldHasEmbeddingsNew, v))
}

// IsMigrated applies equality check predicate on the "is_migrated" field. It's identical to IsMigratedEQ.
func IsMigrated(v bool) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldIsMigrated, v))
}

// IsPublic applies equality check predicate on the "is_public" field. It's identical to IsPublicEQ.
func IsPublic(v bool) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldIsPublic, v))
}

// AestheticRatingScore applies equality check predicate on the "aesthetic_rating_score" field. It's identical to AestheticRatingScoreEQ.
func AestheticRatingScore(v float32) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldAestheticRatingScore, v))
}

// AestheticArtifactScore applies equality check predicate on the "aesthetic_artifact_score" field. It's identical to AestheticArtifactScoreEQ.
func AestheticArtifactScore(v float32) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldAestheticArtifactScore, v))
}

// LikeCount applies equality check predicate on the "like_count" field. It's identical to LikeCountEQ.
func LikeCount(v int) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldLikeCount, v))
}

// GenerationID applies equality check predicate on the "generation_id" field. It's identical to GenerationIDEQ.
func GenerationID(v uuid.UUID) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldGenerationID, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldDeletedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldUpdatedAt, v))
}

// ImagePathEQ applies the EQ predicate on the "image_path" field.
func ImagePathEQ(v string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldImagePath, v))
}

// ImagePathNEQ applies the NEQ predicate on the "image_path" field.
func ImagePathNEQ(v string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNEQ(FieldImagePath, v))
}

// ImagePathIn applies the In predicate on the "image_path" field.
func ImagePathIn(vs ...string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldIn(FieldImagePath, vs...))
}

// ImagePathNotIn applies the NotIn predicate on the "image_path" field.
func ImagePathNotIn(vs ...string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNotIn(FieldImagePath, vs...))
}

// ImagePathGT applies the GT predicate on the "image_path" field.
func ImagePathGT(v string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldGT(FieldImagePath, v))
}

// ImagePathGTE applies the GTE predicate on the "image_path" field.
func ImagePathGTE(v string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldGTE(FieldImagePath, v))
}

// ImagePathLT applies the LT predicate on the "image_path" field.
func ImagePathLT(v string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldLT(FieldImagePath, v))
}

// ImagePathLTE applies the LTE predicate on the "image_path" field.
func ImagePathLTE(v string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldLTE(FieldImagePath, v))
}

// ImagePathContains applies the Contains predicate on the "image_path" field.
func ImagePathContains(v string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldContains(FieldImagePath, v))
}

// ImagePathHasPrefix applies the HasPrefix predicate on the "image_path" field.
func ImagePathHasPrefix(v string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldHasPrefix(FieldImagePath, v))
}

// ImagePathHasSuffix applies the HasSuffix predicate on the "image_path" field.
func ImagePathHasSuffix(v string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldHasSuffix(FieldImagePath, v))
}

// ImagePathEqualFold applies the EqualFold predicate on the "image_path" field.
func ImagePathEqualFold(v string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEqualFold(FieldImagePath, v))
}

// ImagePathContainsFold applies the ContainsFold predicate on the "image_path" field.
func ImagePathContainsFold(v string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldContainsFold(FieldImagePath, v))
}

// UpscaledImagePathEQ applies the EQ predicate on the "upscaled_image_path" field.
func UpscaledImagePathEQ(v string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldUpscaledImagePath, v))
}

// UpscaledImagePathNEQ applies the NEQ predicate on the "upscaled_image_path" field.
func UpscaledImagePathNEQ(v string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNEQ(FieldUpscaledImagePath, v))
}

// UpscaledImagePathIn applies the In predicate on the "upscaled_image_path" field.
func UpscaledImagePathIn(vs ...string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldIn(FieldUpscaledImagePath, vs...))
}

// UpscaledImagePathNotIn applies the NotIn predicate on the "upscaled_image_path" field.
func UpscaledImagePathNotIn(vs ...string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNotIn(FieldUpscaledImagePath, vs...))
}

// UpscaledImagePathGT applies the GT predicate on the "upscaled_image_path" field.
func UpscaledImagePathGT(v string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldGT(FieldUpscaledImagePath, v))
}

// UpscaledImagePathGTE applies the GTE predicate on the "upscaled_image_path" field.
func UpscaledImagePathGTE(v string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldGTE(FieldUpscaledImagePath, v))
}

// UpscaledImagePathLT applies the LT predicate on the "upscaled_image_path" field.
func UpscaledImagePathLT(v string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldLT(FieldUpscaledImagePath, v))
}

// UpscaledImagePathLTE applies the LTE predicate on the "upscaled_image_path" field.
func UpscaledImagePathLTE(v string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldLTE(FieldUpscaledImagePath, v))
}

// UpscaledImagePathContains applies the Contains predicate on the "upscaled_image_path" field.
func UpscaledImagePathContains(v string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldContains(FieldUpscaledImagePath, v))
}

// UpscaledImagePathHasPrefix applies the HasPrefix predicate on the "upscaled_image_path" field.
func UpscaledImagePathHasPrefix(v string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldHasPrefix(FieldUpscaledImagePath, v))
}

// UpscaledImagePathHasSuffix applies the HasSuffix predicate on the "upscaled_image_path" field.
func UpscaledImagePathHasSuffix(v string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldHasSuffix(FieldUpscaledImagePath, v))
}

// UpscaledImagePathIsNil applies the IsNil predicate on the "upscaled_image_path" field.
func UpscaledImagePathIsNil() predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldIsNull(FieldUpscaledImagePath))
}

// UpscaledImagePathNotNil applies the NotNil predicate on the "upscaled_image_path" field.
func UpscaledImagePathNotNil() predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNotNull(FieldUpscaledImagePath))
}

// UpscaledImagePathEqualFold applies the EqualFold predicate on the "upscaled_image_path" field.
func UpscaledImagePathEqualFold(v string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEqualFold(FieldUpscaledImagePath, v))
}

// UpscaledImagePathContainsFold applies the ContainsFold predicate on the "upscaled_image_path" field.
func UpscaledImagePathContainsFold(v string) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldContainsFold(FieldUpscaledImagePath, v))
}

// GalleryStatusEQ applies the EQ predicate on the "gallery_status" field.
func GalleryStatusEQ(v GalleryStatus) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldGalleryStatus, v))
}

// GalleryStatusNEQ applies the NEQ predicate on the "gallery_status" field.
func GalleryStatusNEQ(v GalleryStatus) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNEQ(FieldGalleryStatus, v))
}

// GalleryStatusIn applies the In predicate on the "gallery_status" field.
func GalleryStatusIn(vs ...GalleryStatus) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldIn(FieldGalleryStatus, vs...))
}

// GalleryStatusNotIn applies the NotIn predicate on the "gallery_status" field.
func GalleryStatusNotIn(vs ...GalleryStatus) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNotIn(FieldGalleryStatus, vs...))
}

// IsFavoritedEQ applies the EQ predicate on the "is_favorited" field.
func IsFavoritedEQ(v bool) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldIsFavorited, v))
}

// IsFavoritedNEQ applies the NEQ predicate on the "is_favorited" field.
func IsFavoritedNEQ(v bool) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNEQ(FieldIsFavorited, v))
}

// HasEmbeddingsEQ applies the EQ predicate on the "has_embeddings" field.
func HasEmbeddingsEQ(v bool) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldHasEmbeddings, v))
}

// HasEmbeddingsNEQ applies the NEQ predicate on the "has_embeddings" field.
func HasEmbeddingsNEQ(v bool) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNEQ(FieldHasEmbeddings, v))
}

// HasEmbeddingsNewEQ applies the EQ predicate on the "has_embeddings_new" field.
func HasEmbeddingsNewEQ(v bool) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldHasEmbeddingsNew, v))
}

// HasEmbeddingsNewNEQ applies the NEQ predicate on the "has_embeddings_new" field.
func HasEmbeddingsNewNEQ(v bool) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNEQ(FieldHasEmbeddingsNew, v))
}

// IsMigratedEQ applies the EQ predicate on the "is_migrated" field.
func IsMigratedEQ(v bool) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldIsMigrated, v))
}

// IsMigratedNEQ applies the NEQ predicate on the "is_migrated" field.
func IsMigratedNEQ(v bool) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNEQ(FieldIsMigrated, v))
}

// IsPublicEQ applies the EQ predicate on the "is_public" field.
func IsPublicEQ(v bool) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldIsPublic, v))
}

// IsPublicNEQ applies the NEQ predicate on the "is_public" field.
func IsPublicNEQ(v bool) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNEQ(FieldIsPublic, v))
}

// AestheticRatingScoreEQ applies the EQ predicate on the "aesthetic_rating_score" field.
func AestheticRatingScoreEQ(v float32) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldAestheticRatingScore, v))
}

// AestheticRatingScoreNEQ applies the NEQ predicate on the "aesthetic_rating_score" field.
func AestheticRatingScoreNEQ(v float32) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNEQ(FieldAestheticRatingScore, v))
}

// AestheticRatingScoreIn applies the In predicate on the "aesthetic_rating_score" field.
func AestheticRatingScoreIn(vs ...float32) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldIn(FieldAestheticRatingScore, vs...))
}

// AestheticRatingScoreNotIn applies the NotIn predicate on the "aesthetic_rating_score" field.
func AestheticRatingScoreNotIn(vs ...float32) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNotIn(FieldAestheticRatingScore, vs...))
}

// AestheticRatingScoreGT applies the GT predicate on the "aesthetic_rating_score" field.
func AestheticRatingScoreGT(v float32) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldGT(FieldAestheticRatingScore, v))
}

// AestheticRatingScoreGTE applies the GTE predicate on the "aesthetic_rating_score" field.
func AestheticRatingScoreGTE(v float32) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldGTE(FieldAestheticRatingScore, v))
}

// AestheticRatingScoreLT applies the LT predicate on the "aesthetic_rating_score" field.
func AestheticRatingScoreLT(v float32) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldLT(FieldAestheticRatingScore, v))
}

// AestheticRatingScoreLTE applies the LTE predicate on the "aesthetic_rating_score" field.
func AestheticRatingScoreLTE(v float32) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldLTE(FieldAestheticRatingScore, v))
}

// AestheticArtifactScoreEQ applies the EQ predicate on the "aesthetic_artifact_score" field.
func AestheticArtifactScoreEQ(v float32) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldAestheticArtifactScore, v))
}

// AestheticArtifactScoreNEQ applies the NEQ predicate on the "aesthetic_artifact_score" field.
func AestheticArtifactScoreNEQ(v float32) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNEQ(FieldAestheticArtifactScore, v))
}

// AestheticArtifactScoreIn applies the In predicate on the "aesthetic_artifact_score" field.
func AestheticArtifactScoreIn(vs ...float32) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldIn(FieldAestheticArtifactScore, vs...))
}

// AestheticArtifactScoreNotIn applies the NotIn predicate on the "aesthetic_artifact_score" field.
func AestheticArtifactScoreNotIn(vs ...float32) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNotIn(FieldAestheticArtifactScore, vs...))
}

// AestheticArtifactScoreGT applies the GT predicate on the "aesthetic_artifact_score" field.
func AestheticArtifactScoreGT(v float32) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldGT(FieldAestheticArtifactScore, v))
}

// AestheticArtifactScoreGTE applies the GTE predicate on the "aesthetic_artifact_score" field.
func AestheticArtifactScoreGTE(v float32) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldGTE(FieldAestheticArtifactScore, v))
}

// AestheticArtifactScoreLT applies the LT predicate on the "aesthetic_artifact_score" field.
func AestheticArtifactScoreLT(v float32) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldLT(FieldAestheticArtifactScore, v))
}

// AestheticArtifactScoreLTE applies the LTE predicate on the "aesthetic_artifact_score" field.
func AestheticArtifactScoreLTE(v float32) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldLTE(FieldAestheticArtifactScore, v))
}

// LikeCountEQ applies the EQ predicate on the "like_count" field.
func LikeCountEQ(v int) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldLikeCount, v))
}

// LikeCountNEQ applies the NEQ predicate on the "like_count" field.
func LikeCountNEQ(v int) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNEQ(FieldLikeCount, v))
}

// LikeCountIn applies the In predicate on the "like_count" field.
func LikeCountIn(vs ...int) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldIn(FieldLikeCount, vs...))
}

// LikeCountNotIn applies the NotIn predicate on the "like_count" field.
func LikeCountNotIn(vs ...int) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNotIn(FieldLikeCount, vs...))
}

// LikeCountGT applies the GT predicate on the "like_count" field.
func LikeCountGT(v int) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldGT(FieldLikeCount, v))
}

// LikeCountGTE applies the GTE predicate on the "like_count" field.
func LikeCountGTE(v int) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldGTE(FieldLikeCount, v))
}

// LikeCountLT applies the LT predicate on the "like_count" field.
func LikeCountLT(v int) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldLT(FieldLikeCount, v))
}

// LikeCountLTE applies the LTE predicate on the "like_count" field.
func LikeCountLTE(v int) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldLTE(FieldLikeCount, v))
}

// GenerationIDEQ applies the EQ predicate on the "generation_id" field.
func GenerationIDEQ(v uuid.UUID) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldGenerationID, v))
}

// GenerationIDNEQ applies the NEQ predicate on the "generation_id" field.
func GenerationIDNEQ(v uuid.UUID) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNEQ(FieldGenerationID, v))
}

// GenerationIDIn applies the In predicate on the "generation_id" field.
func GenerationIDIn(vs ...uuid.UUID) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldIn(FieldGenerationID, vs...))
}

// GenerationIDNotIn applies the NotIn predicate on the "generation_id" field.
func GenerationIDNotIn(vs ...uuid.UUID) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNotIn(FieldGenerationID, vs...))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNotNull(FieldDeletedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasGenerations applies the HasEdge predicate on the "generations" edge.
func HasGenerations() predicate.GenerationOutput {
	return predicate.GenerationOutput(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GenerationsTable, GenerationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGenerationsWith applies the HasEdge predicate on the "generations" edge with a given conditions (other predicates).
func HasGenerationsWith(preds ...predicate.Generation) predicate.GenerationOutput {
	return predicate.GenerationOutput(func(s *sql.Selector) {
		step := newGenerationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUpscaleOutputs applies the HasEdge predicate on the "upscale_outputs" edge.
func HasUpscaleOutputs() predicate.GenerationOutput {
	return predicate.GenerationOutput(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, UpscaleOutputsTable, UpscaleOutputsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUpscaleOutputsWith applies the HasEdge predicate on the "upscale_outputs" edge with a given conditions (other predicates).
func HasUpscaleOutputsWith(preds ...predicate.UpscaleOutput) predicate.GenerationOutput {
	return predicate.GenerationOutput(func(s *sql.Selector) {
		step := newUpscaleOutputsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGenerationOutputLikes applies the HasEdge predicate on the "generation_output_likes" edge.
func HasGenerationOutputLikes() predicate.GenerationOutput {
	return predicate.GenerationOutput(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GenerationOutputLikesTable, GenerationOutputLikesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGenerationOutputLikesWith applies the HasEdge predicate on the "generation_output_likes" edge with a given conditions (other predicates).
func HasGenerationOutputLikesWith(preds ...predicate.GenerationOutputLike) predicate.GenerationOutput {
	return predicate.GenerationOutput(func(s *sql.Selector) {
		step := newGenerationOutputLikesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GenerationOutput) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GenerationOutput) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GenerationOutput) predicate.GenerationOutput {
	return predicate.GenerationOutput(sql.NotPredicates(p))
}
