// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/generation"
	"github.com/stablecog/sc-go/database/ent/negativeprompt"
	"github.com/stablecog/sc-go/database/ent/predicate"
)

// NegativePromptUpdate is the builder for updating NegativePrompt entities.
type NegativePromptUpdate struct {
	config
	hooks     []Hook
	mutation  *NegativePromptMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the NegativePromptUpdate builder.
func (npu *NegativePromptUpdate) Where(ps ...predicate.NegativePrompt) *NegativePromptUpdate {
	npu.mutation.Where(ps...)
	return npu
}

// SetText sets the "text" field.
func (npu *NegativePromptUpdate) SetText(s string) *NegativePromptUpdate {
	npu.mutation.SetText(s)
	return npu
}

// SetNillableText sets the "text" field if the given value is not nil.
func (npu *NegativePromptUpdate) SetNillableText(s *string) *NegativePromptUpdate {
	if s != nil {
		npu.SetText(*s)
	}
	return npu
}

// SetTranslatedText sets the "translated_text" field.
func (npu *NegativePromptUpdate) SetTranslatedText(s string) *NegativePromptUpdate {
	npu.mutation.SetTranslatedText(s)
	return npu
}

// SetNillableTranslatedText sets the "translated_text" field if the given value is not nil.
func (npu *NegativePromptUpdate) SetNillableTranslatedText(s *string) *NegativePromptUpdate {
	if s != nil {
		npu.SetTranslatedText(*s)
	}
	return npu
}

// ClearTranslatedText clears the value of the "translated_text" field.
func (npu *NegativePromptUpdate) ClearTranslatedText() *NegativePromptUpdate {
	npu.mutation.ClearTranslatedText()
	return npu
}

// SetRanTranslation sets the "ran_translation" field.
func (npu *NegativePromptUpdate) SetRanTranslation(b bool) *NegativePromptUpdate {
	npu.mutation.SetRanTranslation(b)
	return npu
}

// SetNillableRanTranslation sets the "ran_translation" field if the given value is not nil.
func (npu *NegativePromptUpdate) SetNillableRanTranslation(b *bool) *NegativePromptUpdate {
	if b != nil {
		npu.SetRanTranslation(*b)
	}
	return npu
}

// SetUpdatedAt sets the "updated_at" field.
func (npu *NegativePromptUpdate) SetUpdatedAt(t time.Time) *NegativePromptUpdate {
	npu.mutation.SetUpdatedAt(t)
	return npu
}

// AddGenerationIDs adds the "generations" edge to the Generation entity by IDs.
func (npu *NegativePromptUpdate) AddGenerationIDs(ids ...uuid.UUID) *NegativePromptUpdate {
	npu.mutation.AddGenerationIDs(ids...)
	return npu
}

// AddGenerations adds the "generations" edges to the Generation entity.
func (npu *NegativePromptUpdate) AddGenerations(g ...*Generation) *NegativePromptUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return npu.AddGenerationIDs(ids...)
}

// Mutation returns the NegativePromptMutation object of the builder.
func (npu *NegativePromptUpdate) Mutation() *NegativePromptMutation {
	return npu.mutation
}

// ClearGenerations clears all "generations" edges to the Generation entity.
func (npu *NegativePromptUpdate) ClearGenerations() *NegativePromptUpdate {
	npu.mutation.ClearGenerations()
	return npu
}

// RemoveGenerationIDs removes the "generations" edge to Generation entities by IDs.
func (npu *NegativePromptUpdate) RemoveGenerationIDs(ids ...uuid.UUID) *NegativePromptUpdate {
	npu.mutation.RemoveGenerationIDs(ids...)
	return npu
}

// RemoveGenerations removes "generations" edges to Generation entities.
func (npu *NegativePromptUpdate) RemoveGenerations(g ...*Generation) *NegativePromptUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return npu.RemoveGenerationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (npu *NegativePromptUpdate) Save(ctx context.Context) (int, error) {
	npu.defaults()
	return withHooks(ctx, npu.sqlSave, npu.mutation, npu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (npu *NegativePromptUpdate) SaveX(ctx context.Context) int {
	affected, err := npu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (npu *NegativePromptUpdate) Exec(ctx context.Context) error {
	_, err := npu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (npu *NegativePromptUpdate) ExecX(ctx context.Context) {
	if err := npu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (npu *NegativePromptUpdate) defaults() {
	if _, ok := npu.mutation.UpdatedAt(); !ok {
		v := negativeprompt.UpdateDefaultUpdatedAt()
		npu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (npu *NegativePromptUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NegativePromptUpdate {
	npu.modifiers = append(npu.modifiers, modifiers...)
	return npu
}

func (npu *NegativePromptUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(negativeprompt.Table, negativeprompt.Columns, sqlgraph.NewFieldSpec(negativeprompt.FieldID, field.TypeUUID))
	if ps := npu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := npu.mutation.Text(); ok {
		_spec.SetField(negativeprompt.FieldText, field.TypeString, value)
	}
	if value, ok := npu.mutation.TranslatedText(); ok {
		_spec.SetField(negativeprompt.FieldTranslatedText, field.TypeString, value)
	}
	if npu.mutation.TranslatedTextCleared() {
		_spec.ClearField(negativeprompt.FieldTranslatedText, field.TypeString)
	}
	if value, ok := npu.mutation.RanTranslation(); ok {
		_spec.SetField(negativeprompt.FieldRanTranslation, field.TypeBool, value)
	}
	if value, ok := npu.mutation.UpdatedAt(); ok {
		_spec.SetField(negativeprompt.FieldUpdatedAt, field.TypeTime, value)
	}
	if npu.mutation.GenerationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   negativeprompt.GenerationsTable,
			Columns: []string{negativeprompt.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := npu.mutation.RemovedGenerationsIDs(); len(nodes) > 0 && !npu.mutation.GenerationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   negativeprompt.GenerationsTable,
			Columns: []string{negativeprompt.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := npu.mutation.GenerationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   negativeprompt.GenerationsTable,
			Columns: []string{negativeprompt.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(npu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, npu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{negativeprompt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	npu.mutation.done = true
	return n, nil
}

// NegativePromptUpdateOne is the builder for updating a single NegativePrompt entity.
type NegativePromptUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *NegativePromptMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetText sets the "text" field.
func (npuo *NegativePromptUpdateOne) SetText(s string) *NegativePromptUpdateOne {
	npuo.mutation.SetText(s)
	return npuo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (npuo *NegativePromptUpdateOne) SetNillableText(s *string) *NegativePromptUpdateOne {
	if s != nil {
		npuo.SetText(*s)
	}
	return npuo
}

// SetTranslatedText sets the "translated_text" field.
func (npuo *NegativePromptUpdateOne) SetTranslatedText(s string) *NegativePromptUpdateOne {
	npuo.mutation.SetTranslatedText(s)
	return npuo
}

// SetNillableTranslatedText sets the "translated_text" field if the given value is not nil.
func (npuo *NegativePromptUpdateOne) SetNillableTranslatedText(s *string) *NegativePromptUpdateOne {
	if s != nil {
		npuo.SetTranslatedText(*s)
	}
	return npuo
}

// ClearTranslatedText clears the value of the "translated_text" field.
func (npuo *NegativePromptUpdateOne) ClearTranslatedText() *NegativePromptUpdateOne {
	npuo.mutation.ClearTranslatedText()
	return npuo
}

// SetRanTranslation sets the "ran_translation" field.
func (npuo *NegativePromptUpdateOne) SetRanTranslation(b bool) *NegativePromptUpdateOne {
	npuo.mutation.SetRanTranslation(b)
	return npuo
}

// SetNillableRanTranslation sets the "ran_translation" field if the given value is not nil.
func (npuo *NegativePromptUpdateOne) SetNillableRanTranslation(b *bool) *NegativePromptUpdateOne {
	if b != nil {
		npuo.SetRanTranslation(*b)
	}
	return npuo
}

// SetUpdatedAt sets the "updated_at" field.
func (npuo *NegativePromptUpdateOne) SetUpdatedAt(t time.Time) *NegativePromptUpdateOne {
	npuo.mutation.SetUpdatedAt(t)
	return npuo
}

// AddGenerationIDs adds the "generations" edge to the Generation entity by IDs.
func (npuo *NegativePromptUpdateOne) AddGenerationIDs(ids ...uuid.UUID) *NegativePromptUpdateOne {
	npuo.mutation.AddGenerationIDs(ids...)
	return npuo
}

// AddGenerations adds the "generations" edges to the Generation entity.
func (npuo *NegativePromptUpdateOne) AddGenerations(g ...*Generation) *NegativePromptUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return npuo.AddGenerationIDs(ids...)
}

// Mutation returns the NegativePromptMutation object of the builder.
func (npuo *NegativePromptUpdateOne) Mutation() *NegativePromptMutation {
	return npuo.mutation
}

// ClearGenerations clears all "generations" edges to the Generation entity.
func (npuo *NegativePromptUpdateOne) ClearGenerations() *NegativePromptUpdateOne {
	npuo.mutation.ClearGenerations()
	return npuo
}

// RemoveGenerationIDs removes the "generations" edge to Generation entities by IDs.
func (npuo *NegativePromptUpdateOne) RemoveGenerationIDs(ids ...uuid.UUID) *NegativePromptUpdateOne {
	npuo.mutation.RemoveGenerationIDs(ids...)
	return npuo
}

// RemoveGenerations removes "generations" edges to Generation entities.
func (npuo *NegativePromptUpdateOne) RemoveGenerations(g ...*Generation) *NegativePromptUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return npuo.RemoveGenerationIDs(ids...)
}

// Where appends a list predicates to the NegativePromptUpdate builder.
func (npuo *NegativePromptUpdateOne) Where(ps ...predicate.NegativePrompt) *NegativePromptUpdateOne {
	npuo.mutation.Where(ps...)
	return npuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (npuo *NegativePromptUpdateOne) Select(field string, fields ...string) *NegativePromptUpdateOne {
	npuo.fields = append([]string{field}, fields...)
	return npuo
}

// Save executes the query and returns the updated NegativePrompt entity.
func (npuo *NegativePromptUpdateOne) Save(ctx context.Context) (*NegativePrompt, error) {
	npuo.defaults()
	return withHooks(ctx, npuo.sqlSave, npuo.mutation, npuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (npuo *NegativePromptUpdateOne) SaveX(ctx context.Context) *NegativePrompt {
	node, err := npuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (npuo *NegativePromptUpdateOne) Exec(ctx context.Context) error {
	_, err := npuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (npuo *NegativePromptUpdateOne) ExecX(ctx context.Context) {
	if err := npuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (npuo *NegativePromptUpdateOne) defaults() {
	if _, ok := npuo.mutation.UpdatedAt(); !ok {
		v := negativeprompt.UpdateDefaultUpdatedAt()
		npuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (npuo *NegativePromptUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NegativePromptUpdateOne {
	npuo.modifiers = append(npuo.modifiers, modifiers...)
	return npuo
}

func (npuo *NegativePromptUpdateOne) sqlSave(ctx context.Context) (_node *NegativePrompt, err error) {
	_spec := sqlgraph.NewUpdateSpec(negativeprompt.Table, negativeprompt.Columns, sqlgraph.NewFieldSpec(negativeprompt.FieldID, field.TypeUUID))
	id, ok := npuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NegativePrompt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := npuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, negativeprompt.FieldID)
		for _, f := range fields {
			if !negativeprompt.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != negativeprompt.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := npuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := npuo.mutation.Text(); ok {
		_spec.SetField(negativeprompt.FieldText, field.TypeString, value)
	}
	if value, ok := npuo.mutation.TranslatedText(); ok {
		_spec.SetField(negativeprompt.FieldTranslatedText, field.TypeString, value)
	}
	if npuo.mutation.TranslatedTextCleared() {
		_spec.ClearField(negativeprompt.FieldTranslatedText, field.TypeString)
	}
	if value, ok := npuo.mutation.RanTranslation(); ok {
		_spec.SetField(negativeprompt.FieldRanTranslation, field.TypeBool, value)
	}
	if value, ok := npuo.mutation.UpdatedAt(); ok {
		_spec.SetField(negativeprompt.FieldUpdatedAt, field.TypeTime, value)
	}
	if npuo.mutation.GenerationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   negativeprompt.GenerationsTable,
			Columns: []string{negativeprompt.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := npuo.mutation.RemovedGenerationsIDs(); len(nodes) > 0 && !npuo.mutation.GenerationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   negativeprompt.GenerationsTable,
			Columns: []string{negativeprompt.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := npuo.mutation.GenerationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   negativeprompt.GenerationsTable,
			Columns: []string{negativeprompt.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(npuo.modifiers...)
	_node = &NegativePrompt{config: npuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, npuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{negativeprompt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	npuo.mutation.done = true
	return _node, nil
}
