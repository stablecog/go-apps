// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/generationoutput"
	"github.com/stablecog/sc-go/database/ent/generationoutputlike"
	"github.com/stablecog/sc-go/database/ent/predicate"
	"github.com/stablecog/sc-go/database/ent/user"
)

// GenerationOutputLikeUpdate is the builder for updating GenerationOutputLike entities.
type GenerationOutputLikeUpdate struct {
	config
	hooks     []Hook
	mutation  *GenerationOutputLikeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GenerationOutputLikeUpdate builder.
func (golu *GenerationOutputLikeUpdate) Where(ps ...predicate.GenerationOutputLike) *GenerationOutputLikeUpdate {
	golu.mutation.Where(ps...)
	return golu
}

// SetOutputID sets the "output_id" field.
func (golu *GenerationOutputLikeUpdate) SetOutputID(u uuid.UUID) *GenerationOutputLikeUpdate {
	golu.mutation.SetOutputID(u)
	return golu
}

// SetNillableOutputID sets the "output_id" field if the given value is not nil.
func (golu *GenerationOutputLikeUpdate) SetNillableOutputID(u *uuid.UUID) *GenerationOutputLikeUpdate {
	if u != nil {
		golu.SetOutputID(*u)
	}
	return golu
}

// SetLikedByUserID sets the "liked_by_user_id" field.
func (golu *GenerationOutputLikeUpdate) SetLikedByUserID(u uuid.UUID) *GenerationOutputLikeUpdate {
	golu.mutation.SetLikedByUserID(u)
	return golu
}

// SetNillableLikedByUserID sets the "liked_by_user_id" field if the given value is not nil.
func (golu *GenerationOutputLikeUpdate) SetNillableLikedByUserID(u *uuid.UUID) *GenerationOutputLikeUpdate {
	if u != nil {
		golu.SetLikedByUserID(*u)
	}
	return golu
}

// SetGenerationOutputsID sets the "generation_outputs" edge to the GenerationOutput entity by ID.
func (golu *GenerationOutputLikeUpdate) SetGenerationOutputsID(id uuid.UUID) *GenerationOutputLikeUpdate {
	golu.mutation.SetGenerationOutputsID(id)
	return golu
}

// SetGenerationOutputs sets the "generation_outputs" edge to the GenerationOutput entity.
func (golu *GenerationOutputLikeUpdate) SetGenerationOutputs(g *GenerationOutput) *GenerationOutputLikeUpdate {
	return golu.SetGenerationOutputsID(g.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (golu *GenerationOutputLikeUpdate) SetUsersID(id uuid.UUID) *GenerationOutputLikeUpdate {
	golu.mutation.SetUsersID(id)
	return golu
}

// SetUsers sets the "users" edge to the User entity.
func (golu *GenerationOutputLikeUpdate) SetUsers(u *User) *GenerationOutputLikeUpdate {
	return golu.SetUsersID(u.ID)
}

// Mutation returns the GenerationOutputLikeMutation object of the builder.
func (golu *GenerationOutputLikeUpdate) Mutation() *GenerationOutputLikeMutation {
	return golu.mutation
}

// ClearGenerationOutputs clears the "generation_outputs" edge to the GenerationOutput entity.
func (golu *GenerationOutputLikeUpdate) ClearGenerationOutputs() *GenerationOutputLikeUpdate {
	golu.mutation.ClearGenerationOutputs()
	return golu
}

// ClearUsers clears the "users" edge to the User entity.
func (golu *GenerationOutputLikeUpdate) ClearUsers() *GenerationOutputLikeUpdate {
	golu.mutation.ClearUsers()
	return golu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (golu *GenerationOutputLikeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, golu.sqlSave, golu.mutation, golu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (golu *GenerationOutputLikeUpdate) SaveX(ctx context.Context) int {
	affected, err := golu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (golu *GenerationOutputLikeUpdate) Exec(ctx context.Context) error {
	_, err := golu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (golu *GenerationOutputLikeUpdate) ExecX(ctx context.Context) {
	if err := golu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (golu *GenerationOutputLikeUpdate) check() error {
	if golu.mutation.GenerationOutputsCleared() && len(golu.mutation.GenerationOutputsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "GenerationOutputLike.generation_outputs"`)
	}
	if golu.mutation.UsersCleared() && len(golu.mutation.UsersIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "GenerationOutputLike.users"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (golu *GenerationOutputLikeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GenerationOutputLikeUpdate {
	golu.modifiers = append(golu.modifiers, modifiers...)
	return golu
}

func (golu *GenerationOutputLikeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := golu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(generationoutputlike.Table, generationoutputlike.Columns, sqlgraph.NewFieldSpec(generationoutputlike.FieldID, field.TypeUUID))
	if ps := golu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if golu.mutation.GenerationOutputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generationoutputlike.GenerationOutputsTable,
			Columns: []string{generationoutputlike.GenerationOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generationoutput.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := golu.mutation.GenerationOutputsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generationoutputlike.GenerationOutputsTable,
			Columns: []string{generationoutputlike.GenerationOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generationoutput.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if golu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generationoutputlike.UsersTable,
			Columns: []string{generationoutputlike.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := golu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generationoutputlike.UsersTable,
			Columns: []string{generationoutputlike.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(golu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, golu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{generationoutputlike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	golu.mutation.done = true
	return n, nil
}

// GenerationOutputLikeUpdateOne is the builder for updating a single GenerationOutputLike entity.
type GenerationOutputLikeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GenerationOutputLikeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetOutputID sets the "output_id" field.
func (goluo *GenerationOutputLikeUpdateOne) SetOutputID(u uuid.UUID) *GenerationOutputLikeUpdateOne {
	goluo.mutation.SetOutputID(u)
	return goluo
}

// SetNillableOutputID sets the "output_id" field if the given value is not nil.
func (goluo *GenerationOutputLikeUpdateOne) SetNillableOutputID(u *uuid.UUID) *GenerationOutputLikeUpdateOne {
	if u != nil {
		goluo.SetOutputID(*u)
	}
	return goluo
}

// SetLikedByUserID sets the "liked_by_user_id" field.
func (goluo *GenerationOutputLikeUpdateOne) SetLikedByUserID(u uuid.UUID) *GenerationOutputLikeUpdateOne {
	goluo.mutation.SetLikedByUserID(u)
	return goluo
}

// SetNillableLikedByUserID sets the "liked_by_user_id" field if the given value is not nil.
func (goluo *GenerationOutputLikeUpdateOne) SetNillableLikedByUserID(u *uuid.UUID) *GenerationOutputLikeUpdateOne {
	if u != nil {
		goluo.SetLikedByUserID(*u)
	}
	return goluo
}

// SetGenerationOutputsID sets the "generation_outputs" edge to the GenerationOutput entity by ID.
func (goluo *GenerationOutputLikeUpdateOne) SetGenerationOutputsID(id uuid.UUID) *GenerationOutputLikeUpdateOne {
	goluo.mutation.SetGenerationOutputsID(id)
	return goluo
}

// SetGenerationOutputs sets the "generation_outputs" edge to the GenerationOutput entity.
func (goluo *GenerationOutputLikeUpdateOne) SetGenerationOutputs(g *GenerationOutput) *GenerationOutputLikeUpdateOne {
	return goluo.SetGenerationOutputsID(g.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (goluo *GenerationOutputLikeUpdateOne) SetUsersID(id uuid.UUID) *GenerationOutputLikeUpdateOne {
	goluo.mutation.SetUsersID(id)
	return goluo
}

// SetUsers sets the "users" edge to the User entity.
func (goluo *GenerationOutputLikeUpdateOne) SetUsers(u *User) *GenerationOutputLikeUpdateOne {
	return goluo.SetUsersID(u.ID)
}

// Mutation returns the GenerationOutputLikeMutation object of the builder.
func (goluo *GenerationOutputLikeUpdateOne) Mutation() *GenerationOutputLikeMutation {
	return goluo.mutation
}

// ClearGenerationOutputs clears the "generation_outputs" edge to the GenerationOutput entity.
func (goluo *GenerationOutputLikeUpdateOne) ClearGenerationOutputs() *GenerationOutputLikeUpdateOne {
	goluo.mutation.ClearGenerationOutputs()
	return goluo
}

// ClearUsers clears the "users" edge to the User entity.
func (goluo *GenerationOutputLikeUpdateOne) ClearUsers() *GenerationOutputLikeUpdateOne {
	goluo.mutation.ClearUsers()
	return goluo
}

// Where appends a list predicates to the GenerationOutputLikeUpdate builder.
func (goluo *GenerationOutputLikeUpdateOne) Where(ps ...predicate.GenerationOutputLike) *GenerationOutputLikeUpdateOne {
	goluo.mutation.Where(ps...)
	return goluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (goluo *GenerationOutputLikeUpdateOne) Select(field string, fields ...string) *GenerationOutputLikeUpdateOne {
	goluo.fields = append([]string{field}, fields...)
	return goluo
}

// Save executes the query and returns the updated GenerationOutputLike entity.
func (goluo *GenerationOutputLikeUpdateOne) Save(ctx context.Context) (*GenerationOutputLike, error) {
	return withHooks(ctx, goluo.sqlSave, goluo.mutation, goluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (goluo *GenerationOutputLikeUpdateOne) SaveX(ctx context.Context) *GenerationOutputLike {
	node, err := goluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (goluo *GenerationOutputLikeUpdateOne) Exec(ctx context.Context) error {
	_, err := goluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (goluo *GenerationOutputLikeUpdateOne) ExecX(ctx context.Context) {
	if err := goluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (goluo *GenerationOutputLikeUpdateOne) check() error {
	if goluo.mutation.GenerationOutputsCleared() && len(goluo.mutation.GenerationOutputsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "GenerationOutputLike.generation_outputs"`)
	}
	if goluo.mutation.UsersCleared() && len(goluo.mutation.UsersIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "GenerationOutputLike.users"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (goluo *GenerationOutputLikeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GenerationOutputLikeUpdateOne {
	goluo.modifiers = append(goluo.modifiers, modifiers...)
	return goluo
}

func (goluo *GenerationOutputLikeUpdateOne) sqlSave(ctx context.Context) (_node *GenerationOutputLike, err error) {
	if err := goluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(generationoutputlike.Table, generationoutputlike.Columns, sqlgraph.NewFieldSpec(generationoutputlike.FieldID, field.TypeUUID))
	id, ok := goluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GenerationOutputLike.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := goluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, generationoutputlike.FieldID)
		for _, f := range fields {
			if !generationoutputlike.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != generationoutputlike.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := goluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if goluo.mutation.GenerationOutputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generationoutputlike.GenerationOutputsTable,
			Columns: []string{generationoutputlike.GenerationOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generationoutput.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := goluo.mutation.GenerationOutputsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generationoutputlike.GenerationOutputsTable,
			Columns: []string{generationoutputlike.GenerationOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generationoutput.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if goluo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generationoutputlike.UsersTable,
			Columns: []string{generationoutputlike.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := goluo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generationoutputlike.UsersTable,
			Columns: []string{generationoutputlike.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(goluo.modifiers...)
	_node = &GenerationOutputLike{config: goluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, goluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{generationoutputlike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	goluo.mutation.done = true
	return _node, nil
}
