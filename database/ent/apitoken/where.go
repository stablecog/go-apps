// Code generated by ent, DO NOT EDIT.

package apitoken

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLTE(FieldID, id))
}

// HashedToken applies equality check predicate on the "hashed_token" field. It's identical to HashedTokenEQ.
func HashedToken(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldHashedToken, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldName, v))
}

// ShortString applies equality check predicate on the "short_string" field. It's identical to ShortStringEQ.
func ShortString(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldShortString, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldIsActive, v))
}

// Uses applies equality check predicate on the "uses" field. It's identical to UsesEQ.
func Uses(v int) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldUses, v))
}

// CreditsSpent applies equality check predicate on the "credits_spent" field. It's identical to CreditsSpentEQ.
func CreditsSpent(v int) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldCreditsSpent, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldUserID, v))
}

// AuthClientID applies equality check predicate on the "auth_client_id" field. It's identical to AuthClientIDEQ.
func AuthClientID(v uuid.UUID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldAuthClientID, v))
}

// LastUsedAt applies equality check predicate on the "last_used_at" field. It's identical to LastUsedAtEQ.
func LastUsedAt(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldLastUsedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldUpdatedAt, v))
}

// HashedTokenEQ applies the EQ predicate on the "hashed_token" field.
func HashedTokenEQ(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldHashedToken, v))
}

// HashedTokenNEQ applies the NEQ predicate on the "hashed_token" field.
func HashedTokenNEQ(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNEQ(FieldHashedToken, v))
}

// HashedTokenIn applies the In predicate on the "hashed_token" field.
func HashedTokenIn(vs ...string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldIn(FieldHashedToken, vs...))
}

// HashedTokenNotIn applies the NotIn predicate on the "hashed_token" field.
func HashedTokenNotIn(vs ...string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNotIn(FieldHashedToken, vs...))
}

// HashedTokenGT applies the GT predicate on the "hashed_token" field.
func HashedTokenGT(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGT(FieldHashedToken, v))
}

// HashedTokenGTE applies the GTE predicate on the "hashed_token" field.
func HashedTokenGTE(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGTE(FieldHashedToken, v))
}

// HashedTokenLT applies the LT predicate on the "hashed_token" field.
func HashedTokenLT(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLT(FieldHashedToken, v))
}

// HashedTokenLTE applies the LTE predicate on the "hashed_token" field.
func HashedTokenLTE(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLTE(FieldHashedToken, v))
}

// HashedTokenContains applies the Contains predicate on the "hashed_token" field.
func HashedTokenContains(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldContains(FieldHashedToken, v))
}

// HashedTokenHasPrefix applies the HasPrefix predicate on the "hashed_token" field.
func HashedTokenHasPrefix(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldHasPrefix(FieldHashedToken, v))
}

// HashedTokenHasSuffix applies the HasSuffix predicate on the "hashed_token" field.
func HashedTokenHasSuffix(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldHasSuffix(FieldHashedToken, v))
}

// HashedTokenEqualFold applies the EqualFold predicate on the "hashed_token" field.
func HashedTokenEqualFold(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEqualFold(FieldHashedToken, v))
}

// HashedTokenContainsFold applies the ContainsFold predicate on the "hashed_token" field.
func HashedTokenContainsFold(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldContainsFold(FieldHashedToken, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldContainsFold(FieldName, v))
}

// ShortStringEQ applies the EQ predicate on the "short_string" field.
func ShortStringEQ(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldShortString, v))
}

// ShortStringNEQ applies the NEQ predicate on the "short_string" field.
func ShortStringNEQ(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNEQ(FieldShortString, v))
}

// ShortStringIn applies the In predicate on the "short_string" field.
func ShortStringIn(vs ...string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldIn(FieldShortString, vs...))
}

// ShortStringNotIn applies the NotIn predicate on the "short_string" field.
func ShortStringNotIn(vs ...string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNotIn(FieldShortString, vs...))
}

// ShortStringGT applies the GT predicate on the "short_string" field.
func ShortStringGT(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGT(FieldShortString, v))
}

// ShortStringGTE applies the GTE predicate on the "short_string" field.
func ShortStringGTE(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGTE(FieldShortString, v))
}

// ShortStringLT applies the LT predicate on the "short_string" field.
func ShortStringLT(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLT(FieldShortString, v))
}

// ShortStringLTE applies the LTE predicate on the "short_string" field.
func ShortStringLTE(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLTE(FieldShortString, v))
}

// ShortStringContains applies the Contains predicate on the "short_string" field.
func ShortStringContains(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldContains(FieldShortString, v))
}

// ShortStringHasPrefix applies the HasPrefix predicate on the "short_string" field.
func ShortStringHasPrefix(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldHasPrefix(FieldShortString, v))
}

// ShortStringHasSuffix applies the HasSuffix predicate on the "short_string" field.
func ShortStringHasSuffix(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldHasSuffix(FieldShortString, v))
}

// ShortStringEqualFold applies the EqualFold predicate on the "short_string" field.
func ShortStringEqualFold(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEqualFold(FieldShortString, v))
}

// ShortStringContainsFold applies the ContainsFold predicate on the "short_string" field.
func ShortStringContainsFold(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldContainsFold(FieldShortString, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNEQ(FieldIsActive, v))
}

// UsesEQ applies the EQ predicate on the "uses" field.
func UsesEQ(v int) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldUses, v))
}

// UsesNEQ applies the NEQ predicate on the "uses" field.
func UsesNEQ(v int) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNEQ(FieldUses, v))
}

// UsesIn applies the In predicate on the "uses" field.
func UsesIn(vs ...int) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldIn(FieldUses, vs...))
}

// UsesNotIn applies the NotIn predicate on the "uses" field.
func UsesNotIn(vs ...int) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNotIn(FieldUses, vs...))
}

// UsesGT applies the GT predicate on the "uses" field.
func UsesGT(v int) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGT(FieldUses, v))
}

// UsesGTE applies the GTE predicate on the "uses" field.
func UsesGTE(v int) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGTE(FieldUses, v))
}

// UsesLT applies the LT predicate on the "uses" field.
func UsesLT(v int) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLT(FieldUses, v))
}

// UsesLTE applies the LTE predicate on the "uses" field.
func UsesLTE(v int) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLTE(FieldUses, v))
}

// CreditsSpentEQ applies the EQ predicate on the "credits_spent" field.
func CreditsSpentEQ(v int) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldCreditsSpent, v))
}

// CreditsSpentNEQ applies the NEQ predicate on the "credits_spent" field.
func CreditsSpentNEQ(v int) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNEQ(FieldCreditsSpent, v))
}

// CreditsSpentIn applies the In predicate on the "credits_spent" field.
func CreditsSpentIn(vs ...int) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldIn(FieldCreditsSpent, vs...))
}

// CreditsSpentNotIn applies the NotIn predicate on the "credits_spent" field.
func CreditsSpentNotIn(vs ...int) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNotIn(FieldCreditsSpent, vs...))
}

// CreditsSpentGT applies the GT predicate on the "credits_spent" field.
func CreditsSpentGT(v int) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGT(FieldCreditsSpent, v))
}

// CreditsSpentGTE applies the GTE predicate on the "credits_spent" field.
func CreditsSpentGTE(v int) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGTE(FieldCreditsSpent, v))
}

// CreditsSpentLT applies the LT predicate on the "credits_spent" field.
func CreditsSpentLT(v int) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLT(FieldCreditsSpent, v))
}

// CreditsSpentLTE applies the LTE predicate on the "credits_spent" field.
func CreditsSpentLTE(v int) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLTE(FieldCreditsSpent, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNotIn(FieldUserID, vs...))
}

// AuthClientIDEQ applies the EQ predicate on the "auth_client_id" field.
func AuthClientIDEQ(v uuid.UUID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldAuthClientID, v))
}

// AuthClientIDNEQ applies the NEQ predicate on the "auth_client_id" field.
func AuthClientIDNEQ(v uuid.UUID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNEQ(FieldAuthClientID, v))
}

// AuthClientIDIn applies the In predicate on the "auth_client_id" field.
func AuthClientIDIn(vs ...uuid.UUID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldIn(FieldAuthClientID, vs...))
}

// AuthClientIDNotIn applies the NotIn predicate on the "auth_client_id" field.
func AuthClientIDNotIn(vs ...uuid.UUID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNotIn(FieldAuthClientID, vs...))
}

// AuthClientIDIsNil applies the IsNil predicate on the "auth_client_id" field.
func AuthClientIDIsNil() predicate.ApiToken {
	return predicate.ApiToken(sql.FieldIsNull(FieldAuthClientID))
}

// AuthClientIDNotNil applies the NotNil predicate on the "auth_client_id" field.
func AuthClientIDNotNil() predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNotNull(FieldAuthClientID))
}

// LastUsedAtEQ applies the EQ predicate on the "last_used_at" field.
func LastUsedAtEQ(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldLastUsedAt, v))
}

// LastUsedAtNEQ applies the NEQ predicate on the "last_used_at" field.
func LastUsedAtNEQ(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNEQ(FieldLastUsedAt, v))
}

// LastUsedAtIn applies the In predicate on the "last_used_at" field.
func LastUsedAtIn(vs ...time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldIn(FieldLastUsedAt, vs...))
}

// LastUsedAtNotIn applies the NotIn predicate on the "last_used_at" field.
func LastUsedAtNotIn(vs ...time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNotIn(FieldLastUsedAt, vs...))
}

// LastUsedAtGT applies the GT predicate on the "last_used_at" field.
func LastUsedAtGT(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGT(FieldLastUsedAt, v))
}

// LastUsedAtGTE applies the GTE predicate on the "last_used_at" field.
func LastUsedAtGTE(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGTE(FieldLastUsedAt, v))
}

// LastUsedAtLT applies the LT predicate on the "last_used_at" field.
func LastUsedAtLT(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLT(FieldLastUsedAt, v))
}

// LastUsedAtLTE applies the LTE predicate on the "last_used_at" field.
func LastUsedAtLTE(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLTE(FieldLastUsedAt, v))
}

// LastUsedAtIsNil applies the IsNil predicate on the "last_used_at" field.
func LastUsedAtIsNil() predicate.ApiToken {
	return predicate.ApiToken(sql.FieldIsNull(FieldLastUsedAt))
}

// LastUsedAtNotNil applies the NotNil predicate on the "last_used_at" field.
func LastUsedAtNotNil() predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNotNull(FieldLastUsedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.ApiToken {
	return predicate.ApiToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.ApiToken {
	return predicate.ApiToken(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGenerations applies the HasEdge predicate on the "generations" edge.
func HasGenerations() predicate.ApiToken {
	return predicate.ApiToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GenerationsTable, GenerationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGenerationsWith applies the HasEdge predicate on the "generations" edge with a given conditions (other predicates).
func HasGenerationsWith(preds ...predicate.Generation) predicate.ApiToken {
	return predicate.ApiToken(func(s *sql.Selector) {
		step := newGenerationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUpscales applies the HasEdge predicate on the "upscales" edge.
func HasUpscales() predicate.ApiToken {
	return predicate.ApiToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UpscalesTable, UpscalesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUpscalesWith applies the HasEdge predicate on the "upscales" edge with a given conditions (other predicates).
func HasUpscalesWith(preds ...predicate.Upscale) predicate.ApiToken {
	return predicate.ApiToken(func(s *sql.Selector) {
		step := newUpscalesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVoiceovers applies the HasEdge predicate on the "voiceovers" edge.
func HasVoiceovers() predicate.ApiToken {
	return predicate.ApiToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VoiceoversTable, VoiceoversColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVoiceoversWith applies the HasEdge predicate on the "voiceovers" edge with a given conditions (other predicates).
func HasVoiceoversWith(preds ...predicate.Voiceover) predicate.ApiToken {
	return predicate.ApiToken(func(s *sql.Selector) {
		step := newVoiceoversStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAuthClients applies the HasEdge predicate on the "auth_clients" edge.
func HasAuthClients() predicate.ApiToken {
	return predicate.ApiToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AuthClientsTable, AuthClientsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthClientsWith applies the HasEdge predicate on the "auth_clients" edge with a given conditions (other predicates).
func HasAuthClientsWith(preds ...predicate.AuthClient) predicate.ApiToken {
	return predicate.ApiToken(func(s *sql.Selector) {
		step := newAuthClientsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ApiToken) predicate.ApiToken {
	return predicate.ApiToken(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ApiToken) predicate.ApiToken {
	return predicate.ApiToken(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ApiToken) predicate.ApiToken {
	return predicate.ApiToken(sql.NotPredicates(p))
}
