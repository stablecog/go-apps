// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/voiceovermodel"
)

// VoiceoverModel is the model entity for the VoiceoverModel schema.
type VoiceoverModel struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// NameInWorker holds the value of the "name_in_worker" field.
	NameInWorker string `json:"name_in_worker,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// IsDefault holds the value of the "is_default" field.
	IsDefault bool `json:"is_default,omitempty"`
	// IsHidden holds the value of the "is_hidden" field.
	IsHidden bool `json:"is_hidden,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VoiceoverModelQuery when eager-loading is set.
	Edges        VoiceoverModelEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VoiceoverModelEdges holds the relations/edges for other nodes in the graph.
type VoiceoverModelEdges struct {
	// Voiceovers holds the value of the voiceovers edge.
	Voiceovers []*Voiceover `json:"voiceovers,omitempty"`
	// VoiceoverSpeakers holds the value of the voiceover_speakers edge.
	VoiceoverSpeakers []*VoiceoverSpeaker `json:"voiceover_speakers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// VoiceoversOrErr returns the Voiceovers value or an error if the edge
// was not loaded in eager-loading.
func (e VoiceoverModelEdges) VoiceoversOrErr() ([]*Voiceover, error) {
	if e.loadedTypes[0] {
		return e.Voiceovers, nil
	}
	return nil, &NotLoadedError{edge: "voiceovers"}
}

// VoiceoverSpeakersOrErr returns the VoiceoverSpeakers value or an error if the edge
// was not loaded in eager-loading.
func (e VoiceoverModelEdges) VoiceoverSpeakersOrErr() ([]*VoiceoverSpeaker, error) {
	if e.loadedTypes[1] {
		return e.VoiceoverSpeakers, nil
	}
	return nil, &NotLoadedError{edge: "voiceover_speakers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VoiceoverModel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case voiceovermodel.FieldIsActive, voiceovermodel.FieldIsDefault, voiceovermodel.FieldIsHidden:
			values[i] = new(sql.NullBool)
		case voiceovermodel.FieldNameInWorker:
			values[i] = new(sql.NullString)
		case voiceovermodel.FieldCreatedAt, voiceovermodel.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case voiceovermodel.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VoiceoverModel fields.
func (vm *VoiceoverModel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case voiceovermodel.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				vm.ID = *value
			}
		case voiceovermodel.FieldNameInWorker:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_in_worker", values[i])
			} else if value.Valid {
				vm.NameInWorker = value.String
			}
		case voiceovermodel.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				vm.IsActive = value.Bool
			}
		case voiceovermodel.FieldIsDefault:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_default", values[i])
			} else if value.Valid {
				vm.IsDefault = value.Bool
			}
		case voiceovermodel.FieldIsHidden:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_hidden", values[i])
			} else if value.Valid {
				vm.IsHidden = value.Bool
			}
		case voiceovermodel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vm.CreatedAt = value.Time
			}
		case voiceovermodel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vm.UpdatedAt = value.Time
			}
		default:
			vm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VoiceoverModel.
// This includes values selected through modifiers, order, etc.
func (vm *VoiceoverModel) Value(name string) (ent.Value, error) {
	return vm.selectValues.Get(name)
}

// QueryVoiceovers queries the "voiceovers" edge of the VoiceoverModel entity.
func (vm *VoiceoverModel) QueryVoiceovers() *VoiceoverQuery {
	return NewVoiceoverModelClient(vm.config).QueryVoiceovers(vm)
}

// QueryVoiceoverSpeakers queries the "voiceover_speakers" edge of the VoiceoverModel entity.
func (vm *VoiceoverModel) QueryVoiceoverSpeakers() *VoiceoverSpeakerQuery {
	return NewVoiceoverModelClient(vm.config).QueryVoiceoverSpeakers(vm)
}

// Update returns a builder for updating this VoiceoverModel.
// Note that you need to call VoiceoverModel.Unwrap() before calling this method if this VoiceoverModel
// was returned from a transaction, and the transaction was committed or rolled back.
func (vm *VoiceoverModel) Update() *VoiceoverModelUpdateOne {
	return NewVoiceoverModelClient(vm.config).UpdateOne(vm)
}

// Unwrap unwraps the VoiceoverModel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vm *VoiceoverModel) Unwrap() *VoiceoverModel {
	_tx, ok := vm.config.driver.(*txDriver)
	if !ok {
		panic("ent: VoiceoverModel is not a transactional entity")
	}
	vm.config.driver = _tx.drv
	return vm
}

// String implements the fmt.Stringer.
func (vm *VoiceoverModel) String() string {
	var builder strings.Builder
	builder.WriteString("VoiceoverModel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vm.ID))
	builder.WriteString("name_in_worker=")
	builder.WriteString(vm.NameInWorker)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", vm.IsActive))
	builder.WriteString(", ")
	builder.WriteString("is_default=")
	builder.WriteString(fmt.Sprintf("%v", vm.IsDefault))
	builder.WriteString(", ")
	builder.WriteString("is_hidden=")
	builder.WriteString(fmt.Sprintf("%v", vm.IsHidden))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(vm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(vm.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// VoiceoverModels is a parsable slice of VoiceoverModel.
type VoiceoverModels []*VoiceoverModel
