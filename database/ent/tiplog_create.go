// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/tiplog"
	"github.com/stablecog/sc-go/database/ent/user"
)

// TipLogCreate is the builder for creating a TipLog entity.
type TipLogCreate struct {
	config
	mutation *TipLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAmount sets the "amount" field.
func (tlc *TipLogCreate) SetAmount(i int32) *TipLogCreate {
	tlc.mutation.SetAmount(i)
	return tlc
}

// SetTippedToDiscordID sets the "tipped_to_discord_id" field.
func (tlc *TipLogCreate) SetTippedToDiscordID(s string) *TipLogCreate {
	tlc.mutation.SetTippedToDiscordID(s)
	return tlc
}

// SetTippedBy sets the "tipped_by" field.
func (tlc *TipLogCreate) SetTippedBy(u uuid.UUID) *TipLogCreate {
	tlc.mutation.SetTippedBy(u)
	return tlc
}

// SetTippedTo sets the "tipped_to" field.
func (tlc *TipLogCreate) SetTippedTo(u uuid.UUID) *TipLogCreate {
	tlc.mutation.SetTippedTo(u)
	return tlc
}

// SetNillableTippedTo sets the "tipped_to" field if the given value is not nil.
func (tlc *TipLogCreate) SetNillableTippedTo(u *uuid.UUID) *TipLogCreate {
	if u != nil {
		tlc.SetTippedTo(*u)
	}
	return tlc
}

// SetCreatedAt sets the "created_at" field.
func (tlc *TipLogCreate) SetCreatedAt(t time.Time) *TipLogCreate {
	tlc.mutation.SetCreatedAt(t)
	return tlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tlc *TipLogCreate) SetNillableCreatedAt(t *time.Time) *TipLogCreate {
	if t != nil {
		tlc.SetCreatedAt(*t)
	}
	return tlc
}

// SetUpdatedAt sets the "updated_at" field.
func (tlc *TipLogCreate) SetUpdatedAt(t time.Time) *TipLogCreate {
	tlc.mutation.SetUpdatedAt(t)
	return tlc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tlc *TipLogCreate) SetNillableUpdatedAt(t *time.Time) *TipLogCreate {
	if t != nil {
		tlc.SetUpdatedAt(*t)
	}
	return tlc
}

// SetID sets the "id" field.
func (tlc *TipLogCreate) SetID(u uuid.UUID) *TipLogCreate {
	tlc.mutation.SetID(u)
	return tlc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tlc *TipLogCreate) SetNillableID(u *uuid.UUID) *TipLogCreate {
	if u != nil {
		tlc.SetID(*u)
	}
	return tlc
}

// SetTipsReceivedID sets the "tips_received" edge to the User entity by ID.
func (tlc *TipLogCreate) SetTipsReceivedID(id uuid.UUID) *TipLogCreate {
	tlc.mutation.SetTipsReceivedID(id)
	return tlc
}

// SetNillableTipsReceivedID sets the "tips_received" edge to the User entity by ID if the given value is not nil.
func (tlc *TipLogCreate) SetNillableTipsReceivedID(id *uuid.UUID) *TipLogCreate {
	if id != nil {
		tlc = tlc.SetTipsReceivedID(*id)
	}
	return tlc
}

// SetTipsReceived sets the "tips_received" edge to the User entity.
func (tlc *TipLogCreate) SetTipsReceived(u *User) *TipLogCreate {
	return tlc.SetTipsReceivedID(u.ID)
}

// SetTipsGivenID sets the "tips_given" edge to the User entity by ID.
func (tlc *TipLogCreate) SetTipsGivenID(id uuid.UUID) *TipLogCreate {
	tlc.mutation.SetTipsGivenID(id)
	return tlc
}

// SetTipsGiven sets the "tips_given" edge to the User entity.
func (tlc *TipLogCreate) SetTipsGiven(u *User) *TipLogCreate {
	return tlc.SetTipsGivenID(u.ID)
}

// Mutation returns the TipLogMutation object of the builder.
func (tlc *TipLogCreate) Mutation() *TipLogMutation {
	return tlc.mutation
}

// Save creates the TipLog in the database.
func (tlc *TipLogCreate) Save(ctx context.Context) (*TipLog, error) {
	tlc.defaults()
	return withHooks(ctx, tlc.sqlSave, tlc.mutation, tlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tlc *TipLogCreate) SaveX(ctx context.Context) *TipLog {
	v, err := tlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlc *TipLogCreate) Exec(ctx context.Context) error {
	_, err := tlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlc *TipLogCreate) ExecX(ctx context.Context) {
	if err := tlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tlc *TipLogCreate) defaults() {
	if _, ok := tlc.mutation.CreatedAt(); !ok {
		v := tiplog.DefaultCreatedAt()
		tlc.mutation.SetCreatedAt(v)
	}
	if _, ok := tlc.mutation.UpdatedAt(); !ok {
		v := tiplog.DefaultUpdatedAt()
		tlc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tlc.mutation.ID(); !ok {
		v := tiplog.DefaultID()
		tlc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlc *TipLogCreate) check() error {
	if _, ok := tlc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "TipLog.amount"`)}
	}
	if _, ok := tlc.mutation.TippedToDiscordID(); !ok {
		return &ValidationError{Name: "tipped_to_discord_id", err: errors.New(`ent: missing required field "TipLog.tipped_to_discord_id"`)}
	}
	if _, ok := tlc.mutation.TippedBy(); !ok {
		return &ValidationError{Name: "tipped_by", err: errors.New(`ent: missing required field "TipLog.tipped_by"`)}
	}
	if _, ok := tlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TipLog.created_at"`)}
	}
	if _, ok := tlc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TipLog.updated_at"`)}
	}
	if len(tlc.mutation.TipsGivenIDs()) == 0 {
		return &ValidationError{Name: "tips_given", err: errors.New(`ent: missing required edge "TipLog.tips_given"`)}
	}
	return nil
}

func (tlc *TipLogCreate) sqlSave(ctx context.Context) (*TipLog, error) {
	if err := tlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tlc.mutation.id = &_node.ID
	tlc.mutation.done = true
	return _node, nil
}

func (tlc *TipLogCreate) createSpec() (*TipLog, *sqlgraph.CreateSpec) {
	var (
		_node = &TipLog{config: tlc.config}
		_spec = sqlgraph.NewCreateSpec(tiplog.Table, sqlgraph.NewFieldSpec(tiplog.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = tlc.conflict
	if id, ok := tlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tlc.mutation.Amount(); ok {
		_spec.SetField(tiplog.FieldAmount, field.TypeInt32, value)
		_node.Amount = value
	}
	if value, ok := tlc.mutation.TippedToDiscordID(); ok {
		_spec.SetField(tiplog.FieldTippedToDiscordID, field.TypeString, value)
		_node.TippedToDiscordID = value
	}
	if value, ok := tlc.mutation.CreatedAt(); ok {
		_spec.SetField(tiplog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tlc.mutation.UpdatedAt(); ok {
		_spec.SetField(tiplog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := tlc.mutation.TipsReceivedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tiplog.TipsReceivedTable,
			Columns: []string{tiplog.TipsReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TippedTo = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tlc.mutation.TipsGivenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tiplog.TipsGivenTable,
			Columns: []string{tiplog.TipsGivenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TippedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TipLog.Create().
//		SetAmount(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TipLogUpsert) {
//			SetAmount(v+v).
//		}).
//		Exec(ctx)
func (tlc *TipLogCreate) OnConflict(opts ...sql.ConflictOption) *TipLogUpsertOne {
	tlc.conflict = opts
	return &TipLogUpsertOne{
		create: tlc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TipLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tlc *TipLogCreate) OnConflictColumns(columns ...string) *TipLogUpsertOne {
	tlc.conflict = append(tlc.conflict, sql.ConflictColumns(columns...))
	return &TipLogUpsertOne{
		create: tlc,
	}
}

type (
	// TipLogUpsertOne is the builder for "upsert"-ing
	//  one TipLog node.
	TipLogUpsertOne struct {
		create *TipLogCreate
	}

	// TipLogUpsert is the "OnConflict" setter.
	TipLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetAmount sets the "amount" field.
func (u *TipLogUpsert) SetAmount(v int32) *TipLogUpsert {
	u.Set(tiplog.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TipLogUpsert) UpdateAmount() *TipLogUpsert {
	u.SetExcluded(tiplog.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *TipLogUpsert) AddAmount(v int32) *TipLogUpsert {
	u.Add(tiplog.FieldAmount, v)
	return u
}

// SetTippedToDiscordID sets the "tipped_to_discord_id" field.
func (u *TipLogUpsert) SetTippedToDiscordID(v string) *TipLogUpsert {
	u.Set(tiplog.FieldTippedToDiscordID, v)
	return u
}

// UpdateTippedToDiscordID sets the "tipped_to_discord_id" field to the value that was provided on create.
func (u *TipLogUpsert) UpdateTippedToDiscordID() *TipLogUpsert {
	u.SetExcluded(tiplog.FieldTippedToDiscordID)
	return u
}

// SetTippedBy sets the "tipped_by" field.
func (u *TipLogUpsert) SetTippedBy(v uuid.UUID) *TipLogUpsert {
	u.Set(tiplog.FieldTippedBy, v)
	return u
}

// UpdateTippedBy sets the "tipped_by" field to the value that was provided on create.
func (u *TipLogUpsert) UpdateTippedBy() *TipLogUpsert {
	u.SetExcluded(tiplog.FieldTippedBy)
	return u
}

// SetTippedTo sets the "tipped_to" field.
func (u *TipLogUpsert) SetTippedTo(v uuid.UUID) *TipLogUpsert {
	u.Set(tiplog.FieldTippedTo, v)
	return u
}

// UpdateTippedTo sets the "tipped_to" field to the value that was provided on create.
func (u *TipLogUpsert) UpdateTippedTo() *TipLogUpsert {
	u.SetExcluded(tiplog.FieldTippedTo)
	return u
}

// ClearTippedTo clears the value of the "tipped_to" field.
func (u *TipLogUpsert) ClearTippedTo() *TipLogUpsert {
	u.SetNull(tiplog.FieldTippedTo)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TipLogUpsert) SetUpdatedAt(v time.Time) *TipLogUpsert {
	u.Set(tiplog.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TipLogUpsert) UpdateUpdatedAt() *TipLogUpsert {
	u.SetExcluded(tiplog.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TipLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tiplog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TipLogUpsertOne) UpdateNewValues() *TipLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tiplog.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(tiplog.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TipLog.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TipLogUpsertOne) Ignore() *TipLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TipLogUpsertOne) DoNothing() *TipLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TipLogCreate.OnConflict
// documentation for more info.
func (u *TipLogUpsertOne) Update(set func(*TipLogUpsert)) *TipLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TipLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetAmount sets the "amount" field.
func (u *TipLogUpsertOne) SetAmount(v int32) *TipLogUpsertOne {
	return u.Update(func(s *TipLogUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *TipLogUpsertOne) AddAmount(v int32) *TipLogUpsertOne {
	return u.Update(func(s *TipLogUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TipLogUpsertOne) UpdateAmount() *TipLogUpsertOne {
	return u.Update(func(s *TipLogUpsert) {
		s.UpdateAmount()
	})
}

// SetTippedToDiscordID sets the "tipped_to_discord_id" field.
func (u *TipLogUpsertOne) SetTippedToDiscordID(v string) *TipLogUpsertOne {
	return u.Update(func(s *TipLogUpsert) {
		s.SetTippedToDiscordID(v)
	})
}

// UpdateTippedToDiscordID sets the "tipped_to_discord_id" field to the value that was provided on create.
func (u *TipLogUpsertOne) UpdateTippedToDiscordID() *TipLogUpsertOne {
	return u.Update(func(s *TipLogUpsert) {
		s.UpdateTippedToDiscordID()
	})
}

// SetTippedBy sets the "tipped_by" field.
func (u *TipLogUpsertOne) SetTippedBy(v uuid.UUID) *TipLogUpsertOne {
	return u.Update(func(s *TipLogUpsert) {
		s.SetTippedBy(v)
	})
}

// UpdateTippedBy sets the "tipped_by" field to the value that was provided on create.
func (u *TipLogUpsertOne) UpdateTippedBy() *TipLogUpsertOne {
	return u.Update(func(s *TipLogUpsert) {
		s.UpdateTippedBy()
	})
}

// SetTippedTo sets the "tipped_to" field.
func (u *TipLogUpsertOne) SetTippedTo(v uuid.UUID) *TipLogUpsertOne {
	return u.Update(func(s *TipLogUpsert) {
		s.SetTippedTo(v)
	})
}

// UpdateTippedTo sets the "tipped_to" field to the value that was provided on create.
func (u *TipLogUpsertOne) UpdateTippedTo() *TipLogUpsertOne {
	return u.Update(func(s *TipLogUpsert) {
		s.UpdateTippedTo()
	})
}

// ClearTippedTo clears the value of the "tipped_to" field.
func (u *TipLogUpsertOne) ClearTippedTo() *TipLogUpsertOne {
	return u.Update(func(s *TipLogUpsert) {
		s.ClearTippedTo()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TipLogUpsertOne) SetUpdatedAt(v time.Time) *TipLogUpsertOne {
	return u.Update(func(s *TipLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TipLogUpsertOne) UpdateUpdatedAt() *TipLogUpsertOne {
	return u.Update(func(s *TipLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TipLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TipLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TipLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TipLogUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TipLogUpsertOne.ID is not supported by MySQL driver. Use TipLogUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TipLogUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TipLogCreateBulk is the builder for creating many TipLog entities in bulk.
type TipLogCreateBulk struct {
	config
	err      error
	builders []*TipLogCreate
	conflict []sql.ConflictOption
}

// Save creates the TipLog entities in the database.
func (tlcb *TipLogCreateBulk) Save(ctx context.Context) ([]*TipLog, error) {
	if tlcb.err != nil {
		return nil, tlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tlcb.builders))
	nodes := make([]*TipLog, len(tlcb.builders))
	mutators := make([]Mutator, len(tlcb.builders))
	for i := range tlcb.builders {
		func(i int, root context.Context) {
			builder := tlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TipLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tlcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tlcb *TipLogCreateBulk) SaveX(ctx context.Context) []*TipLog {
	v, err := tlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlcb *TipLogCreateBulk) Exec(ctx context.Context) error {
	_, err := tlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlcb *TipLogCreateBulk) ExecX(ctx context.Context) {
	if err := tlcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TipLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TipLogUpsert) {
//			SetAmount(v+v).
//		}).
//		Exec(ctx)
func (tlcb *TipLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *TipLogUpsertBulk {
	tlcb.conflict = opts
	return &TipLogUpsertBulk{
		create: tlcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TipLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tlcb *TipLogCreateBulk) OnConflictColumns(columns ...string) *TipLogUpsertBulk {
	tlcb.conflict = append(tlcb.conflict, sql.ConflictColumns(columns...))
	return &TipLogUpsertBulk{
		create: tlcb,
	}
}

// TipLogUpsertBulk is the builder for "upsert"-ing
// a bulk of TipLog nodes.
type TipLogUpsertBulk struct {
	create *TipLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TipLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tiplog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TipLogUpsertBulk) UpdateNewValues() *TipLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tiplog.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(tiplog.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TipLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TipLogUpsertBulk) Ignore() *TipLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TipLogUpsertBulk) DoNothing() *TipLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TipLogCreateBulk.OnConflict
// documentation for more info.
func (u *TipLogUpsertBulk) Update(set func(*TipLogUpsert)) *TipLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TipLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetAmount sets the "amount" field.
func (u *TipLogUpsertBulk) SetAmount(v int32) *TipLogUpsertBulk {
	return u.Update(func(s *TipLogUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *TipLogUpsertBulk) AddAmount(v int32) *TipLogUpsertBulk {
	return u.Update(func(s *TipLogUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TipLogUpsertBulk) UpdateAmount() *TipLogUpsertBulk {
	return u.Update(func(s *TipLogUpsert) {
		s.UpdateAmount()
	})
}

// SetTippedToDiscordID sets the "tipped_to_discord_id" field.
func (u *TipLogUpsertBulk) SetTippedToDiscordID(v string) *TipLogUpsertBulk {
	return u.Update(func(s *TipLogUpsert) {
		s.SetTippedToDiscordID(v)
	})
}

// UpdateTippedToDiscordID sets the "tipped_to_discord_id" field to the value that was provided on create.
func (u *TipLogUpsertBulk) UpdateTippedToDiscordID() *TipLogUpsertBulk {
	return u.Update(func(s *TipLogUpsert) {
		s.UpdateTippedToDiscordID()
	})
}

// SetTippedBy sets the "tipped_by" field.
func (u *TipLogUpsertBulk) SetTippedBy(v uuid.UUID) *TipLogUpsertBulk {
	return u.Update(func(s *TipLogUpsert) {
		s.SetTippedBy(v)
	})
}

// UpdateTippedBy sets the "tipped_by" field to the value that was provided on create.
func (u *TipLogUpsertBulk) UpdateTippedBy() *TipLogUpsertBulk {
	return u.Update(func(s *TipLogUpsert) {
		s.UpdateTippedBy()
	})
}

// SetTippedTo sets the "tipped_to" field.
func (u *TipLogUpsertBulk) SetTippedTo(v uuid.UUID) *TipLogUpsertBulk {
	return u.Update(func(s *TipLogUpsert) {
		s.SetTippedTo(v)
	})
}

// UpdateTippedTo sets the "tipped_to" field to the value that was provided on create.
func (u *TipLogUpsertBulk) UpdateTippedTo() *TipLogUpsertBulk {
	return u.Update(func(s *TipLogUpsert) {
		s.UpdateTippedTo()
	})
}

// ClearTippedTo clears the value of the "tipped_to" field.
func (u *TipLogUpsertBulk) ClearTippedTo() *TipLogUpsertBulk {
	return u.Update(func(s *TipLogUpsert) {
		s.ClearTippedTo()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TipLogUpsertBulk) SetUpdatedAt(v time.Time) *TipLogUpsertBulk {
	return u.Update(func(s *TipLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TipLogUpsertBulk) UpdateUpdatedAt() *TipLogUpsertBulk {
	return u.Update(func(s *TipLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TipLogUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TipLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TipLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TipLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
