// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/mqlog"
)

// MqLogCreate is the builder for creating a MqLog entity.
type MqLogCreate struct {
	config
	mutation *MqLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetMessageID sets the "message_id" field.
func (mlc *MqLogCreate) SetMessageID(s string) *MqLogCreate {
	mlc.mutation.SetMessageID(s)
	return mlc
}

// SetPriority sets the "priority" field.
func (mlc *MqLogCreate) SetPriority(i int) *MqLogCreate {
	mlc.mutation.SetPriority(i)
	return mlc
}

// SetIsProcessing sets the "is_processing" field.
func (mlc *MqLogCreate) SetIsProcessing(b bool) *MqLogCreate {
	mlc.mutation.SetIsProcessing(b)
	return mlc
}

// SetNillableIsProcessing sets the "is_processing" field if the given value is not nil.
func (mlc *MqLogCreate) SetNillableIsProcessing(b *bool) *MqLogCreate {
	if b != nil {
		mlc.SetIsProcessing(*b)
	}
	return mlc
}

// SetCreatedAt sets the "created_at" field.
func (mlc *MqLogCreate) SetCreatedAt(t time.Time) *MqLogCreate {
	mlc.mutation.SetCreatedAt(t)
	return mlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mlc *MqLogCreate) SetNillableCreatedAt(t *time.Time) *MqLogCreate {
	if t != nil {
		mlc.SetCreatedAt(*t)
	}
	return mlc
}

// SetUpdatedAt sets the "updated_at" field.
func (mlc *MqLogCreate) SetUpdatedAt(t time.Time) *MqLogCreate {
	mlc.mutation.SetUpdatedAt(t)
	return mlc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mlc *MqLogCreate) SetNillableUpdatedAt(t *time.Time) *MqLogCreate {
	if t != nil {
		mlc.SetUpdatedAt(*t)
	}
	return mlc
}

// SetID sets the "id" field.
func (mlc *MqLogCreate) SetID(u uuid.UUID) *MqLogCreate {
	mlc.mutation.SetID(u)
	return mlc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mlc *MqLogCreate) SetNillableID(u *uuid.UUID) *MqLogCreate {
	if u != nil {
		mlc.SetID(*u)
	}
	return mlc
}

// Mutation returns the MqLogMutation object of the builder.
func (mlc *MqLogCreate) Mutation() *MqLogMutation {
	return mlc.mutation
}

// Save creates the MqLog in the database.
func (mlc *MqLogCreate) Save(ctx context.Context) (*MqLog, error) {
	mlc.defaults()
	return withHooks(ctx, mlc.sqlSave, mlc.mutation, mlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mlc *MqLogCreate) SaveX(ctx context.Context) *MqLog {
	v, err := mlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mlc *MqLogCreate) Exec(ctx context.Context) error {
	_, err := mlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlc *MqLogCreate) ExecX(ctx context.Context) {
	if err := mlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mlc *MqLogCreate) defaults() {
	if _, ok := mlc.mutation.IsProcessing(); !ok {
		v := mqlog.DefaultIsProcessing
		mlc.mutation.SetIsProcessing(v)
	}
	if _, ok := mlc.mutation.CreatedAt(); !ok {
		v := mqlog.DefaultCreatedAt()
		mlc.mutation.SetCreatedAt(v)
	}
	if _, ok := mlc.mutation.UpdatedAt(); !ok {
		v := mqlog.DefaultUpdatedAt()
		mlc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mlc.mutation.ID(); !ok {
		v := mqlog.DefaultID()
		mlc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mlc *MqLogCreate) check() error {
	if _, ok := mlc.mutation.MessageID(); !ok {
		return &ValidationError{Name: "message_id", err: errors.New(`ent: missing required field "MqLog.message_id"`)}
	}
	if _, ok := mlc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "MqLog.priority"`)}
	}
	if _, ok := mlc.mutation.IsProcessing(); !ok {
		return &ValidationError{Name: "is_processing", err: errors.New(`ent: missing required field "MqLog.is_processing"`)}
	}
	if _, ok := mlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MqLog.created_at"`)}
	}
	if _, ok := mlc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MqLog.updated_at"`)}
	}
	return nil
}

func (mlc *MqLogCreate) sqlSave(ctx context.Context) (*MqLog, error) {
	if err := mlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mlc.mutation.id = &_node.ID
	mlc.mutation.done = true
	return _node, nil
}

func (mlc *MqLogCreate) createSpec() (*MqLog, *sqlgraph.CreateSpec) {
	var (
		_node = &MqLog{config: mlc.config}
		_spec = sqlgraph.NewCreateSpec(mqlog.Table, sqlgraph.NewFieldSpec(mqlog.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = mlc.conflict
	if id, ok := mlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mlc.mutation.MessageID(); ok {
		_spec.SetField(mqlog.FieldMessageID, field.TypeString, value)
		_node.MessageID = value
	}
	if value, ok := mlc.mutation.Priority(); ok {
		_spec.SetField(mqlog.FieldPriority, field.TypeInt, value)
		_node.Priority = value
	}
	if value, ok := mlc.mutation.IsProcessing(); ok {
		_spec.SetField(mqlog.FieldIsProcessing, field.TypeBool, value)
		_node.IsProcessing = value
	}
	if value, ok := mlc.mutation.CreatedAt(); ok {
		_spec.SetField(mqlog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mlc.mutation.UpdatedAt(); ok {
		_spec.SetField(mqlog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MqLog.Create().
//		SetMessageID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MqLogUpsert) {
//			SetMessageID(v+v).
//		}).
//		Exec(ctx)
func (mlc *MqLogCreate) OnConflict(opts ...sql.ConflictOption) *MqLogUpsertOne {
	mlc.conflict = opts
	return &MqLogUpsertOne{
		create: mlc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MqLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mlc *MqLogCreate) OnConflictColumns(columns ...string) *MqLogUpsertOne {
	mlc.conflict = append(mlc.conflict, sql.ConflictColumns(columns...))
	return &MqLogUpsertOne{
		create: mlc,
	}
}

type (
	// MqLogUpsertOne is the builder for "upsert"-ing
	//  one MqLog node.
	MqLogUpsertOne struct {
		create *MqLogCreate
	}

	// MqLogUpsert is the "OnConflict" setter.
	MqLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetMessageID sets the "message_id" field.
func (u *MqLogUpsert) SetMessageID(v string) *MqLogUpsert {
	u.Set(mqlog.FieldMessageID, v)
	return u
}

// UpdateMessageID sets the "message_id" field to the value that was provided on create.
func (u *MqLogUpsert) UpdateMessageID() *MqLogUpsert {
	u.SetExcluded(mqlog.FieldMessageID)
	return u
}

// SetPriority sets the "priority" field.
func (u *MqLogUpsert) SetPriority(v int) *MqLogUpsert {
	u.Set(mqlog.FieldPriority, v)
	return u
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *MqLogUpsert) UpdatePriority() *MqLogUpsert {
	u.SetExcluded(mqlog.FieldPriority)
	return u
}

// AddPriority adds v to the "priority" field.
func (u *MqLogUpsert) AddPriority(v int) *MqLogUpsert {
	u.Add(mqlog.FieldPriority, v)
	return u
}

// SetIsProcessing sets the "is_processing" field.
func (u *MqLogUpsert) SetIsProcessing(v bool) *MqLogUpsert {
	u.Set(mqlog.FieldIsProcessing, v)
	return u
}

// UpdateIsProcessing sets the "is_processing" field to the value that was provided on create.
func (u *MqLogUpsert) UpdateIsProcessing() *MqLogUpsert {
	u.SetExcluded(mqlog.FieldIsProcessing)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MqLogUpsert) SetUpdatedAt(v time.Time) *MqLogUpsert {
	u.Set(mqlog.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MqLogUpsert) UpdateUpdatedAt() *MqLogUpsert {
	u.SetExcluded(mqlog.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MqLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mqlog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MqLogUpsertOne) UpdateNewValues() *MqLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(mqlog.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(mqlog.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MqLog.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MqLogUpsertOne) Ignore() *MqLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MqLogUpsertOne) DoNothing() *MqLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MqLogCreate.OnConflict
// documentation for more info.
func (u *MqLogUpsertOne) Update(set func(*MqLogUpsert)) *MqLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MqLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetMessageID sets the "message_id" field.
func (u *MqLogUpsertOne) SetMessageID(v string) *MqLogUpsertOne {
	return u.Update(func(s *MqLogUpsert) {
		s.SetMessageID(v)
	})
}

// UpdateMessageID sets the "message_id" field to the value that was provided on create.
func (u *MqLogUpsertOne) UpdateMessageID() *MqLogUpsertOne {
	return u.Update(func(s *MqLogUpsert) {
		s.UpdateMessageID()
	})
}

// SetPriority sets the "priority" field.
func (u *MqLogUpsertOne) SetPriority(v int) *MqLogUpsertOne {
	return u.Update(func(s *MqLogUpsert) {
		s.SetPriority(v)
	})
}

// AddPriority adds v to the "priority" field.
func (u *MqLogUpsertOne) AddPriority(v int) *MqLogUpsertOne {
	return u.Update(func(s *MqLogUpsert) {
		s.AddPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *MqLogUpsertOne) UpdatePriority() *MqLogUpsertOne {
	return u.Update(func(s *MqLogUpsert) {
		s.UpdatePriority()
	})
}

// SetIsProcessing sets the "is_processing" field.
func (u *MqLogUpsertOne) SetIsProcessing(v bool) *MqLogUpsertOne {
	return u.Update(func(s *MqLogUpsert) {
		s.SetIsProcessing(v)
	})
}

// UpdateIsProcessing sets the "is_processing" field to the value that was provided on create.
func (u *MqLogUpsertOne) UpdateIsProcessing() *MqLogUpsertOne {
	return u.Update(func(s *MqLogUpsert) {
		s.UpdateIsProcessing()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MqLogUpsertOne) SetUpdatedAt(v time.Time) *MqLogUpsertOne {
	return u.Update(func(s *MqLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MqLogUpsertOne) UpdateUpdatedAt() *MqLogUpsertOne {
	return u.Update(func(s *MqLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *MqLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MqLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MqLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MqLogUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MqLogUpsertOne.ID is not supported by MySQL driver. Use MqLogUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MqLogUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MqLogCreateBulk is the builder for creating many MqLog entities in bulk.
type MqLogCreateBulk struct {
	config
	err      error
	builders []*MqLogCreate
	conflict []sql.ConflictOption
}

// Save creates the MqLog entities in the database.
func (mlcb *MqLogCreateBulk) Save(ctx context.Context) ([]*MqLog, error) {
	if mlcb.err != nil {
		return nil, mlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mlcb.builders))
	nodes := make([]*MqLog, len(mlcb.builders))
	mutators := make([]Mutator, len(mlcb.builders))
	for i := range mlcb.builders {
		func(i int, root context.Context) {
			builder := mlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MqLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mlcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mlcb *MqLogCreateBulk) SaveX(ctx context.Context) []*MqLog {
	v, err := mlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mlcb *MqLogCreateBulk) Exec(ctx context.Context) error {
	_, err := mlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlcb *MqLogCreateBulk) ExecX(ctx context.Context) {
	if err := mlcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MqLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MqLogUpsert) {
//			SetMessageID(v+v).
//		}).
//		Exec(ctx)
func (mlcb *MqLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *MqLogUpsertBulk {
	mlcb.conflict = opts
	return &MqLogUpsertBulk{
		create: mlcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MqLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mlcb *MqLogCreateBulk) OnConflictColumns(columns ...string) *MqLogUpsertBulk {
	mlcb.conflict = append(mlcb.conflict, sql.ConflictColumns(columns...))
	return &MqLogUpsertBulk{
		create: mlcb,
	}
}

// MqLogUpsertBulk is the builder for "upsert"-ing
// a bulk of MqLog nodes.
type MqLogUpsertBulk struct {
	create *MqLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MqLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mqlog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MqLogUpsertBulk) UpdateNewValues() *MqLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(mqlog.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(mqlog.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MqLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MqLogUpsertBulk) Ignore() *MqLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MqLogUpsertBulk) DoNothing() *MqLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MqLogCreateBulk.OnConflict
// documentation for more info.
func (u *MqLogUpsertBulk) Update(set func(*MqLogUpsert)) *MqLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MqLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetMessageID sets the "message_id" field.
func (u *MqLogUpsertBulk) SetMessageID(v string) *MqLogUpsertBulk {
	return u.Update(func(s *MqLogUpsert) {
		s.SetMessageID(v)
	})
}

// UpdateMessageID sets the "message_id" field to the value that was provided on create.
func (u *MqLogUpsertBulk) UpdateMessageID() *MqLogUpsertBulk {
	return u.Update(func(s *MqLogUpsert) {
		s.UpdateMessageID()
	})
}

// SetPriority sets the "priority" field.
func (u *MqLogUpsertBulk) SetPriority(v int) *MqLogUpsertBulk {
	return u.Update(func(s *MqLogUpsert) {
		s.SetPriority(v)
	})
}

// AddPriority adds v to the "priority" field.
func (u *MqLogUpsertBulk) AddPriority(v int) *MqLogUpsertBulk {
	return u.Update(func(s *MqLogUpsert) {
		s.AddPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *MqLogUpsertBulk) UpdatePriority() *MqLogUpsertBulk {
	return u.Update(func(s *MqLogUpsert) {
		s.UpdatePriority()
	})
}

// SetIsProcessing sets the "is_processing" field.
func (u *MqLogUpsertBulk) SetIsProcessing(v bool) *MqLogUpsertBulk {
	return u.Update(func(s *MqLogUpsert) {
		s.SetIsProcessing(v)
	})
}

// UpdateIsProcessing sets the "is_processing" field to the value that was provided on create.
func (u *MqLogUpsertBulk) UpdateIsProcessing() *MqLogUpsertBulk {
	return u.Update(func(s *MqLogUpsert) {
		s.UpdateIsProcessing()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MqLogUpsertBulk) SetUpdatedAt(v time.Time) *MqLogUpsertBulk {
	return u.Update(func(s *MqLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MqLogUpsertBulk) UpdateUpdatedAt() *MqLogUpsertBulk {
	return u.Update(func(s *MqLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *MqLogUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MqLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MqLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MqLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
