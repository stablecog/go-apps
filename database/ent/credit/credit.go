// Code generated by ent, DO NOT EDIT.

package credit

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the credit type in the database.
	Label = "credit"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRemainingAmount holds the string denoting the remaining_amount field in the database.
	FieldRemainingAmount = "remaining_amount"
	// FieldExpiresAt holds the string denoting the expires_at field in the database.
	FieldExpiresAt = "expires_at"
	// FieldStripeLineItemID holds the string denoting the stripe_line_item_id field in the database.
	FieldStripeLineItemID = "stripe_line_item_id"
	// FieldReplenishedAt holds the string denoting the replenished_at field in the database.
	FieldReplenishedAt = "replenished_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCreditTypeID holds the string denoting the credit_type_id field in the database.
	FieldCreditTypeID = "credit_type_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeCreditType holds the string denoting the credit_type edge name in mutations.
	EdgeCreditType = "credit_type"
	// Table holds the table name of the credit in the database.
	Table = "credits"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "credits"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "user_id"
	// CreditTypeTable is the table that holds the credit_type relation/edge.
	CreditTypeTable = "credits"
	// CreditTypeInverseTable is the table name for the CreditType entity.
	// It exists in this package in order to avoid circular dependency with the "credittype" package.
	CreditTypeInverseTable = "credit_types"
	// CreditTypeColumn is the table column denoting the credit_type relation/edge.
	CreditTypeColumn = "credit_type_id"
)

// Columns holds all SQL columns for credit fields.
var Columns = []string{
	FieldID,
	FieldRemainingAmount,
	FieldExpiresAt,
	FieldStripeLineItemID,
	FieldReplenishedAt,
	FieldUserID,
	FieldCreditTypeID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultReplenishedAt holds the default value on creation for the "replenished_at" field.
	DefaultReplenishedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Credit queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRemainingAmount orders the results by the remaining_amount field.
func ByRemainingAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemainingAmount, opts...).ToFunc()
}

// ByExpiresAt orders the results by the expires_at field.
func ByExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresAt, opts...).ToFunc()
}

// ByStripeLineItemID orders the results by the stripe_line_item_id field.
func ByStripeLineItemID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStripeLineItemID, opts...).ToFunc()
}

// ByReplenishedAt orders the results by the replenished_at field.
func ByReplenishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReplenishedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByCreditTypeID orders the results by the credit_type_id field.
func ByCreditTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreditTypeID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUsersField orders the results by users field.
func ByUsersField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), sql.OrderByField(field, opts...))
	}
}

// ByCreditTypeField orders the results by credit_type field.
func ByCreditTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreditTypeStep(), sql.OrderByField(field, opts...))
	}
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
	)
}
func newCreditTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreditTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreditTypeTable, CreditTypeColumn),
	)
}
