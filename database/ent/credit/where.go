// Code generated by ent, DO NOT EDIT.

package credit

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldLTE(FieldID, id))
}

// RemainingAmount applies equality check predicate on the "remaining_amount" field. It's identical to RemainingAmountEQ.
func RemainingAmount(v int32) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldRemainingAmount, v))
}

// StartsAt applies equality check predicate on the "starts_at" field. It's identical to StartsAtEQ.
func StartsAt(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldStartsAt, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldExpiresAt, v))
}

// Period applies equality check predicate on the "period" field. It's identical to PeriodEQ.
func Period(v int) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldPeriod, v))
}

// StripeLineItemID applies equality check predicate on the "stripe_line_item_id" field. It's identical to StripeLineItemIDEQ.
func StripeLineItemID(v string) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldStripeLineItemID, v))
}

// ReplenishedAt applies equality check predicate on the "replenished_at" field. It's identical to ReplenishedAtEQ.
func ReplenishedAt(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldReplenishedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldUserID, v))
}

// CreditTypeID applies equality check predicate on the "credit_type_id" field. It's identical to CreditTypeIDEQ.
func CreditTypeID(v uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldCreditTypeID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldUpdatedAt, v))
}

// RemainingAmountEQ applies the EQ predicate on the "remaining_amount" field.
func RemainingAmountEQ(v int32) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldRemainingAmount, v))
}

// RemainingAmountNEQ applies the NEQ predicate on the "remaining_amount" field.
func RemainingAmountNEQ(v int32) predicate.Credit {
	return predicate.Credit(sql.FieldNEQ(FieldRemainingAmount, v))
}

// RemainingAmountIn applies the In predicate on the "remaining_amount" field.
func RemainingAmountIn(vs ...int32) predicate.Credit {
	return predicate.Credit(sql.FieldIn(FieldRemainingAmount, vs...))
}

// RemainingAmountNotIn applies the NotIn predicate on the "remaining_amount" field.
func RemainingAmountNotIn(vs ...int32) predicate.Credit {
	return predicate.Credit(sql.FieldNotIn(FieldRemainingAmount, vs...))
}

// RemainingAmountGT applies the GT predicate on the "remaining_amount" field.
func RemainingAmountGT(v int32) predicate.Credit {
	return predicate.Credit(sql.FieldGT(FieldRemainingAmount, v))
}

// RemainingAmountGTE applies the GTE predicate on the "remaining_amount" field.
func RemainingAmountGTE(v int32) predicate.Credit {
	return predicate.Credit(sql.FieldGTE(FieldRemainingAmount, v))
}

// RemainingAmountLT applies the LT predicate on the "remaining_amount" field.
func RemainingAmountLT(v int32) predicate.Credit {
	return predicate.Credit(sql.FieldLT(FieldRemainingAmount, v))
}

// RemainingAmountLTE applies the LTE predicate on the "remaining_amount" field.
func RemainingAmountLTE(v int32) predicate.Credit {
	return predicate.Credit(sql.FieldLTE(FieldRemainingAmount, v))
}

// StartsAtEQ applies the EQ predicate on the "starts_at" field.
func StartsAtEQ(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldStartsAt, v))
}

// StartsAtNEQ applies the NEQ predicate on the "starts_at" field.
func StartsAtNEQ(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldNEQ(FieldStartsAt, v))
}

// StartsAtIn applies the In predicate on the "starts_at" field.
func StartsAtIn(vs ...time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldIn(FieldStartsAt, vs...))
}

// StartsAtNotIn applies the NotIn predicate on the "starts_at" field.
func StartsAtNotIn(vs ...time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldNotIn(FieldStartsAt, vs...))
}

// StartsAtGT applies the GT predicate on the "starts_at" field.
func StartsAtGT(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldGT(FieldStartsAt, v))
}

// StartsAtGTE applies the GTE predicate on the "starts_at" field.
func StartsAtGTE(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldGTE(FieldStartsAt, v))
}

// StartsAtLT applies the LT predicate on the "starts_at" field.
func StartsAtLT(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldLT(FieldStartsAt, v))
}

// StartsAtLTE applies the LTE predicate on the "starts_at" field.
func StartsAtLTE(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldLTE(FieldStartsAt, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldLTE(FieldExpiresAt, v))
}

// PeriodEQ applies the EQ predicate on the "period" field.
func PeriodEQ(v int) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldPeriod, v))
}

// PeriodNEQ applies the NEQ predicate on the "period" field.
func PeriodNEQ(v int) predicate.Credit {
	return predicate.Credit(sql.FieldNEQ(FieldPeriod, v))
}

// PeriodIn applies the In predicate on the "period" field.
func PeriodIn(vs ...int) predicate.Credit {
	return predicate.Credit(sql.FieldIn(FieldPeriod, vs...))
}

// PeriodNotIn applies the NotIn predicate on the "period" field.
func PeriodNotIn(vs ...int) predicate.Credit {
	return predicate.Credit(sql.FieldNotIn(FieldPeriod, vs...))
}

// PeriodGT applies the GT predicate on the "period" field.
func PeriodGT(v int) predicate.Credit {
	return predicate.Credit(sql.FieldGT(FieldPeriod, v))
}

// PeriodGTE applies the GTE predicate on the "period" field.
func PeriodGTE(v int) predicate.Credit {
	return predicate.Credit(sql.FieldGTE(FieldPeriod, v))
}

// PeriodLT applies the LT predicate on the "period" field.
func PeriodLT(v int) predicate.Credit {
	return predicate.Credit(sql.FieldLT(FieldPeriod, v))
}

// PeriodLTE applies the LTE predicate on the "period" field.
func PeriodLTE(v int) predicate.Credit {
	return predicate.Credit(sql.FieldLTE(FieldPeriod, v))
}

// StripeLineItemIDEQ applies the EQ predicate on the "stripe_line_item_id" field.
func StripeLineItemIDEQ(v string) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldStripeLineItemID, v))
}

// StripeLineItemIDNEQ applies the NEQ predicate on the "stripe_line_item_id" field.
func StripeLineItemIDNEQ(v string) predicate.Credit {
	return predicate.Credit(sql.FieldNEQ(FieldStripeLineItemID, v))
}

// StripeLineItemIDIn applies the In predicate on the "stripe_line_item_id" field.
func StripeLineItemIDIn(vs ...string) predicate.Credit {
	return predicate.Credit(sql.FieldIn(FieldStripeLineItemID, vs...))
}

// StripeLineItemIDNotIn applies the NotIn predicate on the "stripe_line_item_id" field.
func StripeLineItemIDNotIn(vs ...string) predicate.Credit {
	return predicate.Credit(sql.FieldNotIn(FieldStripeLineItemID, vs...))
}

// StripeLineItemIDGT applies the GT predicate on the "stripe_line_item_id" field.
func StripeLineItemIDGT(v string) predicate.Credit {
	return predicate.Credit(sql.FieldGT(FieldStripeLineItemID, v))
}

// StripeLineItemIDGTE applies the GTE predicate on the "stripe_line_item_id" field.
func StripeLineItemIDGTE(v string) predicate.Credit {
	return predicate.Credit(sql.FieldGTE(FieldStripeLineItemID, v))
}

// StripeLineItemIDLT applies the LT predicate on the "stripe_line_item_id" field.
func StripeLineItemIDLT(v string) predicate.Credit {
	return predicate.Credit(sql.FieldLT(FieldStripeLineItemID, v))
}

// StripeLineItemIDLTE applies the LTE predicate on the "stripe_line_item_id" field.
func StripeLineItemIDLTE(v string) predicate.Credit {
	return predicate.Credit(sql.FieldLTE(FieldStripeLineItemID, v))
}

// StripeLineItemIDContains applies the Contains predicate on the "stripe_line_item_id" field.
func StripeLineItemIDContains(v string) predicate.Credit {
	return predicate.Credit(sql.FieldContains(FieldStripeLineItemID, v))
}

// StripeLineItemIDHasPrefix applies the HasPrefix predicate on the "stripe_line_item_id" field.
func StripeLineItemIDHasPrefix(v string) predicate.Credit {
	return predicate.Credit(sql.FieldHasPrefix(FieldStripeLineItemID, v))
}

// StripeLineItemIDHasSuffix applies the HasSuffix predicate on the "stripe_line_item_id" field.
func StripeLineItemIDHasSuffix(v string) predicate.Credit {
	return predicate.Credit(sql.FieldHasSuffix(FieldStripeLineItemID, v))
}

// StripeLineItemIDIsNil applies the IsNil predicate on the "stripe_line_item_id" field.
func StripeLineItemIDIsNil() predicate.Credit {
	return predicate.Credit(sql.FieldIsNull(FieldStripeLineItemID))
}

// StripeLineItemIDNotNil applies the NotNil predicate on the "stripe_line_item_id" field.
func StripeLineItemIDNotNil() predicate.Credit {
	return predicate.Credit(sql.FieldNotNull(FieldStripeLineItemID))
}

// StripeLineItemIDEqualFold applies the EqualFold predicate on the "stripe_line_item_id" field.
func StripeLineItemIDEqualFold(v string) predicate.Credit {
	return predicate.Credit(sql.FieldEqualFold(FieldStripeLineItemID, v))
}

// StripeLineItemIDContainsFold applies the ContainsFold predicate on the "stripe_line_item_id" field.
func StripeLineItemIDContainsFold(v string) predicate.Credit {
	return predicate.Credit(sql.FieldContainsFold(FieldStripeLineItemID, v))
}

// ReplenishedAtEQ applies the EQ predicate on the "replenished_at" field.
func ReplenishedAtEQ(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldReplenishedAt, v))
}

// ReplenishedAtNEQ applies the NEQ predicate on the "replenished_at" field.
func ReplenishedAtNEQ(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldNEQ(FieldReplenishedAt, v))
}

// ReplenishedAtIn applies the In predicate on the "replenished_at" field.
func ReplenishedAtIn(vs ...time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldIn(FieldReplenishedAt, vs...))
}

// ReplenishedAtNotIn applies the NotIn predicate on the "replenished_at" field.
func ReplenishedAtNotIn(vs ...time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldNotIn(FieldReplenishedAt, vs...))
}

// ReplenishedAtGT applies the GT predicate on the "replenished_at" field.
func ReplenishedAtGT(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldGT(FieldReplenishedAt, v))
}

// ReplenishedAtGTE applies the GTE predicate on the "replenished_at" field.
func ReplenishedAtGTE(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldGTE(FieldReplenishedAt, v))
}

// ReplenishedAtLT applies the LT predicate on the "replenished_at" field.
func ReplenishedAtLT(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldLT(FieldReplenishedAt, v))
}

// ReplenishedAtLTE applies the LTE predicate on the "replenished_at" field.
func ReplenishedAtLTE(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldLTE(FieldReplenishedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldNotIn(FieldUserID, vs...))
}

// CreditTypeIDEQ applies the EQ predicate on the "credit_type_id" field.
func CreditTypeIDEQ(v uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldCreditTypeID, v))
}

// CreditTypeIDNEQ applies the NEQ predicate on the "credit_type_id" field.
func CreditTypeIDNEQ(v uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldNEQ(FieldCreditTypeID, v))
}

// CreditTypeIDIn applies the In predicate on the "credit_type_id" field.
func CreditTypeIDIn(vs ...uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldIn(FieldCreditTypeID, vs...))
}

// CreditTypeIDNotIn applies the NotIn predicate on the "credit_type_id" field.
func CreditTypeIDNotIn(vs ...uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldNotIn(FieldCreditTypeID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Credit {
	return predicate.Credit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Credit {
	return predicate.Credit(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreditType applies the HasEdge predicate on the "credit_type" edge.
func HasCreditType() predicate.Credit {
	return predicate.Credit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreditTypeTable, CreditTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreditTypeWith applies the HasEdge predicate on the "credit_type" edge with a given conditions (other predicates).
func HasCreditTypeWith(preds ...predicate.CreditType) predicate.Credit {
	return predicate.Credit(func(s *sql.Selector) {
		step := newCreditTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Credit) predicate.Credit {
	return predicate.Credit(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Credit) predicate.Credit {
	return predicate.Credit(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Credit) predicate.Credit {
	return predicate.Credit(sql.NotPredicates(p))
}
