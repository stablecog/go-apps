// Code generated by ent, DO NOT EDIT.

package voiceoveroutput

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldLTE(FieldID, id))
}

// AudioPath applies equality check predicate on the "audio_path" field. It's identical to AudioPathEQ.
func AudioPath(v string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldEQ(FieldAudioPath, v))
}

// VideoPath applies equality check predicate on the "video_path" field. It's identical to VideoPathEQ.
func VideoPath(v string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldEQ(FieldVideoPath, v))
}

// IsFavorited applies equality check predicate on the "is_favorited" field. It's identical to IsFavoritedEQ.
func IsFavorited(v bool) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldEQ(FieldIsFavorited, v))
}

// AudioDuration applies equality check predicate on the "audio_duration" field. It's identical to AudioDurationEQ.
func AudioDuration(v float32) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldEQ(FieldAudioDuration, v))
}

// VoiceoverID applies equality check predicate on the "voiceover_id" field. It's identical to VoiceoverIDEQ.
func VoiceoverID(v uuid.UUID) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldEQ(FieldVoiceoverID, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldEQ(FieldDeletedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldEQ(FieldUpdatedAt, v))
}

// AudioPathEQ applies the EQ predicate on the "audio_path" field.
func AudioPathEQ(v string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldEQ(FieldAudioPath, v))
}

// AudioPathNEQ applies the NEQ predicate on the "audio_path" field.
func AudioPathNEQ(v string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldNEQ(FieldAudioPath, v))
}

// AudioPathIn applies the In predicate on the "audio_path" field.
func AudioPathIn(vs ...string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldIn(FieldAudioPath, vs...))
}

// AudioPathNotIn applies the NotIn predicate on the "audio_path" field.
func AudioPathNotIn(vs ...string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldNotIn(FieldAudioPath, vs...))
}

// AudioPathGT applies the GT predicate on the "audio_path" field.
func AudioPathGT(v string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldGT(FieldAudioPath, v))
}

// AudioPathGTE applies the GTE predicate on the "audio_path" field.
func AudioPathGTE(v string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldGTE(FieldAudioPath, v))
}

// AudioPathLT applies the LT predicate on the "audio_path" field.
func AudioPathLT(v string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldLT(FieldAudioPath, v))
}

// AudioPathLTE applies the LTE predicate on the "audio_path" field.
func AudioPathLTE(v string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldLTE(FieldAudioPath, v))
}

// AudioPathContains applies the Contains predicate on the "audio_path" field.
func AudioPathContains(v string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldContains(FieldAudioPath, v))
}

// AudioPathHasPrefix applies the HasPrefix predicate on the "audio_path" field.
func AudioPathHasPrefix(v string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldHasPrefix(FieldAudioPath, v))
}

// AudioPathHasSuffix applies the HasSuffix predicate on the "audio_path" field.
func AudioPathHasSuffix(v string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldHasSuffix(FieldAudioPath, v))
}

// AudioPathEqualFold applies the EqualFold predicate on the "audio_path" field.
func AudioPathEqualFold(v string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldEqualFold(FieldAudioPath, v))
}

// AudioPathContainsFold applies the ContainsFold predicate on the "audio_path" field.
func AudioPathContainsFold(v string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldContainsFold(FieldAudioPath, v))
}

// VideoPathEQ applies the EQ predicate on the "video_path" field.
func VideoPathEQ(v string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldEQ(FieldVideoPath, v))
}

// VideoPathNEQ applies the NEQ predicate on the "video_path" field.
func VideoPathNEQ(v string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldNEQ(FieldVideoPath, v))
}

// VideoPathIn applies the In predicate on the "video_path" field.
func VideoPathIn(vs ...string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldIn(FieldVideoPath, vs...))
}

// VideoPathNotIn applies the NotIn predicate on the "video_path" field.
func VideoPathNotIn(vs ...string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldNotIn(FieldVideoPath, vs...))
}

// VideoPathGT applies the GT predicate on the "video_path" field.
func VideoPathGT(v string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldGT(FieldVideoPath, v))
}

// VideoPathGTE applies the GTE predicate on the "video_path" field.
func VideoPathGTE(v string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldGTE(FieldVideoPath, v))
}

// VideoPathLT applies the LT predicate on the "video_path" field.
func VideoPathLT(v string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldLT(FieldVideoPath, v))
}

// VideoPathLTE applies the LTE predicate on the "video_path" field.
func VideoPathLTE(v string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldLTE(FieldVideoPath, v))
}

// VideoPathContains applies the Contains predicate on the "video_path" field.
func VideoPathContains(v string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldContains(FieldVideoPath, v))
}

// VideoPathHasPrefix applies the HasPrefix predicate on the "video_path" field.
func VideoPathHasPrefix(v string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldHasPrefix(FieldVideoPath, v))
}

// VideoPathHasSuffix applies the HasSuffix predicate on the "video_path" field.
func VideoPathHasSuffix(v string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldHasSuffix(FieldVideoPath, v))
}

// VideoPathIsNil applies the IsNil predicate on the "video_path" field.
func VideoPathIsNil() predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldIsNull(FieldVideoPath))
}

// VideoPathNotNil applies the NotNil predicate on the "video_path" field.
func VideoPathNotNil() predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldNotNull(FieldVideoPath))
}

// VideoPathEqualFold applies the EqualFold predicate on the "video_path" field.
func VideoPathEqualFold(v string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldEqualFold(FieldVideoPath, v))
}

// VideoPathContainsFold applies the ContainsFold predicate on the "video_path" field.
func VideoPathContainsFold(v string) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldContainsFold(FieldVideoPath, v))
}

// AudioArrayIsNil applies the IsNil predicate on the "audio_array" field.
func AudioArrayIsNil() predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldIsNull(FieldAudioArray))
}

// AudioArrayNotNil applies the NotNil predicate on the "audio_array" field.
func AudioArrayNotNil() predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldNotNull(FieldAudioArray))
}

// IsFavoritedEQ applies the EQ predicate on the "is_favorited" field.
func IsFavoritedEQ(v bool) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldEQ(FieldIsFavorited, v))
}

// IsFavoritedNEQ applies the NEQ predicate on the "is_favorited" field.
func IsFavoritedNEQ(v bool) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldNEQ(FieldIsFavorited, v))
}

// AudioDurationEQ applies the EQ predicate on the "audio_duration" field.
func AudioDurationEQ(v float32) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldEQ(FieldAudioDuration, v))
}

// AudioDurationNEQ applies the NEQ predicate on the "audio_duration" field.
func AudioDurationNEQ(v float32) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldNEQ(FieldAudioDuration, v))
}

// AudioDurationIn applies the In predicate on the "audio_duration" field.
func AudioDurationIn(vs ...float32) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldIn(FieldAudioDuration, vs...))
}

// AudioDurationNotIn applies the NotIn predicate on the "audio_duration" field.
func AudioDurationNotIn(vs ...float32) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldNotIn(FieldAudioDuration, vs...))
}

// AudioDurationGT applies the GT predicate on the "audio_duration" field.
func AudioDurationGT(v float32) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldGT(FieldAudioDuration, v))
}

// AudioDurationGTE applies the GTE predicate on the "audio_duration" field.
func AudioDurationGTE(v float32) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldGTE(FieldAudioDuration, v))
}

// AudioDurationLT applies the LT predicate on the "audio_duration" field.
func AudioDurationLT(v float32) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldLT(FieldAudioDuration, v))
}

// AudioDurationLTE applies the LTE predicate on the "audio_duration" field.
func AudioDurationLTE(v float32) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldLTE(FieldAudioDuration, v))
}

// GalleryStatusEQ applies the EQ predicate on the "gallery_status" field.
func GalleryStatusEQ(v GalleryStatus) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldEQ(FieldGalleryStatus, v))
}

// GalleryStatusNEQ applies the NEQ predicate on the "gallery_status" field.
func GalleryStatusNEQ(v GalleryStatus) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldNEQ(FieldGalleryStatus, v))
}

// GalleryStatusIn applies the In predicate on the "gallery_status" field.
func GalleryStatusIn(vs ...GalleryStatus) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldIn(FieldGalleryStatus, vs...))
}

// GalleryStatusNotIn applies the NotIn predicate on the "gallery_status" field.
func GalleryStatusNotIn(vs ...GalleryStatus) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldNotIn(FieldGalleryStatus, vs...))
}

// VoiceoverIDEQ applies the EQ predicate on the "voiceover_id" field.
func VoiceoverIDEQ(v uuid.UUID) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldEQ(FieldVoiceoverID, v))
}

// VoiceoverIDNEQ applies the NEQ predicate on the "voiceover_id" field.
func VoiceoverIDNEQ(v uuid.UUID) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldNEQ(FieldVoiceoverID, v))
}

// VoiceoverIDIn applies the In predicate on the "voiceover_id" field.
func VoiceoverIDIn(vs ...uuid.UUID) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldIn(FieldVoiceoverID, vs...))
}

// VoiceoverIDNotIn applies the NotIn predicate on the "voiceover_id" field.
func VoiceoverIDNotIn(vs ...uuid.UUID) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldNotIn(FieldVoiceoverID, vs...))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldNotNull(FieldDeletedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasVoiceovers applies the HasEdge predicate on the "voiceovers" edge.
func HasVoiceovers() predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VoiceoversTable, VoiceoversColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVoiceoversWith applies the HasEdge predicate on the "voiceovers" edge with a given conditions (other predicates).
func HasVoiceoversWith(preds ...predicate.Voiceover) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(func(s *sql.Selector) {
		step := newVoiceoversStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VoiceoverOutput) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VoiceoverOutput) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VoiceoverOutput) predicate.VoiceoverOutput {
	return predicate.VoiceoverOutput(sql.NotPredicates(p))
}
