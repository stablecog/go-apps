// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/generation"
	"github.com/stablecog/sc-go/database/ent/generationmodel"
	"github.com/stablecog/sc-go/database/ent/scheduler"
)

// SchedulerCreate is the builder for creating a Scheduler entity.
type SchedulerCreate struct {
	config
	mutation *SchedulerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNameInWorker sets the "name_in_worker" field.
func (sc *SchedulerCreate) SetNameInWorker(s string) *SchedulerCreate {
	sc.mutation.SetNameInWorker(s)
	return sc
}

// SetIsActive sets the "is_active" field.
func (sc *SchedulerCreate) SetIsActive(b bool) *SchedulerCreate {
	sc.mutation.SetIsActive(b)
	return sc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (sc *SchedulerCreate) SetNillableIsActive(b *bool) *SchedulerCreate {
	if b != nil {
		sc.SetIsActive(*b)
	}
	return sc
}

// SetIsDefault sets the "is_default" field.
func (sc *SchedulerCreate) SetIsDefault(b bool) *SchedulerCreate {
	sc.mutation.SetIsDefault(b)
	return sc
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (sc *SchedulerCreate) SetNillableIsDefault(b *bool) *SchedulerCreate {
	if b != nil {
		sc.SetIsDefault(*b)
	}
	return sc
}

// SetIsHidden sets the "is_hidden" field.
func (sc *SchedulerCreate) SetIsHidden(b bool) *SchedulerCreate {
	sc.mutation.SetIsHidden(b)
	return sc
}

// SetNillableIsHidden sets the "is_hidden" field if the given value is not nil.
func (sc *SchedulerCreate) SetNillableIsHidden(b *bool) *SchedulerCreate {
	if b != nil {
		sc.SetIsHidden(*b)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SchedulerCreate) SetCreatedAt(t time.Time) *SchedulerCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SchedulerCreate) SetNillableCreatedAt(t *time.Time) *SchedulerCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SchedulerCreate) SetUpdatedAt(t time.Time) *SchedulerCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SchedulerCreate) SetNillableUpdatedAt(t *time.Time) *SchedulerCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SchedulerCreate) SetID(u uuid.UUID) *SchedulerCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SchedulerCreate) SetNillableID(u *uuid.UUID) *SchedulerCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// AddGenerationIDs adds the "generations" edge to the Generation entity by IDs.
func (sc *SchedulerCreate) AddGenerationIDs(ids ...uuid.UUID) *SchedulerCreate {
	sc.mutation.AddGenerationIDs(ids...)
	return sc
}

// AddGenerations adds the "generations" edges to the Generation entity.
func (sc *SchedulerCreate) AddGenerations(g ...*Generation) *SchedulerCreate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return sc.AddGenerationIDs(ids...)
}

// AddGenerationModelIDs adds the "generation_models" edge to the GenerationModel entity by IDs.
func (sc *SchedulerCreate) AddGenerationModelIDs(ids ...uuid.UUID) *SchedulerCreate {
	sc.mutation.AddGenerationModelIDs(ids...)
	return sc
}

// AddGenerationModels adds the "generation_models" edges to the GenerationModel entity.
func (sc *SchedulerCreate) AddGenerationModels(g ...*GenerationModel) *SchedulerCreate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return sc.AddGenerationModelIDs(ids...)
}

// Mutation returns the SchedulerMutation object of the builder.
func (sc *SchedulerCreate) Mutation() *SchedulerMutation {
	return sc.mutation
}

// Save creates the Scheduler in the database.
func (sc *SchedulerCreate) Save(ctx context.Context) (*Scheduler, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SchedulerCreate) SaveX(ctx context.Context) *Scheduler {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SchedulerCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SchedulerCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SchedulerCreate) defaults() {
	if _, ok := sc.mutation.IsActive(); !ok {
		v := scheduler.DefaultIsActive
		sc.mutation.SetIsActive(v)
	}
	if _, ok := sc.mutation.IsDefault(); !ok {
		v := scheduler.DefaultIsDefault
		sc.mutation.SetIsDefault(v)
	}
	if _, ok := sc.mutation.IsHidden(); !ok {
		v := scheduler.DefaultIsHidden
		sc.mutation.SetIsHidden(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := scheduler.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := scheduler.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := scheduler.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SchedulerCreate) check() error {
	if _, ok := sc.mutation.NameInWorker(); !ok {
		return &ValidationError{Name: "name_in_worker", err: errors.New(`ent: missing required field "Scheduler.name_in_worker"`)}
	}
	if _, ok := sc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Scheduler.is_active"`)}
	}
	if _, ok := sc.mutation.IsDefault(); !ok {
		return &ValidationError{Name: "is_default", err: errors.New(`ent: missing required field "Scheduler.is_default"`)}
	}
	if _, ok := sc.mutation.IsHidden(); !ok {
		return &ValidationError{Name: "is_hidden", err: errors.New(`ent: missing required field "Scheduler.is_hidden"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Scheduler.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Scheduler.updated_at"`)}
	}
	return nil
}

func (sc *SchedulerCreate) sqlSave(ctx context.Context) (*Scheduler, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SchedulerCreate) createSpec() (*Scheduler, *sqlgraph.CreateSpec) {
	var (
		_node = &Scheduler{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(scheduler.Table, sqlgraph.NewFieldSpec(scheduler.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.NameInWorker(); ok {
		_spec.SetField(scheduler.FieldNameInWorker, field.TypeString, value)
		_node.NameInWorker = value
	}
	if value, ok := sc.mutation.IsActive(); ok {
		_spec.SetField(scheduler.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := sc.mutation.IsDefault(); ok {
		_spec.SetField(scheduler.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = value
	}
	if value, ok := sc.mutation.IsHidden(); ok {
		_spec.SetField(scheduler.FieldIsHidden, field.TypeBool, value)
		_node.IsHidden = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(scheduler.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(scheduler.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := sc.mutation.GenerationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scheduler.GenerationsTable,
			Columns: []string{scheduler.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.GenerationModelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scheduler.GenerationModelsTable,
			Columns: scheduler.GenerationModelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generationmodel.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Scheduler.Create().
//		SetNameInWorker(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SchedulerUpsert) {
//			SetNameInWorker(v+v).
//		}).
//		Exec(ctx)
func (sc *SchedulerCreate) OnConflict(opts ...sql.ConflictOption) *SchedulerUpsertOne {
	sc.conflict = opts
	return &SchedulerUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Scheduler.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SchedulerCreate) OnConflictColumns(columns ...string) *SchedulerUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SchedulerUpsertOne{
		create: sc,
	}
}

type (
	// SchedulerUpsertOne is the builder for "upsert"-ing
	//  one Scheduler node.
	SchedulerUpsertOne struct {
		create *SchedulerCreate
	}

	// SchedulerUpsert is the "OnConflict" setter.
	SchedulerUpsert struct {
		*sql.UpdateSet
	}
)

// SetNameInWorker sets the "name_in_worker" field.
func (u *SchedulerUpsert) SetNameInWorker(v string) *SchedulerUpsert {
	u.Set(scheduler.FieldNameInWorker, v)
	return u
}

// UpdateNameInWorker sets the "name_in_worker" field to the value that was provided on create.
func (u *SchedulerUpsert) UpdateNameInWorker() *SchedulerUpsert {
	u.SetExcluded(scheduler.FieldNameInWorker)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *SchedulerUpsert) SetIsActive(v bool) *SchedulerUpsert {
	u.Set(scheduler.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SchedulerUpsert) UpdateIsActive() *SchedulerUpsert {
	u.SetExcluded(scheduler.FieldIsActive)
	return u
}

// SetIsDefault sets the "is_default" field.
func (u *SchedulerUpsert) SetIsDefault(v bool) *SchedulerUpsert {
	u.Set(scheduler.FieldIsDefault, v)
	return u
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *SchedulerUpsert) UpdateIsDefault() *SchedulerUpsert {
	u.SetExcluded(scheduler.FieldIsDefault)
	return u
}

// SetIsHidden sets the "is_hidden" field.
func (u *SchedulerUpsert) SetIsHidden(v bool) *SchedulerUpsert {
	u.Set(scheduler.FieldIsHidden, v)
	return u
}

// UpdateIsHidden sets the "is_hidden" field to the value that was provided on create.
func (u *SchedulerUpsert) UpdateIsHidden() *SchedulerUpsert {
	u.SetExcluded(scheduler.FieldIsHidden)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SchedulerUpsert) SetUpdatedAt(v time.Time) *SchedulerUpsert {
	u.Set(scheduler.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SchedulerUpsert) UpdateUpdatedAt() *SchedulerUpsert {
	u.SetExcluded(scheduler.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Scheduler.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(scheduler.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SchedulerUpsertOne) UpdateNewValues() *SchedulerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(scheduler.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(scheduler.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Scheduler.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SchedulerUpsertOne) Ignore() *SchedulerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SchedulerUpsertOne) DoNothing() *SchedulerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SchedulerCreate.OnConflict
// documentation for more info.
func (u *SchedulerUpsertOne) Update(set func(*SchedulerUpsert)) *SchedulerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SchedulerUpsert{UpdateSet: update})
	}))
	return u
}

// SetNameInWorker sets the "name_in_worker" field.
func (u *SchedulerUpsertOne) SetNameInWorker(v string) *SchedulerUpsertOne {
	return u.Update(func(s *SchedulerUpsert) {
		s.SetNameInWorker(v)
	})
}

// UpdateNameInWorker sets the "name_in_worker" field to the value that was provided on create.
func (u *SchedulerUpsertOne) UpdateNameInWorker() *SchedulerUpsertOne {
	return u.Update(func(s *SchedulerUpsert) {
		s.UpdateNameInWorker()
	})
}

// SetIsActive sets the "is_active" field.
func (u *SchedulerUpsertOne) SetIsActive(v bool) *SchedulerUpsertOne {
	return u.Update(func(s *SchedulerUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SchedulerUpsertOne) UpdateIsActive() *SchedulerUpsertOne {
	return u.Update(func(s *SchedulerUpsert) {
		s.UpdateIsActive()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *SchedulerUpsertOne) SetIsDefault(v bool) *SchedulerUpsertOne {
	return u.Update(func(s *SchedulerUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *SchedulerUpsertOne) UpdateIsDefault() *SchedulerUpsertOne {
	return u.Update(func(s *SchedulerUpsert) {
		s.UpdateIsDefault()
	})
}

// SetIsHidden sets the "is_hidden" field.
func (u *SchedulerUpsertOne) SetIsHidden(v bool) *SchedulerUpsertOne {
	return u.Update(func(s *SchedulerUpsert) {
		s.SetIsHidden(v)
	})
}

// UpdateIsHidden sets the "is_hidden" field to the value that was provided on create.
func (u *SchedulerUpsertOne) UpdateIsHidden() *SchedulerUpsertOne {
	return u.Update(func(s *SchedulerUpsert) {
		s.UpdateIsHidden()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SchedulerUpsertOne) SetUpdatedAt(v time.Time) *SchedulerUpsertOne {
	return u.Update(func(s *SchedulerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SchedulerUpsertOne) UpdateUpdatedAt() *SchedulerUpsertOne {
	return u.Update(func(s *SchedulerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *SchedulerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SchedulerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SchedulerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SchedulerUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SchedulerUpsertOne.ID is not supported by MySQL driver. Use SchedulerUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SchedulerUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SchedulerCreateBulk is the builder for creating many Scheduler entities in bulk.
type SchedulerCreateBulk struct {
	config
	err      error
	builders []*SchedulerCreate
	conflict []sql.ConflictOption
}

// Save creates the Scheduler entities in the database.
func (scb *SchedulerCreateBulk) Save(ctx context.Context) ([]*Scheduler, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Scheduler, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SchedulerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SchedulerCreateBulk) SaveX(ctx context.Context) []*Scheduler {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SchedulerCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SchedulerCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Scheduler.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SchedulerUpsert) {
//			SetNameInWorker(v+v).
//		}).
//		Exec(ctx)
func (scb *SchedulerCreateBulk) OnConflict(opts ...sql.ConflictOption) *SchedulerUpsertBulk {
	scb.conflict = opts
	return &SchedulerUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Scheduler.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SchedulerCreateBulk) OnConflictColumns(columns ...string) *SchedulerUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SchedulerUpsertBulk{
		create: scb,
	}
}

// SchedulerUpsertBulk is the builder for "upsert"-ing
// a bulk of Scheduler nodes.
type SchedulerUpsertBulk struct {
	create *SchedulerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Scheduler.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(scheduler.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SchedulerUpsertBulk) UpdateNewValues() *SchedulerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(scheduler.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(scheduler.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Scheduler.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SchedulerUpsertBulk) Ignore() *SchedulerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SchedulerUpsertBulk) DoNothing() *SchedulerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SchedulerCreateBulk.OnConflict
// documentation for more info.
func (u *SchedulerUpsertBulk) Update(set func(*SchedulerUpsert)) *SchedulerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SchedulerUpsert{UpdateSet: update})
	}))
	return u
}

// SetNameInWorker sets the "name_in_worker" field.
func (u *SchedulerUpsertBulk) SetNameInWorker(v string) *SchedulerUpsertBulk {
	return u.Update(func(s *SchedulerUpsert) {
		s.SetNameInWorker(v)
	})
}

// UpdateNameInWorker sets the "name_in_worker" field to the value that was provided on create.
func (u *SchedulerUpsertBulk) UpdateNameInWorker() *SchedulerUpsertBulk {
	return u.Update(func(s *SchedulerUpsert) {
		s.UpdateNameInWorker()
	})
}

// SetIsActive sets the "is_active" field.
func (u *SchedulerUpsertBulk) SetIsActive(v bool) *SchedulerUpsertBulk {
	return u.Update(func(s *SchedulerUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SchedulerUpsertBulk) UpdateIsActive() *SchedulerUpsertBulk {
	return u.Update(func(s *SchedulerUpsert) {
		s.UpdateIsActive()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *SchedulerUpsertBulk) SetIsDefault(v bool) *SchedulerUpsertBulk {
	return u.Update(func(s *SchedulerUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *SchedulerUpsertBulk) UpdateIsDefault() *SchedulerUpsertBulk {
	return u.Update(func(s *SchedulerUpsert) {
		s.UpdateIsDefault()
	})
}

// SetIsHidden sets the "is_hidden" field.
func (u *SchedulerUpsertBulk) SetIsHidden(v bool) *SchedulerUpsertBulk {
	return u.Update(func(s *SchedulerUpsert) {
		s.SetIsHidden(v)
	})
}

// UpdateIsHidden sets the "is_hidden" field to the value that was provided on create.
func (u *SchedulerUpsertBulk) UpdateIsHidden() *SchedulerUpsertBulk {
	return u.Update(func(s *SchedulerUpsert) {
		s.UpdateIsHidden()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SchedulerUpsertBulk) SetUpdatedAt(v time.Time) *SchedulerUpsertBulk {
	return u.Update(func(s *SchedulerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SchedulerUpsertBulk) UpdateUpdatedAt() *SchedulerUpsertBulk {
	return u.Update(func(s *SchedulerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *SchedulerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SchedulerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SchedulerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SchedulerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
