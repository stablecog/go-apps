// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/generation"
	"github.com/stablecog/sc-go/database/ent/generationmodel"
	"github.com/stablecog/sc-go/database/ent/predicate"
	"github.com/stablecog/sc-go/database/ent/scheduler"
)

// GenerationModelQuery is the builder for querying GenerationModel entities.
type GenerationModelQuery struct {
	config
	ctx             *QueryContext
	order           []generationmodel.OrderOption
	inters          []Interceptor
	predicates      []predicate.GenerationModel
	withGenerations *GenerationQuery
	withSchedulers  *SchedulerQuery
	modifiers       []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GenerationModelQuery builder.
func (gmq *GenerationModelQuery) Where(ps ...predicate.GenerationModel) *GenerationModelQuery {
	gmq.predicates = append(gmq.predicates, ps...)
	return gmq
}

// Limit the number of records to be returned by this query.
func (gmq *GenerationModelQuery) Limit(limit int) *GenerationModelQuery {
	gmq.ctx.Limit = &limit
	return gmq
}

// Offset to start from.
func (gmq *GenerationModelQuery) Offset(offset int) *GenerationModelQuery {
	gmq.ctx.Offset = &offset
	return gmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gmq *GenerationModelQuery) Unique(unique bool) *GenerationModelQuery {
	gmq.ctx.Unique = &unique
	return gmq
}

// Order specifies how the records should be ordered.
func (gmq *GenerationModelQuery) Order(o ...generationmodel.OrderOption) *GenerationModelQuery {
	gmq.order = append(gmq.order, o...)
	return gmq
}

// QueryGenerations chains the current query on the "generations" edge.
func (gmq *GenerationModelQuery) QueryGenerations() *GenerationQuery {
	query := (&GenerationClient{config: gmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(generationmodel.Table, generationmodel.FieldID, selector),
			sqlgraph.To(generation.Table, generation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, generationmodel.GenerationsTable, generationmodel.GenerationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(gmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySchedulers chains the current query on the "schedulers" edge.
func (gmq *GenerationModelQuery) QuerySchedulers() *SchedulerQuery {
	query := (&SchedulerClient{config: gmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(generationmodel.Table, generationmodel.FieldID, selector),
			sqlgraph.To(scheduler.Table, scheduler.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, generationmodel.SchedulersTable, generationmodel.SchedulersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(gmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GenerationModel entity from the query.
// Returns a *NotFoundError when no GenerationModel was found.
func (gmq *GenerationModelQuery) First(ctx context.Context) (*GenerationModel, error) {
	nodes, err := gmq.Limit(1).All(setContextOp(ctx, gmq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{generationmodel.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gmq *GenerationModelQuery) FirstX(ctx context.Context) *GenerationModel {
	node, err := gmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GenerationModel ID from the query.
// Returns a *NotFoundError when no GenerationModel ID was found.
func (gmq *GenerationModelQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = gmq.Limit(1).IDs(setContextOp(ctx, gmq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{generationmodel.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gmq *GenerationModelQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := gmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GenerationModel entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GenerationModel entity is found.
// Returns a *NotFoundError when no GenerationModel entities are found.
func (gmq *GenerationModelQuery) Only(ctx context.Context) (*GenerationModel, error) {
	nodes, err := gmq.Limit(2).All(setContextOp(ctx, gmq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{generationmodel.Label}
	default:
		return nil, &NotSingularError{generationmodel.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gmq *GenerationModelQuery) OnlyX(ctx context.Context) *GenerationModel {
	node, err := gmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GenerationModel ID in the query.
// Returns a *NotSingularError when more than one GenerationModel ID is found.
// Returns a *NotFoundError when no entities are found.
func (gmq *GenerationModelQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = gmq.Limit(2).IDs(setContextOp(ctx, gmq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{generationmodel.Label}
	default:
		err = &NotSingularError{generationmodel.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gmq *GenerationModelQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := gmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GenerationModels.
func (gmq *GenerationModelQuery) All(ctx context.Context) ([]*GenerationModel, error) {
	ctx = setContextOp(ctx, gmq.ctx, ent.OpQueryAll)
	if err := gmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*GenerationModel, *GenerationModelQuery]()
	return withInterceptors[[]*GenerationModel](ctx, gmq, qr, gmq.inters)
}

// AllX is like All, but panics if an error occurs.
func (gmq *GenerationModelQuery) AllX(ctx context.Context) []*GenerationModel {
	nodes, err := gmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GenerationModel IDs.
func (gmq *GenerationModelQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if gmq.ctx.Unique == nil && gmq.path != nil {
		gmq.Unique(true)
	}
	ctx = setContextOp(ctx, gmq.ctx, ent.OpQueryIDs)
	if err = gmq.Select(generationmodel.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gmq *GenerationModelQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := gmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gmq *GenerationModelQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, gmq.ctx, ent.OpQueryCount)
	if err := gmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, gmq, querierCount[*GenerationModelQuery](), gmq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (gmq *GenerationModelQuery) CountX(ctx context.Context) int {
	count, err := gmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gmq *GenerationModelQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, gmq.ctx, ent.OpQueryExist)
	switch _, err := gmq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (gmq *GenerationModelQuery) ExistX(ctx context.Context) bool {
	exist, err := gmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GenerationModelQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gmq *GenerationModelQuery) Clone() *GenerationModelQuery {
	if gmq == nil {
		return nil
	}
	return &GenerationModelQuery{
		config:          gmq.config,
		ctx:             gmq.ctx.Clone(),
		order:           append([]generationmodel.OrderOption{}, gmq.order...),
		inters:          append([]Interceptor{}, gmq.inters...),
		predicates:      append([]predicate.GenerationModel{}, gmq.predicates...),
		withGenerations: gmq.withGenerations.Clone(),
		withSchedulers:  gmq.withSchedulers.Clone(),
		// clone intermediate query.
		sql:  gmq.sql.Clone(),
		path: gmq.path,
	}
}

// WithGenerations tells the query-builder to eager-load the nodes that are connected to
// the "generations" edge. The optional arguments are used to configure the query builder of the edge.
func (gmq *GenerationModelQuery) WithGenerations(opts ...func(*GenerationQuery)) *GenerationModelQuery {
	query := (&GenerationClient{config: gmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gmq.withGenerations = query
	return gmq
}

// WithSchedulers tells the query-builder to eager-load the nodes that are connected to
// the "schedulers" edge. The optional arguments are used to configure the query builder of the edge.
func (gmq *GenerationModelQuery) WithSchedulers(opts ...func(*SchedulerQuery)) *GenerationModelQuery {
	query := (&SchedulerClient{config: gmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gmq.withSchedulers = query
	return gmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		NameInWorker string `json:"name_in_worker,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GenerationModel.Query().
//		GroupBy(generationmodel.FieldNameInWorker).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (gmq *GenerationModelQuery) GroupBy(field string, fields ...string) *GenerationModelGroupBy {
	gmq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GenerationModelGroupBy{build: gmq}
	grbuild.flds = &gmq.ctx.Fields
	grbuild.label = generationmodel.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		NameInWorker string `json:"name_in_worker,omitempty"`
//	}
//
//	client.GenerationModel.Query().
//		Select(generationmodel.FieldNameInWorker).
//		Scan(ctx, &v)
func (gmq *GenerationModelQuery) Select(fields ...string) *GenerationModelSelect {
	gmq.ctx.Fields = append(gmq.ctx.Fields, fields...)
	sbuild := &GenerationModelSelect{GenerationModelQuery: gmq}
	sbuild.label = generationmodel.Label
	sbuild.flds, sbuild.scan = &gmq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GenerationModelSelect configured with the given aggregations.
func (gmq *GenerationModelQuery) Aggregate(fns ...AggregateFunc) *GenerationModelSelect {
	return gmq.Select().Aggregate(fns...)
}

func (gmq *GenerationModelQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range gmq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, gmq); err != nil {
				return err
			}
		}
	}
	for _, f := range gmq.ctx.Fields {
		if !generationmodel.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gmq.path != nil {
		prev, err := gmq.path(ctx)
		if err != nil {
			return err
		}
		gmq.sql = prev
	}
	return nil
}

func (gmq *GenerationModelQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GenerationModel, error) {
	var (
		nodes       = []*GenerationModel{}
		_spec       = gmq.querySpec()
		loadedTypes = [2]bool{
			gmq.withGenerations != nil,
			gmq.withSchedulers != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GenerationModel).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GenerationModel{config: gmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(gmq.modifiers) > 0 {
		_spec.Modifiers = gmq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gmq.withGenerations; query != nil {
		if err := gmq.loadGenerations(ctx, query, nodes,
			func(n *GenerationModel) { n.Edges.Generations = []*Generation{} },
			func(n *GenerationModel, e *Generation) { n.Edges.Generations = append(n.Edges.Generations, e) }); err != nil {
			return nil, err
		}
	}
	if query := gmq.withSchedulers; query != nil {
		if err := gmq.loadSchedulers(ctx, query, nodes,
			func(n *GenerationModel) { n.Edges.Schedulers = []*Scheduler{} },
			func(n *GenerationModel, e *Scheduler) { n.Edges.Schedulers = append(n.Edges.Schedulers, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gmq *GenerationModelQuery) loadGenerations(ctx context.Context, query *GenerationQuery, nodes []*GenerationModel, init func(*GenerationModel), assign func(*GenerationModel, *Generation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*GenerationModel)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(generation.FieldModelID)
	}
	query.Where(predicate.Generation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(generationmodel.GenerationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ModelID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "model_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (gmq *GenerationModelQuery) loadSchedulers(ctx context.Context, query *SchedulerQuery, nodes []*GenerationModel, init func(*GenerationModel), assign func(*GenerationModel, *Scheduler)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*GenerationModel)
	nids := make(map[uuid.UUID]map[*GenerationModel]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(generationmodel.SchedulersTable)
		s.Join(joinT).On(s.C(scheduler.FieldID), joinT.C(generationmodel.SchedulersPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(generationmodel.SchedulersPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(generationmodel.SchedulersPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*GenerationModel]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Scheduler](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "schedulers" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (gmq *GenerationModelQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gmq.querySpec()
	if len(gmq.modifiers) > 0 {
		_spec.Modifiers = gmq.modifiers
	}
	_spec.Node.Columns = gmq.ctx.Fields
	if len(gmq.ctx.Fields) > 0 {
		_spec.Unique = gmq.ctx.Unique != nil && *gmq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, gmq.driver, _spec)
}

func (gmq *GenerationModelQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(generationmodel.Table, generationmodel.Columns, sqlgraph.NewFieldSpec(generationmodel.FieldID, field.TypeUUID))
	_spec.From = gmq.sql
	if unique := gmq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if gmq.path != nil {
		_spec.Unique = true
	}
	if fields := gmq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, generationmodel.FieldID)
		for i := range fields {
			if fields[i] != generationmodel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gmq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gmq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gmq *GenerationModelQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gmq.driver.Dialect())
	t1 := builder.Table(generationmodel.Table)
	columns := gmq.ctx.Fields
	if len(columns) == 0 {
		columns = generationmodel.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gmq.sql != nil {
		selector = gmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gmq.ctx.Unique != nil && *gmq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range gmq.modifiers {
		m(selector)
	}
	for _, p := range gmq.predicates {
		p(selector)
	}
	for _, p := range gmq.order {
		p(selector)
	}
	if offset := gmq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gmq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (gmq *GenerationModelQuery) Modify(modifiers ...func(s *sql.Selector)) *GenerationModelSelect {
	gmq.modifiers = append(gmq.modifiers, modifiers...)
	return gmq.Select()
}

// GenerationModelGroupBy is the group-by builder for GenerationModel entities.
type GenerationModelGroupBy struct {
	selector
	build *GenerationModelQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gmgb *GenerationModelGroupBy) Aggregate(fns ...AggregateFunc) *GenerationModelGroupBy {
	gmgb.fns = append(gmgb.fns, fns...)
	return gmgb
}

// Scan applies the selector query and scans the result into the given value.
func (gmgb *GenerationModelGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gmgb.build.ctx, ent.OpQueryGroupBy)
	if err := gmgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GenerationModelQuery, *GenerationModelGroupBy](ctx, gmgb.build, gmgb, gmgb.build.inters, v)
}

func (gmgb *GenerationModelGroupBy) sqlScan(ctx context.Context, root *GenerationModelQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(gmgb.fns))
	for _, fn := range gmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*gmgb.flds)+len(gmgb.fns))
		for _, f := range *gmgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*gmgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gmgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GenerationModelSelect is the builder for selecting fields of GenerationModel entities.
type GenerationModelSelect struct {
	*GenerationModelQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gms *GenerationModelSelect) Aggregate(fns ...AggregateFunc) *GenerationModelSelect {
	gms.fns = append(gms.fns, fns...)
	return gms
}

// Scan applies the selector query and scans the result into the given value.
func (gms *GenerationModelSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gms.ctx, ent.OpQuerySelect)
	if err := gms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GenerationModelQuery, *GenerationModelSelect](ctx, gms.GenerationModelQuery, gms, gms.inters, v)
}

func (gms *GenerationModelSelect) sqlScan(ctx context.Context, root *GenerationModelQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(gms.fns))
	for _, fn := range gms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*gms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (gms *GenerationModelSelect) Modify(modifiers ...func(s *sql.Selector)) *GenerationModelSelect {
	gms.modifiers = append(gms.modifiers, modifiers...)
	return gms
}
