// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/bannedwords"
)

// BannedWordsCreate is the builder for creating a BannedWords entity.
type BannedWordsCreate struct {
	config
	mutation *BannedWordsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetWords sets the "words" field.
func (bwc *BannedWordsCreate) SetWords(s []string) *BannedWordsCreate {
	bwc.mutation.SetWords(s)
	return bwc
}

// SetReason sets the "reason" field.
func (bwc *BannedWordsCreate) SetReason(s string) *BannedWordsCreate {
	bwc.mutation.SetReason(s)
	return bwc
}

// SetSplitMatch sets the "split_match" field.
func (bwc *BannedWordsCreate) SetSplitMatch(b bool) *BannedWordsCreate {
	bwc.mutation.SetSplitMatch(b)
	return bwc
}

// SetNillableSplitMatch sets the "split_match" field if the given value is not nil.
func (bwc *BannedWordsCreate) SetNillableSplitMatch(b *bool) *BannedWordsCreate {
	if b != nil {
		bwc.SetSplitMatch(*b)
	}
	return bwc
}

// SetCreatedAt sets the "created_at" field.
func (bwc *BannedWordsCreate) SetCreatedAt(t time.Time) *BannedWordsCreate {
	bwc.mutation.SetCreatedAt(t)
	return bwc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bwc *BannedWordsCreate) SetNillableCreatedAt(t *time.Time) *BannedWordsCreate {
	if t != nil {
		bwc.SetCreatedAt(*t)
	}
	return bwc
}

// SetUpdatedAt sets the "updated_at" field.
func (bwc *BannedWordsCreate) SetUpdatedAt(t time.Time) *BannedWordsCreate {
	bwc.mutation.SetUpdatedAt(t)
	return bwc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bwc *BannedWordsCreate) SetNillableUpdatedAt(t *time.Time) *BannedWordsCreate {
	if t != nil {
		bwc.SetUpdatedAt(*t)
	}
	return bwc
}

// SetID sets the "id" field.
func (bwc *BannedWordsCreate) SetID(u uuid.UUID) *BannedWordsCreate {
	bwc.mutation.SetID(u)
	return bwc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bwc *BannedWordsCreate) SetNillableID(u *uuid.UUID) *BannedWordsCreate {
	if u != nil {
		bwc.SetID(*u)
	}
	return bwc
}

// Mutation returns the BannedWordsMutation object of the builder.
func (bwc *BannedWordsCreate) Mutation() *BannedWordsMutation {
	return bwc.mutation
}

// Save creates the BannedWords in the database.
func (bwc *BannedWordsCreate) Save(ctx context.Context) (*BannedWords, error) {
	bwc.defaults()
	return withHooks(ctx, bwc.sqlSave, bwc.mutation, bwc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bwc *BannedWordsCreate) SaveX(ctx context.Context) *BannedWords {
	v, err := bwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bwc *BannedWordsCreate) Exec(ctx context.Context) error {
	_, err := bwc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bwc *BannedWordsCreate) ExecX(ctx context.Context) {
	if err := bwc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bwc *BannedWordsCreate) defaults() {
	if _, ok := bwc.mutation.SplitMatch(); !ok {
		v := bannedwords.DefaultSplitMatch
		bwc.mutation.SetSplitMatch(v)
	}
	if _, ok := bwc.mutation.CreatedAt(); !ok {
		v := bannedwords.DefaultCreatedAt()
		bwc.mutation.SetCreatedAt(v)
	}
	if _, ok := bwc.mutation.UpdatedAt(); !ok {
		v := bannedwords.DefaultUpdatedAt()
		bwc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bwc.mutation.ID(); !ok {
		v := bannedwords.DefaultID()
		bwc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bwc *BannedWordsCreate) check() error {
	if _, ok := bwc.mutation.Words(); !ok {
		return &ValidationError{Name: "words", err: errors.New(`ent: missing required field "BannedWords.words"`)}
	}
	if _, ok := bwc.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`ent: missing required field "BannedWords.reason"`)}
	}
	if _, ok := bwc.mutation.SplitMatch(); !ok {
		return &ValidationError{Name: "split_match", err: errors.New(`ent: missing required field "BannedWords.split_match"`)}
	}
	if _, ok := bwc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BannedWords.created_at"`)}
	}
	if _, ok := bwc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BannedWords.updated_at"`)}
	}
	return nil
}

func (bwc *BannedWordsCreate) sqlSave(ctx context.Context) (*BannedWords, error) {
	if err := bwc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bwc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bwc.mutation.id = &_node.ID
	bwc.mutation.done = true
	return _node, nil
}

func (bwc *BannedWordsCreate) createSpec() (*BannedWords, *sqlgraph.CreateSpec) {
	var (
		_node = &BannedWords{config: bwc.config}
		_spec = sqlgraph.NewCreateSpec(bannedwords.Table, sqlgraph.NewFieldSpec(bannedwords.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = bwc.conflict
	if id, ok := bwc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bwc.mutation.Words(); ok {
		_spec.SetField(bannedwords.FieldWords, field.TypeJSON, value)
		_node.Words = value
	}
	if value, ok := bwc.mutation.Reason(); ok {
		_spec.SetField(bannedwords.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := bwc.mutation.SplitMatch(); ok {
		_spec.SetField(bannedwords.FieldSplitMatch, field.TypeBool, value)
		_node.SplitMatch = value
	}
	if value, ok := bwc.mutation.CreatedAt(); ok {
		_spec.SetField(bannedwords.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bwc.mutation.UpdatedAt(); ok {
		_spec.SetField(bannedwords.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BannedWords.Create().
//		SetWords(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BannedWordsUpsert) {
//			SetWords(v+v).
//		}).
//		Exec(ctx)
func (bwc *BannedWordsCreate) OnConflict(opts ...sql.ConflictOption) *BannedWordsUpsertOne {
	bwc.conflict = opts
	return &BannedWordsUpsertOne{
		create: bwc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BannedWords.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bwc *BannedWordsCreate) OnConflictColumns(columns ...string) *BannedWordsUpsertOne {
	bwc.conflict = append(bwc.conflict, sql.ConflictColumns(columns...))
	return &BannedWordsUpsertOne{
		create: bwc,
	}
}

type (
	// BannedWordsUpsertOne is the builder for "upsert"-ing
	//  one BannedWords node.
	BannedWordsUpsertOne struct {
		create *BannedWordsCreate
	}

	// BannedWordsUpsert is the "OnConflict" setter.
	BannedWordsUpsert struct {
		*sql.UpdateSet
	}
)

// SetWords sets the "words" field.
func (u *BannedWordsUpsert) SetWords(v []string) *BannedWordsUpsert {
	u.Set(bannedwords.FieldWords, v)
	return u
}

// UpdateWords sets the "words" field to the value that was provided on create.
func (u *BannedWordsUpsert) UpdateWords() *BannedWordsUpsert {
	u.SetExcluded(bannedwords.FieldWords)
	return u
}

// SetReason sets the "reason" field.
func (u *BannedWordsUpsert) SetReason(v string) *BannedWordsUpsert {
	u.Set(bannedwords.FieldReason, v)
	return u
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *BannedWordsUpsert) UpdateReason() *BannedWordsUpsert {
	u.SetExcluded(bannedwords.FieldReason)
	return u
}

// SetSplitMatch sets the "split_match" field.
func (u *BannedWordsUpsert) SetSplitMatch(v bool) *BannedWordsUpsert {
	u.Set(bannedwords.FieldSplitMatch, v)
	return u
}

// UpdateSplitMatch sets the "split_match" field to the value that was provided on create.
func (u *BannedWordsUpsert) UpdateSplitMatch() *BannedWordsUpsert {
	u.SetExcluded(bannedwords.FieldSplitMatch)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BannedWordsUpsert) SetUpdatedAt(v time.Time) *BannedWordsUpsert {
	u.Set(bannedwords.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BannedWordsUpsert) UpdateUpdatedAt() *BannedWordsUpsert {
	u.SetExcluded(bannedwords.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BannedWords.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(bannedwords.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BannedWordsUpsertOne) UpdateNewValues() *BannedWordsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(bannedwords.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(bannedwords.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BannedWords.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BannedWordsUpsertOne) Ignore() *BannedWordsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BannedWordsUpsertOne) DoNothing() *BannedWordsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BannedWordsCreate.OnConflict
// documentation for more info.
func (u *BannedWordsUpsertOne) Update(set func(*BannedWordsUpsert)) *BannedWordsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BannedWordsUpsert{UpdateSet: update})
	}))
	return u
}

// SetWords sets the "words" field.
func (u *BannedWordsUpsertOne) SetWords(v []string) *BannedWordsUpsertOne {
	return u.Update(func(s *BannedWordsUpsert) {
		s.SetWords(v)
	})
}

// UpdateWords sets the "words" field to the value that was provided on create.
func (u *BannedWordsUpsertOne) UpdateWords() *BannedWordsUpsertOne {
	return u.Update(func(s *BannedWordsUpsert) {
		s.UpdateWords()
	})
}

// SetReason sets the "reason" field.
func (u *BannedWordsUpsertOne) SetReason(v string) *BannedWordsUpsertOne {
	return u.Update(func(s *BannedWordsUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *BannedWordsUpsertOne) UpdateReason() *BannedWordsUpsertOne {
	return u.Update(func(s *BannedWordsUpsert) {
		s.UpdateReason()
	})
}

// SetSplitMatch sets the "split_match" field.
func (u *BannedWordsUpsertOne) SetSplitMatch(v bool) *BannedWordsUpsertOne {
	return u.Update(func(s *BannedWordsUpsert) {
		s.SetSplitMatch(v)
	})
}

// UpdateSplitMatch sets the "split_match" field to the value that was provided on create.
func (u *BannedWordsUpsertOne) UpdateSplitMatch() *BannedWordsUpsertOne {
	return u.Update(func(s *BannedWordsUpsert) {
		s.UpdateSplitMatch()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BannedWordsUpsertOne) SetUpdatedAt(v time.Time) *BannedWordsUpsertOne {
	return u.Update(func(s *BannedWordsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BannedWordsUpsertOne) UpdateUpdatedAt() *BannedWordsUpsertOne {
	return u.Update(func(s *BannedWordsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BannedWordsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BannedWordsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BannedWordsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BannedWordsUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: BannedWordsUpsertOne.ID is not supported by MySQL driver. Use BannedWordsUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BannedWordsUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BannedWordsCreateBulk is the builder for creating many BannedWords entities in bulk.
type BannedWordsCreateBulk struct {
	config
	err      error
	builders []*BannedWordsCreate
	conflict []sql.ConflictOption
}

// Save creates the BannedWords entities in the database.
func (bwcb *BannedWordsCreateBulk) Save(ctx context.Context) ([]*BannedWords, error) {
	if bwcb.err != nil {
		return nil, bwcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bwcb.builders))
	nodes := make([]*BannedWords, len(bwcb.builders))
	mutators := make([]Mutator, len(bwcb.builders))
	for i := range bwcb.builders {
		func(i int, root context.Context) {
			builder := bwcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BannedWordsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bwcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bwcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bwcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bwcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bwcb *BannedWordsCreateBulk) SaveX(ctx context.Context) []*BannedWords {
	v, err := bwcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bwcb *BannedWordsCreateBulk) Exec(ctx context.Context) error {
	_, err := bwcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bwcb *BannedWordsCreateBulk) ExecX(ctx context.Context) {
	if err := bwcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BannedWords.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BannedWordsUpsert) {
//			SetWords(v+v).
//		}).
//		Exec(ctx)
func (bwcb *BannedWordsCreateBulk) OnConflict(opts ...sql.ConflictOption) *BannedWordsUpsertBulk {
	bwcb.conflict = opts
	return &BannedWordsUpsertBulk{
		create: bwcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BannedWords.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bwcb *BannedWordsCreateBulk) OnConflictColumns(columns ...string) *BannedWordsUpsertBulk {
	bwcb.conflict = append(bwcb.conflict, sql.ConflictColumns(columns...))
	return &BannedWordsUpsertBulk{
		create: bwcb,
	}
}

// BannedWordsUpsertBulk is the builder for "upsert"-ing
// a bulk of BannedWords nodes.
type BannedWordsUpsertBulk struct {
	create *BannedWordsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BannedWords.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(bannedwords.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BannedWordsUpsertBulk) UpdateNewValues() *BannedWordsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(bannedwords.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(bannedwords.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BannedWords.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BannedWordsUpsertBulk) Ignore() *BannedWordsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BannedWordsUpsertBulk) DoNothing() *BannedWordsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BannedWordsCreateBulk.OnConflict
// documentation for more info.
func (u *BannedWordsUpsertBulk) Update(set func(*BannedWordsUpsert)) *BannedWordsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BannedWordsUpsert{UpdateSet: update})
	}))
	return u
}

// SetWords sets the "words" field.
func (u *BannedWordsUpsertBulk) SetWords(v []string) *BannedWordsUpsertBulk {
	return u.Update(func(s *BannedWordsUpsert) {
		s.SetWords(v)
	})
}

// UpdateWords sets the "words" field to the value that was provided on create.
func (u *BannedWordsUpsertBulk) UpdateWords() *BannedWordsUpsertBulk {
	return u.Update(func(s *BannedWordsUpsert) {
		s.UpdateWords()
	})
}

// SetReason sets the "reason" field.
func (u *BannedWordsUpsertBulk) SetReason(v string) *BannedWordsUpsertBulk {
	return u.Update(func(s *BannedWordsUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *BannedWordsUpsertBulk) UpdateReason() *BannedWordsUpsertBulk {
	return u.Update(func(s *BannedWordsUpsert) {
		s.UpdateReason()
	})
}

// SetSplitMatch sets the "split_match" field.
func (u *BannedWordsUpsertBulk) SetSplitMatch(v bool) *BannedWordsUpsertBulk {
	return u.Update(func(s *BannedWordsUpsert) {
		s.SetSplitMatch(v)
	})
}

// UpdateSplitMatch sets the "split_match" field to the value that was provided on create.
func (u *BannedWordsUpsertBulk) UpdateSplitMatch() *BannedWordsUpsertBulk {
	return u.Update(func(s *BannedWordsUpsert) {
		s.UpdateSplitMatch()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BannedWordsUpsertBulk) SetUpdatedAt(v time.Time) *BannedWordsUpsertBulk {
	return u.Update(func(s *BannedWordsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BannedWordsUpsertBulk) UpdateUpdatedAt() *BannedWordsUpsertBulk {
	return u.Update(func(s *BannedWordsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BannedWordsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BannedWordsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BannedWordsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BannedWordsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
