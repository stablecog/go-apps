// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/predicate"
	"github.com/stablecog/sc-go/database/ent/tiplog"
	"github.com/stablecog/sc-go/database/ent/user"
)

// TipLogUpdate is the builder for updating TipLog entities.
type TipLogUpdate struct {
	config
	hooks     []Hook
	mutation  *TipLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TipLogUpdate builder.
func (tlu *TipLogUpdate) Where(ps ...predicate.TipLog) *TipLogUpdate {
	tlu.mutation.Where(ps...)
	return tlu
}

// SetAmount sets the "amount" field.
func (tlu *TipLogUpdate) SetAmount(i int32) *TipLogUpdate {
	tlu.mutation.ResetAmount()
	tlu.mutation.SetAmount(i)
	return tlu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tlu *TipLogUpdate) SetNillableAmount(i *int32) *TipLogUpdate {
	if i != nil {
		tlu.SetAmount(*i)
	}
	return tlu
}

// AddAmount adds i to the "amount" field.
func (tlu *TipLogUpdate) AddAmount(i int32) *TipLogUpdate {
	tlu.mutation.AddAmount(i)
	return tlu
}

// SetTippedToDiscordID sets the "tipped_to_discord_id" field.
func (tlu *TipLogUpdate) SetTippedToDiscordID(s string) *TipLogUpdate {
	tlu.mutation.SetTippedToDiscordID(s)
	return tlu
}

// SetNillableTippedToDiscordID sets the "tipped_to_discord_id" field if the given value is not nil.
func (tlu *TipLogUpdate) SetNillableTippedToDiscordID(s *string) *TipLogUpdate {
	if s != nil {
		tlu.SetTippedToDiscordID(*s)
	}
	return tlu
}

// SetTippedBy sets the "tipped_by" field.
func (tlu *TipLogUpdate) SetTippedBy(u uuid.UUID) *TipLogUpdate {
	tlu.mutation.SetTippedBy(u)
	return tlu
}

// SetNillableTippedBy sets the "tipped_by" field if the given value is not nil.
func (tlu *TipLogUpdate) SetNillableTippedBy(u *uuid.UUID) *TipLogUpdate {
	if u != nil {
		tlu.SetTippedBy(*u)
	}
	return tlu
}

// SetTippedTo sets the "tipped_to" field.
func (tlu *TipLogUpdate) SetTippedTo(u uuid.UUID) *TipLogUpdate {
	tlu.mutation.SetTippedTo(u)
	return tlu
}

// SetNillableTippedTo sets the "tipped_to" field if the given value is not nil.
func (tlu *TipLogUpdate) SetNillableTippedTo(u *uuid.UUID) *TipLogUpdate {
	if u != nil {
		tlu.SetTippedTo(*u)
	}
	return tlu
}

// ClearTippedTo clears the value of the "tipped_to" field.
func (tlu *TipLogUpdate) ClearTippedTo() *TipLogUpdate {
	tlu.mutation.ClearTippedTo()
	return tlu
}

// SetUpdatedAt sets the "updated_at" field.
func (tlu *TipLogUpdate) SetUpdatedAt(t time.Time) *TipLogUpdate {
	tlu.mutation.SetUpdatedAt(t)
	return tlu
}

// SetTipsReceivedID sets the "tips_received" edge to the User entity by ID.
func (tlu *TipLogUpdate) SetTipsReceivedID(id uuid.UUID) *TipLogUpdate {
	tlu.mutation.SetTipsReceivedID(id)
	return tlu
}

// SetNillableTipsReceivedID sets the "tips_received" edge to the User entity by ID if the given value is not nil.
func (tlu *TipLogUpdate) SetNillableTipsReceivedID(id *uuid.UUID) *TipLogUpdate {
	if id != nil {
		tlu = tlu.SetTipsReceivedID(*id)
	}
	return tlu
}

// SetTipsReceived sets the "tips_received" edge to the User entity.
func (tlu *TipLogUpdate) SetTipsReceived(u *User) *TipLogUpdate {
	return tlu.SetTipsReceivedID(u.ID)
}

// SetTipsGivenID sets the "tips_given" edge to the User entity by ID.
func (tlu *TipLogUpdate) SetTipsGivenID(id uuid.UUID) *TipLogUpdate {
	tlu.mutation.SetTipsGivenID(id)
	return tlu
}

// SetTipsGiven sets the "tips_given" edge to the User entity.
func (tlu *TipLogUpdate) SetTipsGiven(u *User) *TipLogUpdate {
	return tlu.SetTipsGivenID(u.ID)
}

// Mutation returns the TipLogMutation object of the builder.
func (tlu *TipLogUpdate) Mutation() *TipLogMutation {
	return tlu.mutation
}

// ClearTipsReceived clears the "tips_received" edge to the User entity.
func (tlu *TipLogUpdate) ClearTipsReceived() *TipLogUpdate {
	tlu.mutation.ClearTipsReceived()
	return tlu
}

// ClearTipsGiven clears the "tips_given" edge to the User entity.
func (tlu *TipLogUpdate) ClearTipsGiven() *TipLogUpdate {
	tlu.mutation.ClearTipsGiven()
	return tlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tlu *TipLogUpdate) Save(ctx context.Context) (int, error) {
	tlu.defaults()
	return withHooks(ctx, tlu.sqlSave, tlu.mutation, tlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tlu *TipLogUpdate) SaveX(ctx context.Context) int {
	affected, err := tlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tlu *TipLogUpdate) Exec(ctx context.Context) error {
	_, err := tlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlu *TipLogUpdate) ExecX(ctx context.Context) {
	if err := tlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tlu *TipLogUpdate) defaults() {
	if _, ok := tlu.mutation.UpdatedAt(); !ok {
		v := tiplog.UpdateDefaultUpdatedAt()
		tlu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlu *TipLogUpdate) check() error {
	if tlu.mutation.TipsGivenCleared() && len(tlu.mutation.TipsGivenIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TipLog.tips_given"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tlu *TipLogUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TipLogUpdate {
	tlu.modifiers = append(tlu.modifiers, modifiers...)
	return tlu
}

func (tlu *TipLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tiplog.Table, tiplog.Columns, sqlgraph.NewFieldSpec(tiplog.FieldID, field.TypeUUID))
	if ps := tlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tlu.mutation.Amount(); ok {
		_spec.SetField(tiplog.FieldAmount, field.TypeInt32, value)
	}
	if value, ok := tlu.mutation.AddedAmount(); ok {
		_spec.AddField(tiplog.FieldAmount, field.TypeInt32, value)
	}
	if value, ok := tlu.mutation.TippedToDiscordID(); ok {
		_spec.SetField(tiplog.FieldTippedToDiscordID, field.TypeString, value)
	}
	if value, ok := tlu.mutation.UpdatedAt(); ok {
		_spec.SetField(tiplog.FieldUpdatedAt, field.TypeTime, value)
	}
	if tlu.mutation.TipsReceivedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tiplog.TipsReceivedTable,
			Columns: []string{tiplog.TipsReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tlu.mutation.TipsReceivedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tiplog.TipsReceivedTable,
			Columns: []string{tiplog.TipsReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tlu.mutation.TipsGivenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tiplog.TipsGivenTable,
			Columns: []string{tiplog.TipsGivenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tlu.mutation.TipsGivenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tiplog.TipsGivenTable,
			Columns: []string{tiplog.TipsGivenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tlu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tiplog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tlu.mutation.done = true
	return n, nil
}

// TipLogUpdateOne is the builder for updating a single TipLog entity.
type TipLogUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TipLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetAmount sets the "amount" field.
func (tluo *TipLogUpdateOne) SetAmount(i int32) *TipLogUpdateOne {
	tluo.mutation.ResetAmount()
	tluo.mutation.SetAmount(i)
	return tluo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tluo *TipLogUpdateOne) SetNillableAmount(i *int32) *TipLogUpdateOne {
	if i != nil {
		tluo.SetAmount(*i)
	}
	return tluo
}

// AddAmount adds i to the "amount" field.
func (tluo *TipLogUpdateOne) AddAmount(i int32) *TipLogUpdateOne {
	tluo.mutation.AddAmount(i)
	return tluo
}

// SetTippedToDiscordID sets the "tipped_to_discord_id" field.
func (tluo *TipLogUpdateOne) SetTippedToDiscordID(s string) *TipLogUpdateOne {
	tluo.mutation.SetTippedToDiscordID(s)
	return tluo
}

// SetNillableTippedToDiscordID sets the "tipped_to_discord_id" field if the given value is not nil.
func (tluo *TipLogUpdateOne) SetNillableTippedToDiscordID(s *string) *TipLogUpdateOne {
	if s != nil {
		tluo.SetTippedToDiscordID(*s)
	}
	return tluo
}

// SetTippedBy sets the "tipped_by" field.
func (tluo *TipLogUpdateOne) SetTippedBy(u uuid.UUID) *TipLogUpdateOne {
	tluo.mutation.SetTippedBy(u)
	return tluo
}

// SetNillableTippedBy sets the "tipped_by" field if the given value is not nil.
func (tluo *TipLogUpdateOne) SetNillableTippedBy(u *uuid.UUID) *TipLogUpdateOne {
	if u != nil {
		tluo.SetTippedBy(*u)
	}
	return tluo
}

// SetTippedTo sets the "tipped_to" field.
func (tluo *TipLogUpdateOne) SetTippedTo(u uuid.UUID) *TipLogUpdateOne {
	tluo.mutation.SetTippedTo(u)
	return tluo
}

// SetNillableTippedTo sets the "tipped_to" field if the given value is not nil.
func (tluo *TipLogUpdateOne) SetNillableTippedTo(u *uuid.UUID) *TipLogUpdateOne {
	if u != nil {
		tluo.SetTippedTo(*u)
	}
	return tluo
}

// ClearTippedTo clears the value of the "tipped_to" field.
func (tluo *TipLogUpdateOne) ClearTippedTo() *TipLogUpdateOne {
	tluo.mutation.ClearTippedTo()
	return tluo
}

// SetUpdatedAt sets the "updated_at" field.
func (tluo *TipLogUpdateOne) SetUpdatedAt(t time.Time) *TipLogUpdateOne {
	tluo.mutation.SetUpdatedAt(t)
	return tluo
}

// SetTipsReceivedID sets the "tips_received" edge to the User entity by ID.
func (tluo *TipLogUpdateOne) SetTipsReceivedID(id uuid.UUID) *TipLogUpdateOne {
	tluo.mutation.SetTipsReceivedID(id)
	return tluo
}

// SetNillableTipsReceivedID sets the "tips_received" edge to the User entity by ID if the given value is not nil.
func (tluo *TipLogUpdateOne) SetNillableTipsReceivedID(id *uuid.UUID) *TipLogUpdateOne {
	if id != nil {
		tluo = tluo.SetTipsReceivedID(*id)
	}
	return tluo
}

// SetTipsReceived sets the "tips_received" edge to the User entity.
func (tluo *TipLogUpdateOne) SetTipsReceived(u *User) *TipLogUpdateOne {
	return tluo.SetTipsReceivedID(u.ID)
}

// SetTipsGivenID sets the "tips_given" edge to the User entity by ID.
func (tluo *TipLogUpdateOne) SetTipsGivenID(id uuid.UUID) *TipLogUpdateOne {
	tluo.mutation.SetTipsGivenID(id)
	return tluo
}

// SetTipsGiven sets the "tips_given" edge to the User entity.
func (tluo *TipLogUpdateOne) SetTipsGiven(u *User) *TipLogUpdateOne {
	return tluo.SetTipsGivenID(u.ID)
}

// Mutation returns the TipLogMutation object of the builder.
func (tluo *TipLogUpdateOne) Mutation() *TipLogMutation {
	return tluo.mutation
}

// ClearTipsReceived clears the "tips_received" edge to the User entity.
func (tluo *TipLogUpdateOne) ClearTipsReceived() *TipLogUpdateOne {
	tluo.mutation.ClearTipsReceived()
	return tluo
}

// ClearTipsGiven clears the "tips_given" edge to the User entity.
func (tluo *TipLogUpdateOne) ClearTipsGiven() *TipLogUpdateOne {
	tluo.mutation.ClearTipsGiven()
	return tluo
}

// Where appends a list predicates to the TipLogUpdate builder.
func (tluo *TipLogUpdateOne) Where(ps ...predicate.TipLog) *TipLogUpdateOne {
	tluo.mutation.Where(ps...)
	return tluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tluo *TipLogUpdateOne) Select(field string, fields ...string) *TipLogUpdateOne {
	tluo.fields = append([]string{field}, fields...)
	return tluo
}

// Save executes the query and returns the updated TipLog entity.
func (tluo *TipLogUpdateOne) Save(ctx context.Context) (*TipLog, error) {
	tluo.defaults()
	return withHooks(ctx, tluo.sqlSave, tluo.mutation, tluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tluo *TipLogUpdateOne) SaveX(ctx context.Context) *TipLog {
	node, err := tluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tluo *TipLogUpdateOne) Exec(ctx context.Context) error {
	_, err := tluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tluo *TipLogUpdateOne) ExecX(ctx context.Context) {
	if err := tluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tluo *TipLogUpdateOne) defaults() {
	if _, ok := tluo.mutation.UpdatedAt(); !ok {
		v := tiplog.UpdateDefaultUpdatedAt()
		tluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tluo *TipLogUpdateOne) check() error {
	if tluo.mutation.TipsGivenCleared() && len(tluo.mutation.TipsGivenIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TipLog.tips_given"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tluo *TipLogUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TipLogUpdateOne {
	tluo.modifiers = append(tluo.modifiers, modifiers...)
	return tluo
}

func (tluo *TipLogUpdateOne) sqlSave(ctx context.Context) (_node *TipLog, err error) {
	if err := tluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tiplog.Table, tiplog.Columns, sqlgraph.NewFieldSpec(tiplog.FieldID, field.TypeUUID))
	id, ok := tluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TipLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tiplog.FieldID)
		for _, f := range fields {
			if !tiplog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tiplog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tluo.mutation.Amount(); ok {
		_spec.SetField(tiplog.FieldAmount, field.TypeInt32, value)
	}
	if value, ok := tluo.mutation.AddedAmount(); ok {
		_spec.AddField(tiplog.FieldAmount, field.TypeInt32, value)
	}
	if value, ok := tluo.mutation.TippedToDiscordID(); ok {
		_spec.SetField(tiplog.FieldTippedToDiscordID, field.TypeString, value)
	}
	if value, ok := tluo.mutation.UpdatedAt(); ok {
		_spec.SetField(tiplog.FieldUpdatedAt, field.TypeTime, value)
	}
	if tluo.mutation.TipsReceivedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tiplog.TipsReceivedTable,
			Columns: []string{tiplog.TipsReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tluo.mutation.TipsReceivedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tiplog.TipsReceivedTable,
			Columns: []string{tiplog.TipsReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tluo.mutation.TipsGivenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tiplog.TipsGivenTable,
			Columns: []string{tiplog.TipsGivenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tluo.mutation.TipsGivenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tiplog.TipsGivenTable,
			Columns: []string{tiplog.TipsGivenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tluo.modifiers...)
	_node = &TipLog{config: tluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tiplog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tluo.mutation.done = true
	return _node, nil
}
