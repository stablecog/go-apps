// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/upscale"
	"github.com/stablecog/sc-go/database/ent/upscalemodel"
)

// UpscaleModelCreate is the builder for creating a UpscaleModel entity.
type UpscaleModelCreate struct {
	config
	mutation *UpscaleModelMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNameInWorker sets the "name_in_worker" field.
func (umc *UpscaleModelCreate) SetNameInWorker(s string) *UpscaleModelCreate {
	umc.mutation.SetNameInWorker(s)
	return umc
}

// SetIsActive sets the "is_active" field.
func (umc *UpscaleModelCreate) SetIsActive(b bool) *UpscaleModelCreate {
	umc.mutation.SetIsActive(b)
	return umc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (umc *UpscaleModelCreate) SetNillableIsActive(b *bool) *UpscaleModelCreate {
	if b != nil {
		umc.SetIsActive(*b)
	}
	return umc
}

// SetIsDefault sets the "is_default" field.
func (umc *UpscaleModelCreate) SetIsDefault(b bool) *UpscaleModelCreate {
	umc.mutation.SetIsDefault(b)
	return umc
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (umc *UpscaleModelCreate) SetNillableIsDefault(b *bool) *UpscaleModelCreate {
	if b != nil {
		umc.SetIsDefault(*b)
	}
	return umc
}

// SetIsHidden sets the "is_hidden" field.
func (umc *UpscaleModelCreate) SetIsHidden(b bool) *UpscaleModelCreate {
	umc.mutation.SetIsHidden(b)
	return umc
}

// SetNillableIsHidden sets the "is_hidden" field if the given value is not nil.
func (umc *UpscaleModelCreate) SetNillableIsHidden(b *bool) *UpscaleModelCreate {
	if b != nil {
		umc.SetIsHidden(*b)
	}
	return umc
}

// SetRunpodEndpoint sets the "runpod_endpoint" field.
func (umc *UpscaleModelCreate) SetRunpodEndpoint(s string) *UpscaleModelCreate {
	umc.mutation.SetRunpodEndpoint(s)
	return umc
}

// SetNillableRunpodEndpoint sets the "runpod_endpoint" field if the given value is not nil.
func (umc *UpscaleModelCreate) SetNillableRunpodEndpoint(s *string) *UpscaleModelCreate {
	if s != nil {
		umc.SetRunpodEndpoint(*s)
	}
	return umc
}

// SetRunpodActive sets the "runpod_active" field.
func (umc *UpscaleModelCreate) SetRunpodActive(b bool) *UpscaleModelCreate {
	umc.mutation.SetRunpodActive(b)
	return umc
}

// SetNillableRunpodActive sets the "runpod_active" field if the given value is not nil.
func (umc *UpscaleModelCreate) SetNillableRunpodActive(b *bool) *UpscaleModelCreate {
	if b != nil {
		umc.SetRunpodActive(*b)
	}
	return umc
}

// SetCreatedAt sets the "created_at" field.
func (umc *UpscaleModelCreate) SetCreatedAt(t time.Time) *UpscaleModelCreate {
	umc.mutation.SetCreatedAt(t)
	return umc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (umc *UpscaleModelCreate) SetNillableCreatedAt(t *time.Time) *UpscaleModelCreate {
	if t != nil {
		umc.SetCreatedAt(*t)
	}
	return umc
}

// SetUpdatedAt sets the "updated_at" field.
func (umc *UpscaleModelCreate) SetUpdatedAt(t time.Time) *UpscaleModelCreate {
	umc.mutation.SetUpdatedAt(t)
	return umc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (umc *UpscaleModelCreate) SetNillableUpdatedAt(t *time.Time) *UpscaleModelCreate {
	if t != nil {
		umc.SetUpdatedAt(*t)
	}
	return umc
}

// SetID sets the "id" field.
func (umc *UpscaleModelCreate) SetID(u uuid.UUID) *UpscaleModelCreate {
	umc.mutation.SetID(u)
	return umc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (umc *UpscaleModelCreate) SetNillableID(u *uuid.UUID) *UpscaleModelCreate {
	if u != nil {
		umc.SetID(*u)
	}
	return umc
}

// AddUpscaleIDs adds the "upscales" edge to the Upscale entity by IDs.
func (umc *UpscaleModelCreate) AddUpscaleIDs(ids ...uuid.UUID) *UpscaleModelCreate {
	umc.mutation.AddUpscaleIDs(ids...)
	return umc
}

// AddUpscales adds the "upscales" edges to the Upscale entity.
func (umc *UpscaleModelCreate) AddUpscales(u ...*Upscale) *UpscaleModelCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return umc.AddUpscaleIDs(ids...)
}

// Mutation returns the UpscaleModelMutation object of the builder.
func (umc *UpscaleModelCreate) Mutation() *UpscaleModelMutation {
	return umc.mutation
}

// Save creates the UpscaleModel in the database.
func (umc *UpscaleModelCreate) Save(ctx context.Context) (*UpscaleModel, error) {
	umc.defaults()
	return withHooks(ctx, umc.sqlSave, umc.mutation, umc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (umc *UpscaleModelCreate) SaveX(ctx context.Context) *UpscaleModel {
	v, err := umc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (umc *UpscaleModelCreate) Exec(ctx context.Context) error {
	_, err := umc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umc *UpscaleModelCreate) ExecX(ctx context.Context) {
	if err := umc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (umc *UpscaleModelCreate) defaults() {
	if _, ok := umc.mutation.IsActive(); !ok {
		v := upscalemodel.DefaultIsActive
		umc.mutation.SetIsActive(v)
	}
	if _, ok := umc.mutation.IsDefault(); !ok {
		v := upscalemodel.DefaultIsDefault
		umc.mutation.SetIsDefault(v)
	}
	if _, ok := umc.mutation.IsHidden(); !ok {
		v := upscalemodel.DefaultIsHidden
		umc.mutation.SetIsHidden(v)
	}
	if _, ok := umc.mutation.RunpodActive(); !ok {
		v := upscalemodel.DefaultRunpodActive
		umc.mutation.SetRunpodActive(v)
	}
	if _, ok := umc.mutation.CreatedAt(); !ok {
		v := upscalemodel.DefaultCreatedAt()
		umc.mutation.SetCreatedAt(v)
	}
	if _, ok := umc.mutation.UpdatedAt(); !ok {
		v := upscalemodel.DefaultUpdatedAt()
		umc.mutation.SetUpdatedAt(v)
	}
	if _, ok := umc.mutation.ID(); !ok {
		v := upscalemodel.DefaultID()
		umc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umc *UpscaleModelCreate) check() error {
	if _, ok := umc.mutation.NameInWorker(); !ok {
		return &ValidationError{Name: "name_in_worker", err: errors.New(`ent: missing required field "UpscaleModel.name_in_worker"`)}
	}
	if _, ok := umc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "UpscaleModel.is_active"`)}
	}
	if _, ok := umc.mutation.IsDefault(); !ok {
		return &ValidationError{Name: "is_default", err: errors.New(`ent: missing required field "UpscaleModel.is_default"`)}
	}
	if _, ok := umc.mutation.IsHidden(); !ok {
		return &ValidationError{Name: "is_hidden", err: errors.New(`ent: missing required field "UpscaleModel.is_hidden"`)}
	}
	if _, ok := umc.mutation.RunpodActive(); !ok {
		return &ValidationError{Name: "runpod_active", err: errors.New(`ent: missing required field "UpscaleModel.runpod_active"`)}
	}
	if _, ok := umc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UpscaleModel.created_at"`)}
	}
	if _, ok := umc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UpscaleModel.updated_at"`)}
	}
	return nil
}

func (umc *UpscaleModelCreate) sqlSave(ctx context.Context) (*UpscaleModel, error) {
	if err := umc.check(); err != nil {
		return nil, err
	}
	_node, _spec := umc.createSpec()
	if err := sqlgraph.CreateNode(ctx, umc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	umc.mutation.id = &_node.ID
	umc.mutation.done = true
	return _node, nil
}

func (umc *UpscaleModelCreate) createSpec() (*UpscaleModel, *sqlgraph.CreateSpec) {
	var (
		_node = &UpscaleModel{config: umc.config}
		_spec = sqlgraph.NewCreateSpec(upscalemodel.Table, sqlgraph.NewFieldSpec(upscalemodel.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = umc.conflict
	if id, ok := umc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := umc.mutation.NameInWorker(); ok {
		_spec.SetField(upscalemodel.FieldNameInWorker, field.TypeString, value)
		_node.NameInWorker = value
	}
	if value, ok := umc.mutation.IsActive(); ok {
		_spec.SetField(upscalemodel.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := umc.mutation.IsDefault(); ok {
		_spec.SetField(upscalemodel.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = value
	}
	if value, ok := umc.mutation.IsHidden(); ok {
		_spec.SetField(upscalemodel.FieldIsHidden, field.TypeBool, value)
		_node.IsHidden = value
	}
	if value, ok := umc.mutation.RunpodEndpoint(); ok {
		_spec.SetField(upscalemodel.FieldRunpodEndpoint, field.TypeString, value)
		_node.RunpodEndpoint = &value
	}
	if value, ok := umc.mutation.RunpodActive(); ok {
		_spec.SetField(upscalemodel.FieldRunpodActive, field.TypeBool, value)
		_node.RunpodActive = value
	}
	if value, ok := umc.mutation.CreatedAt(); ok {
		_spec.SetField(upscalemodel.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := umc.mutation.UpdatedAt(); ok {
		_spec.SetField(upscalemodel.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := umc.mutation.UpscalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   upscalemodel.UpscalesTable,
			Columns: []string{upscalemodel.UpscalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upscale.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UpscaleModel.Create().
//		SetNameInWorker(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UpscaleModelUpsert) {
//			SetNameInWorker(v+v).
//		}).
//		Exec(ctx)
func (umc *UpscaleModelCreate) OnConflict(opts ...sql.ConflictOption) *UpscaleModelUpsertOne {
	umc.conflict = opts
	return &UpscaleModelUpsertOne{
		create: umc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UpscaleModel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (umc *UpscaleModelCreate) OnConflictColumns(columns ...string) *UpscaleModelUpsertOne {
	umc.conflict = append(umc.conflict, sql.ConflictColumns(columns...))
	return &UpscaleModelUpsertOne{
		create: umc,
	}
}

type (
	// UpscaleModelUpsertOne is the builder for "upsert"-ing
	//  one UpscaleModel node.
	UpscaleModelUpsertOne struct {
		create *UpscaleModelCreate
	}

	// UpscaleModelUpsert is the "OnConflict" setter.
	UpscaleModelUpsert struct {
		*sql.UpdateSet
	}
)

// SetNameInWorker sets the "name_in_worker" field.
func (u *UpscaleModelUpsert) SetNameInWorker(v string) *UpscaleModelUpsert {
	u.Set(upscalemodel.FieldNameInWorker, v)
	return u
}

// UpdateNameInWorker sets the "name_in_worker" field to the value that was provided on create.
func (u *UpscaleModelUpsert) UpdateNameInWorker() *UpscaleModelUpsert {
	u.SetExcluded(upscalemodel.FieldNameInWorker)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *UpscaleModelUpsert) SetIsActive(v bool) *UpscaleModelUpsert {
	u.Set(upscalemodel.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *UpscaleModelUpsert) UpdateIsActive() *UpscaleModelUpsert {
	u.SetExcluded(upscalemodel.FieldIsActive)
	return u
}

// SetIsDefault sets the "is_default" field.
func (u *UpscaleModelUpsert) SetIsDefault(v bool) *UpscaleModelUpsert {
	u.Set(upscalemodel.FieldIsDefault, v)
	return u
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *UpscaleModelUpsert) UpdateIsDefault() *UpscaleModelUpsert {
	u.SetExcluded(upscalemodel.FieldIsDefault)
	return u
}

// SetIsHidden sets the "is_hidden" field.
func (u *UpscaleModelUpsert) SetIsHidden(v bool) *UpscaleModelUpsert {
	u.Set(upscalemodel.FieldIsHidden, v)
	return u
}

// UpdateIsHidden sets the "is_hidden" field to the value that was provided on create.
func (u *UpscaleModelUpsert) UpdateIsHidden() *UpscaleModelUpsert {
	u.SetExcluded(upscalemodel.FieldIsHidden)
	return u
}

// SetRunpodEndpoint sets the "runpod_endpoint" field.
func (u *UpscaleModelUpsert) SetRunpodEndpoint(v string) *UpscaleModelUpsert {
	u.Set(upscalemodel.FieldRunpodEndpoint, v)
	return u
}

// UpdateRunpodEndpoint sets the "runpod_endpoint" field to the value that was provided on create.
func (u *UpscaleModelUpsert) UpdateRunpodEndpoint() *UpscaleModelUpsert {
	u.SetExcluded(upscalemodel.FieldRunpodEndpoint)
	return u
}

// ClearRunpodEndpoint clears the value of the "runpod_endpoint" field.
func (u *UpscaleModelUpsert) ClearRunpodEndpoint() *UpscaleModelUpsert {
	u.SetNull(upscalemodel.FieldRunpodEndpoint)
	return u
}

// SetRunpodActive sets the "runpod_active" field.
func (u *UpscaleModelUpsert) SetRunpodActive(v bool) *UpscaleModelUpsert {
	u.Set(upscalemodel.FieldRunpodActive, v)
	return u
}

// UpdateRunpodActive sets the "runpod_active" field to the value that was provided on create.
func (u *UpscaleModelUpsert) UpdateRunpodActive() *UpscaleModelUpsert {
	u.SetExcluded(upscalemodel.FieldRunpodActive)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UpscaleModelUpsert) SetUpdatedAt(v time.Time) *UpscaleModelUpsert {
	u.Set(upscalemodel.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UpscaleModelUpsert) UpdateUpdatedAt() *UpscaleModelUpsert {
	u.SetExcluded(upscalemodel.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UpscaleModel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(upscalemodel.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UpscaleModelUpsertOne) UpdateNewValues() *UpscaleModelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(upscalemodel.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(upscalemodel.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UpscaleModel.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UpscaleModelUpsertOne) Ignore() *UpscaleModelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UpscaleModelUpsertOne) DoNothing() *UpscaleModelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UpscaleModelCreate.OnConflict
// documentation for more info.
func (u *UpscaleModelUpsertOne) Update(set func(*UpscaleModelUpsert)) *UpscaleModelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UpscaleModelUpsert{UpdateSet: update})
	}))
	return u
}

// SetNameInWorker sets the "name_in_worker" field.
func (u *UpscaleModelUpsertOne) SetNameInWorker(v string) *UpscaleModelUpsertOne {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.SetNameInWorker(v)
	})
}

// UpdateNameInWorker sets the "name_in_worker" field to the value that was provided on create.
func (u *UpscaleModelUpsertOne) UpdateNameInWorker() *UpscaleModelUpsertOne {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.UpdateNameInWorker()
	})
}

// SetIsActive sets the "is_active" field.
func (u *UpscaleModelUpsertOne) SetIsActive(v bool) *UpscaleModelUpsertOne {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *UpscaleModelUpsertOne) UpdateIsActive() *UpscaleModelUpsertOne {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.UpdateIsActive()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *UpscaleModelUpsertOne) SetIsDefault(v bool) *UpscaleModelUpsertOne {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *UpscaleModelUpsertOne) UpdateIsDefault() *UpscaleModelUpsertOne {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.UpdateIsDefault()
	})
}

// SetIsHidden sets the "is_hidden" field.
func (u *UpscaleModelUpsertOne) SetIsHidden(v bool) *UpscaleModelUpsertOne {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.SetIsHidden(v)
	})
}

// UpdateIsHidden sets the "is_hidden" field to the value that was provided on create.
func (u *UpscaleModelUpsertOne) UpdateIsHidden() *UpscaleModelUpsertOne {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.UpdateIsHidden()
	})
}

// SetRunpodEndpoint sets the "runpod_endpoint" field.
func (u *UpscaleModelUpsertOne) SetRunpodEndpoint(v string) *UpscaleModelUpsertOne {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.SetRunpodEndpoint(v)
	})
}

// UpdateRunpodEndpoint sets the "runpod_endpoint" field to the value that was provided on create.
func (u *UpscaleModelUpsertOne) UpdateRunpodEndpoint() *UpscaleModelUpsertOne {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.UpdateRunpodEndpoint()
	})
}

// ClearRunpodEndpoint clears the value of the "runpod_endpoint" field.
func (u *UpscaleModelUpsertOne) ClearRunpodEndpoint() *UpscaleModelUpsertOne {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.ClearRunpodEndpoint()
	})
}

// SetRunpodActive sets the "runpod_active" field.
func (u *UpscaleModelUpsertOne) SetRunpodActive(v bool) *UpscaleModelUpsertOne {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.SetRunpodActive(v)
	})
}

// UpdateRunpodActive sets the "runpod_active" field to the value that was provided on create.
func (u *UpscaleModelUpsertOne) UpdateRunpodActive() *UpscaleModelUpsertOne {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.UpdateRunpodActive()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UpscaleModelUpsertOne) SetUpdatedAt(v time.Time) *UpscaleModelUpsertOne {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UpscaleModelUpsertOne) UpdateUpdatedAt() *UpscaleModelUpsertOne {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *UpscaleModelUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UpscaleModelCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UpscaleModelUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UpscaleModelUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UpscaleModelUpsertOne.ID is not supported by MySQL driver. Use UpscaleModelUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UpscaleModelUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UpscaleModelCreateBulk is the builder for creating many UpscaleModel entities in bulk.
type UpscaleModelCreateBulk struct {
	config
	err      error
	builders []*UpscaleModelCreate
	conflict []sql.ConflictOption
}

// Save creates the UpscaleModel entities in the database.
func (umcb *UpscaleModelCreateBulk) Save(ctx context.Context) ([]*UpscaleModel, error) {
	if umcb.err != nil {
		return nil, umcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(umcb.builders))
	nodes := make([]*UpscaleModel, len(umcb.builders))
	mutators := make([]Mutator, len(umcb.builders))
	for i := range umcb.builders {
		func(i int, root context.Context) {
			builder := umcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UpscaleModelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, umcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = umcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, umcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, umcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (umcb *UpscaleModelCreateBulk) SaveX(ctx context.Context) []*UpscaleModel {
	v, err := umcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (umcb *UpscaleModelCreateBulk) Exec(ctx context.Context) error {
	_, err := umcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umcb *UpscaleModelCreateBulk) ExecX(ctx context.Context) {
	if err := umcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UpscaleModel.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UpscaleModelUpsert) {
//			SetNameInWorker(v+v).
//		}).
//		Exec(ctx)
func (umcb *UpscaleModelCreateBulk) OnConflict(opts ...sql.ConflictOption) *UpscaleModelUpsertBulk {
	umcb.conflict = opts
	return &UpscaleModelUpsertBulk{
		create: umcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UpscaleModel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (umcb *UpscaleModelCreateBulk) OnConflictColumns(columns ...string) *UpscaleModelUpsertBulk {
	umcb.conflict = append(umcb.conflict, sql.ConflictColumns(columns...))
	return &UpscaleModelUpsertBulk{
		create: umcb,
	}
}

// UpscaleModelUpsertBulk is the builder for "upsert"-ing
// a bulk of UpscaleModel nodes.
type UpscaleModelUpsertBulk struct {
	create *UpscaleModelCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UpscaleModel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(upscalemodel.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UpscaleModelUpsertBulk) UpdateNewValues() *UpscaleModelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(upscalemodel.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(upscalemodel.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UpscaleModel.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UpscaleModelUpsertBulk) Ignore() *UpscaleModelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UpscaleModelUpsertBulk) DoNothing() *UpscaleModelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UpscaleModelCreateBulk.OnConflict
// documentation for more info.
func (u *UpscaleModelUpsertBulk) Update(set func(*UpscaleModelUpsert)) *UpscaleModelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UpscaleModelUpsert{UpdateSet: update})
	}))
	return u
}

// SetNameInWorker sets the "name_in_worker" field.
func (u *UpscaleModelUpsertBulk) SetNameInWorker(v string) *UpscaleModelUpsertBulk {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.SetNameInWorker(v)
	})
}

// UpdateNameInWorker sets the "name_in_worker" field to the value that was provided on create.
func (u *UpscaleModelUpsertBulk) UpdateNameInWorker() *UpscaleModelUpsertBulk {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.UpdateNameInWorker()
	})
}

// SetIsActive sets the "is_active" field.
func (u *UpscaleModelUpsertBulk) SetIsActive(v bool) *UpscaleModelUpsertBulk {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *UpscaleModelUpsertBulk) UpdateIsActive() *UpscaleModelUpsertBulk {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.UpdateIsActive()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *UpscaleModelUpsertBulk) SetIsDefault(v bool) *UpscaleModelUpsertBulk {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *UpscaleModelUpsertBulk) UpdateIsDefault() *UpscaleModelUpsertBulk {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.UpdateIsDefault()
	})
}

// SetIsHidden sets the "is_hidden" field.
func (u *UpscaleModelUpsertBulk) SetIsHidden(v bool) *UpscaleModelUpsertBulk {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.SetIsHidden(v)
	})
}

// UpdateIsHidden sets the "is_hidden" field to the value that was provided on create.
func (u *UpscaleModelUpsertBulk) UpdateIsHidden() *UpscaleModelUpsertBulk {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.UpdateIsHidden()
	})
}

// SetRunpodEndpoint sets the "runpod_endpoint" field.
func (u *UpscaleModelUpsertBulk) SetRunpodEndpoint(v string) *UpscaleModelUpsertBulk {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.SetRunpodEndpoint(v)
	})
}

// UpdateRunpodEndpoint sets the "runpod_endpoint" field to the value that was provided on create.
func (u *UpscaleModelUpsertBulk) UpdateRunpodEndpoint() *UpscaleModelUpsertBulk {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.UpdateRunpodEndpoint()
	})
}

// ClearRunpodEndpoint clears the value of the "runpod_endpoint" field.
func (u *UpscaleModelUpsertBulk) ClearRunpodEndpoint() *UpscaleModelUpsertBulk {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.ClearRunpodEndpoint()
	})
}

// SetRunpodActive sets the "runpod_active" field.
func (u *UpscaleModelUpsertBulk) SetRunpodActive(v bool) *UpscaleModelUpsertBulk {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.SetRunpodActive(v)
	})
}

// UpdateRunpodActive sets the "runpod_active" field to the value that was provided on create.
func (u *UpscaleModelUpsertBulk) UpdateRunpodActive() *UpscaleModelUpsertBulk {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.UpdateRunpodActive()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UpscaleModelUpsertBulk) SetUpdatedAt(v time.Time) *UpscaleModelUpsertBulk {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UpscaleModelUpsertBulk) UpdateUpdatedAt() *UpscaleModelUpsertBulk {
	return u.Update(func(s *UpscaleModelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *UpscaleModelUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UpscaleModelCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UpscaleModelCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UpscaleModelUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
