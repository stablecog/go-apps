// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/deviceinfo"
	"github.com/stablecog/sc-go/database/ent/generation"
	"github.com/stablecog/sc-go/database/ent/predicate"
	"github.com/stablecog/sc-go/database/ent/upscale"
	"github.com/stablecog/sc-go/database/ent/voiceover"
)

// DeviceInfoUpdate is the builder for updating DeviceInfo entities.
type DeviceInfoUpdate struct {
	config
	hooks     []Hook
	mutation  *DeviceInfoMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DeviceInfoUpdate builder.
func (diu *DeviceInfoUpdate) Where(ps ...predicate.DeviceInfo) *DeviceInfoUpdate {
	diu.mutation.Where(ps...)
	return diu
}

// SetType sets the "type" field.
func (diu *DeviceInfoUpdate) SetType(s string) *DeviceInfoUpdate {
	diu.mutation.SetType(s)
	return diu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (diu *DeviceInfoUpdate) SetNillableType(s *string) *DeviceInfoUpdate {
	if s != nil {
		diu.SetType(*s)
	}
	return diu
}

// ClearType clears the value of the "type" field.
func (diu *DeviceInfoUpdate) ClearType() *DeviceInfoUpdate {
	diu.mutation.ClearType()
	return diu
}

// SetOs sets the "os" field.
func (diu *DeviceInfoUpdate) SetOs(s string) *DeviceInfoUpdate {
	diu.mutation.SetOs(s)
	return diu
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (diu *DeviceInfoUpdate) SetNillableOs(s *string) *DeviceInfoUpdate {
	if s != nil {
		diu.SetOs(*s)
	}
	return diu
}

// ClearOs clears the value of the "os" field.
func (diu *DeviceInfoUpdate) ClearOs() *DeviceInfoUpdate {
	diu.mutation.ClearOs()
	return diu
}

// SetBrowser sets the "browser" field.
func (diu *DeviceInfoUpdate) SetBrowser(s string) *DeviceInfoUpdate {
	diu.mutation.SetBrowser(s)
	return diu
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (diu *DeviceInfoUpdate) SetNillableBrowser(s *string) *DeviceInfoUpdate {
	if s != nil {
		diu.SetBrowser(*s)
	}
	return diu
}

// ClearBrowser clears the value of the "browser" field.
func (diu *DeviceInfoUpdate) ClearBrowser() *DeviceInfoUpdate {
	diu.mutation.ClearBrowser()
	return diu
}

// SetUpdatedAt sets the "updated_at" field.
func (diu *DeviceInfoUpdate) SetUpdatedAt(t time.Time) *DeviceInfoUpdate {
	diu.mutation.SetUpdatedAt(t)
	return diu
}

// AddGenerationIDs adds the "generations" edge to the Generation entity by IDs.
func (diu *DeviceInfoUpdate) AddGenerationIDs(ids ...uuid.UUID) *DeviceInfoUpdate {
	diu.mutation.AddGenerationIDs(ids...)
	return diu
}

// AddGenerations adds the "generations" edges to the Generation entity.
func (diu *DeviceInfoUpdate) AddGenerations(g ...*Generation) *DeviceInfoUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return diu.AddGenerationIDs(ids...)
}

// AddUpscaleIDs adds the "upscales" edge to the Upscale entity by IDs.
func (diu *DeviceInfoUpdate) AddUpscaleIDs(ids ...uuid.UUID) *DeviceInfoUpdate {
	diu.mutation.AddUpscaleIDs(ids...)
	return diu
}

// AddUpscales adds the "upscales" edges to the Upscale entity.
func (diu *DeviceInfoUpdate) AddUpscales(u ...*Upscale) *DeviceInfoUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return diu.AddUpscaleIDs(ids...)
}

// AddVoiceoverIDs adds the "voiceovers" edge to the Voiceover entity by IDs.
func (diu *DeviceInfoUpdate) AddVoiceoverIDs(ids ...uuid.UUID) *DeviceInfoUpdate {
	diu.mutation.AddVoiceoverIDs(ids...)
	return diu
}

// AddVoiceovers adds the "voiceovers" edges to the Voiceover entity.
func (diu *DeviceInfoUpdate) AddVoiceovers(v ...*Voiceover) *DeviceInfoUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return diu.AddVoiceoverIDs(ids...)
}

// Mutation returns the DeviceInfoMutation object of the builder.
func (diu *DeviceInfoUpdate) Mutation() *DeviceInfoMutation {
	return diu.mutation
}

// ClearGenerations clears all "generations" edges to the Generation entity.
func (diu *DeviceInfoUpdate) ClearGenerations() *DeviceInfoUpdate {
	diu.mutation.ClearGenerations()
	return diu
}

// RemoveGenerationIDs removes the "generations" edge to Generation entities by IDs.
func (diu *DeviceInfoUpdate) RemoveGenerationIDs(ids ...uuid.UUID) *DeviceInfoUpdate {
	diu.mutation.RemoveGenerationIDs(ids...)
	return diu
}

// RemoveGenerations removes "generations" edges to Generation entities.
func (diu *DeviceInfoUpdate) RemoveGenerations(g ...*Generation) *DeviceInfoUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return diu.RemoveGenerationIDs(ids...)
}

// ClearUpscales clears all "upscales" edges to the Upscale entity.
func (diu *DeviceInfoUpdate) ClearUpscales() *DeviceInfoUpdate {
	diu.mutation.ClearUpscales()
	return diu
}

// RemoveUpscaleIDs removes the "upscales" edge to Upscale entities by IDs.
func (diu *DeviceInfoUpdate) RemoveUpscaleIDs(ids ...uuid.UUID) *DeviceInfoUpdate {
	diu.mutation.RemoveUpscaleIDs(ids...)
	return diu
}

// RemoveUpscales removes "upscales" edges to Upscale entities.
func (diu *DeviceInfoUpdate) RemoveUpscales(u ...*Upscale) *DeviceInfoUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return diu.RemoveUpscaleIDs(ids...)
}

// ClearVoiceovers clears all "voiceovers" edges to the Voiceover entity.
func (diu *DeviceInfoUpdate) ClearVoiceovers() *DeviceInfoUpdate {
	diu.mutation.ClearVoiceovers()
	return diu
}

// RemoveVoiceoverIDs removes the "voiceovers" edge to Voiceover entities by IDs.
func (diu *DeviceInfoUpdate) RemoveVoiceoverIDs(ids ...uuid.UUID) *DeviceInfoUpdate {
	diu.mutation.RemoveVoiceoverIDs(ids...)
	return diu
}

// RemoveVoiceovers removes "voiceovers" edges to Voiceover entities.
func (diu *DeviceInfoUpdate) RemoveVoiceovers(v ...*Voiceover) *DeviceInfoUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return diu.RemoveVoiceoverIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (diu *DeviceInfoUpdate) Save(ctx context.Context) (int, error) {
	diu.defaults()
	return withHooks(ctx, diu.sqlSave, diu.mutation, diu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (diu *DeviceInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := diu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (diu *DeviceInfoUpdate) Exec(ctx context.Context) error {
	_, err := diu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (diu *DeviceInfoUpdate) ExecX(ctx context.Context) {
	if err := diu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (diu *DeviceInfoUpdate) defaults() {
	if _, ok := diu.mutation.UpdatedAt(); !ok {
		v := deviceinfo.UpdateDefaultUpdatedAt()
		diu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (diu *DeviceInfoUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeviceInfoUpdate {
	diu.modifiers = append(diu.modifiers, modifiers...)
	return diu
}

func (diu *DeviceInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(deviceinfo.Table, deviceinfo.Columns, sqlgraph.NewFieldSpec(deviceinfo.FieldID, field.TypeUUID))
	if ps := diu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := diu.mutation.GetType(); ok {
		_spec.SetField(deviceinfo.FieldType, field.TypeString, value)
	}
	if diu.mutation.TypeCleared() {
		_spec.ClearField(deviceinfo.FieldType, field.TypeString)
	}
	if value, ok := diu.mutation.Os(); ok {
		_spec.SetField(deviceinfo.FieldOs, field.TypeString, value)
	}
	if diu.mutation.OsCleared() {
		_spec.ClearField(deviceinfo.FieldOs, field.TypeString)
	}
	if value, ok := diu.mutation.Browser(); ok {
		_spec.SetField(deviceinfo.FieldBrowser, field.TypeString, value)
	}
	if diu.mutation.BrowserCleared() {
		_spec.ClearField(deviceinfo.FieldBrowser, field.TypeString)
	}
	if value, ok := diu.mutation.UpdatedAt(); ok {
		_spec.SetField(deviceinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if diu.mutation.GenerationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceinfo.GenerationsTable,
			Columns: []string{deviceinfo.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diu.mutation.RemovedGenerationsIDs(); len(nodes) > 0 && !diu.mutation.GenerationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceinfo.GenerationsTable,
			Columns: []string{deviceinfo.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diu.mutation.GenerationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceinfo.GenerationsTable,
			Columns: []string{deviceinfo.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if diu.mutation.UpscalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceinfo.UpscalesTable,
			Columns: []string{deviceinfo.UpscalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upscale.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diu.mutation.RemovedUpscalesIDs(); len(nodes) > 0 && !diu.mutation.UpscalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceinfo.UpscalesTable,
			Columns: []string{deviceinfo.UpscalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upscale.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diu.mutation.UpscalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceinfo.UpscalesTable,
			Columns: []string{deviceinfo.UpscalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upscale.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if diu.mutation.VoiceoversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceinfo.VoiceoversTable,
			Columns: []string{deviceinfo.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceover.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diu.mutation.RemovedVoiceoversIDs(); len(nodes) > 0 && !diu.mutation.VoiceoversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceinfo.VoiceoversTable,
			Columns: []string{deviceinfo.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diu.mutation.VoiceoversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceinfo.VoiceoversTable,
			Columns: []string{deviceinfo.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(diu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, diu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deviceinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	diu.mutation.done = true
	return n, nil
}

// DeviceInfoUpdateOne is the builder for updating a single DeviceInfo entity.
type DeviceInfoUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DeviceInfoMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetType sets the "type" field.
func (diuo *DeviceInfoUpdateOne) SetType(s string) *DeviceInfoUpdateOne {
	diuo.mutation.SetType(s)
	return diuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (diuo *DeviceInfoUpdateOne) SetNillableType(s *string) *DeviceInfoUpdateOne {
	if s != nil {
		diuo.SetType(*s)
	}
	return diuo
}

// ClearType clears the value of the "type" field.
func (diuo *DeviceInfoUpdateOne) ClearType() *DeviceInfoUpdateOne {
	diuo.mutation.ClearType()
	return diuo
}

// SetOs sets the "os" field.
func (diuo *DeviceInfoUpdateOne) SetOs(s string) *DeviceInfoUpdateOne {
	diuo.mutation.SetOs(s)
	return diuo
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (diuo *DeviceInfoUpdateOne) SetNillableOs(s *string) *DeviceInfoUpdateOne {
	if s != nil {
		diuo.SetOs(*s)
	}
	return diuo
}

// ClearOs clears the value of the "os" field.
func (diuo *DeviceInfoUpdateOne) ClearOs() *DeviceInfoUpdateOne {
	diuo.mutation.ClearOs()
	return diuo
}

// SetBrowser sets the "browser" field.
func (diuo *DeviceInfoUpdateOne) SetBrowser(s string) *DeviceInfoUpdateOne {
	diuo.mutation.SetBrowser(s)
	return diuo
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (diuo *DeviceInfoUpdateOne) SetNillableBrowser(s *string) *DeviceInfoUpdateOne {
	if s != nil {
		diuo.SetBrowser(*s)
	}
	return diuo
}

// ClearBrowser clears the value of the "browser" field.
func (diuo *DeviceInfoUpdateOne) ClearBrowser() *DeviceInfoUpdateOne {
	diuo.mutation.ClearBrowser()
	return diuo
}

// SetUpdatedAt sets the "updated_at" field.
func (diuo *DeviceInfoUpdateOne) SetUpdatedAt(t time.Time) *DeviceInfoUpdateOne {
	diuo.mutation.SetUpdatedAt(t)
	return diuo
}

// AddGenerationIDs adds the "generations" edge to the Generation entity by IDs.
func (diuo *DeviceInfoUpdateOne) AddGenerationIDs(ids ...uuid.UUID) *DeviceInfoUpdateOne {
	diuo.mutation.AddGenerationIDs(ids...)
	return diuo
}

// AddGenerations adds the "generations" edges to the Generation entity.
func (diuo *DeviceInfoUpdateOne) AddGenerations(g ...*Generation) *DeviceInfoUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return diuo.AddGenerationIDs(ids...)
}

// AddUpscaleIDs adds the "upscales" edge to the Upscale entity by IDs.
func (diuo *DeviceInfoUpdateOne) AddUpscaleIDs(ids ...uuid.UUID) *DeviceInfoUpdateOne {
	diuo.mutation.AddUpscaleIDs(ids...)
	return diuo
}

// AddUpscales adds the "upscales" edges to the Upscale entity.
func (diuo *DeviceInfoUpdateOne) AddUpscales(u ...*Upscale) *DeviceInfoUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return diuo.AddUpscaleIDs(ids...)
}

// AddVoiceoverIDs adds the "voiceovers" edge to the Voiceover entity by IDs.
func (diuo *DeviceInfoUpdateOne) AddVoiceoverIDs(ids ...uuid.UUID) *DeviceInfoUpdateOne {
	diuo.mutation.AddVoiceoverIDs(ids...)
	return diuo
}

// AddVoiceovers adds the "voiceovers" edges to the Voiceover entity.
func (diuo *DeviceInfoUpdateOne) AddVoiceovers(v ...*Voiceover) *DeviceInfoUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return diuo.AddVoiceoverIDs(ids...)
}

// Mutation returns the DeviceInfoMutation object of the builder.
func (diuo *DeviceInfoUpdateOne) Mutation() *DeviceInfoMutation {
	return diuo.mutation
}

// ClearGenerations clears all "generations" edges to the Generation entity.
func (diuo *DeviceInfoUpdateOne) ClearGenerations() *DeviceInfoUpdateOne {
	diuo.mutation.ClearGenerations()
	return diuo
}

// RemoveGenerationIDs removes the "generations" edge to Generation entities by IDs.
func (diuo *DeviceInfoUpdateOne) RemoveGenerationIDs(ids ...uuid.UUID) *DeviceInfoUpdateOne {
	diuo.mutation.RemoveGenerationIDs(ids...)
	return diuo
}

// RemoveGenerations removes "generations" edges to Generation entities.
func (diuo *DeviceInfoUpdateOne) RemoveGenerations(g ...*Generation) *DeviceInfoUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return diuo.RemoveGenerationIDs(ids...)
}

// ClearUpscales clears all "upscales" edges to the Upscale entity.
func (diuo *DeviceInfoUpdateOne) ClearUpscales() *DeviceInfoUpdateOne {
	diuo.mutation.ClearUpscales()
	return diuo
}

// RemoveUpscaleIDs removes the "upscales" edge to Upscale entities by IDs.
func (diuo *DeviceInfoUpdateOne) RemoveUpscaleIDs(ids ...uuid.UUID) *DeviceInfoUpdateOne {
	diuo.mutation.RemoveUpscaleIDs(ids...)
	return diuo
}

// RemoveUpscales removes "upscales" edges to Upscale entities.
func (diuo *DeviceInfoUpdateOne) RemoveUpscales(u ...*Upscale) *DeviceInfoUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return diuo.RemoveUpscaleIDs(ids...)
}

// ClearVoiceovers clears all "voiceovers" edges to the Voiceover entity.
func (diuo *DeviceInfoUpdateOne) ClearVoiceovers() *DeviceInfoUpdateOne {
	diuo.mutation.ClearVoiceovers()
	return diuo
}

// RemoveVoiceoverIDs removes the "voiceovers" edge to Voiceover entities by IDs.
func (diuo *DeviceInfoUpdateOne) RemoveVoiceoverIDs(ids ...uuid.UUID) *DeviceInfoUpdateOne {
	diuo.mutation.RemoveVoiceoverIDs(ids...)
	return diuo
}

// RemoveVoiceovers removes "voiceovers" edges to Voiceover entities.
func (diuo *DeviceInfoUpdateOne) RemoveVoiceovers(v ...*Voiceover) *DeviceInfoUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return diuo.RemoveVoiceoverIDs(ids...)
}

// Where appends a list predicates to the DeviceInfoUpdate builder.
func (diuo *DeviceInfoUpdateOne) Where(ps ...predicate.DeviceInfo) *DeviceInfoUpdateOne {
	diuo.mutation.Where(ps...)
	return diuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (diuo *DeviceInfoUpdateOne) Select(field string, fields ...string) *DeviceInfoUpdateOne {
	diuo.fields = append([]string{field}, fields...)
	return diuo
}

// Save executes the query and returns the updated DeviceInfo entity.
func (diuo *DeviceInfoUpdateOne) Save(ctx context.Context) (*DeviceInfo, error) {
	diuo.defaults()
	return withHooks(ctx, diuo.sqlSave, diuo.mutation, diuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (diuo *DeviceInfoUpdateOne) SaveX(ctx context.Context) *DeviceInfo {
	node, err := diuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (diuo *DeviceInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := diuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (diuo *DeviceInfoUpdateOne) ExecX(ctx context.Context) {
	if err := diuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (diuo *DeviceInfoUpdateOne) defaults() {
	if _, ok := diuo.mutation.UpdatedAt(); !ok {
		v := deviceinfo.UpdateDefaultUpdatedAt()
		diuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (diuo *DeviceInfoUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeviceInfoUpdateOne {
	diuo.modifiers = append(diuo.modifiers, modifiers...)
	return diuo
}

func (diuo *DeviceInfoUpdateOne) sqlSave(ctx context.Context) (_node *DeviceInfo, err error) {
	_spec := sqlgraph.NewUpdateSpec(deviceinfo.Table, deviceinfo.Columns, sqlgraph.NewFieldSpec(deviceinfo.FieldID, field.TypeUUID))
	id, ok := diuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeviceInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := diuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deviceinfo.FieldID)
		for _, f := range fields {
			if !deviceinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deviceinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := diuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := diuo.mutation.GetType(); ok {
		_spec.SetField(deviceinfo.FieldType, field.TypeString, value)
	}
	if diuo.mutation.TypeCleared() {
		_spec.ClearField(deviceinfo.FieldType, field.TypeString)
	}
	if value, ok := diuo.mutation.Os(); ok {
		_spec.SetField(deviceinfo.FieldOs, field.TypeString, value)
	}
	if diuo.mutation.OsCleared() {
		_spec.ClearField(deviceinfo.FieldOs, field.TypeString)
	}
	if value, ok := diuo.mutation.Browser(); ok {
		_spec.SetField(deviceinfo.FieldBrowser, field.TypeString, value)
	}
	if diuo.mutation.BrowserCleared() {
		_spec.ClearField(deviceinfo.FieldBrowser, field.TypeString)
	}
	if value, ok := diuo.mutation.UpdatedAt(); ok {
		_spec.SetField(deviceinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if diuo.mutation.GenerationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceinfo.GenerationsTable,
			Columns: []string{deviceinfo.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diuo.mutation.RemovedGenerationsIDs(); len(nodes) > 0 && !diuo.mutation.GenerationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceinfo.GenerationsTable,
			Columns: []string{deviceinfo.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diuo.mutation.GenerationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceinfo.GenerationsTable,
			Columns: []string{deviceinfo.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if diuo.mutation.UpscalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceinfo.UpscalesTable,
			Columns: []string{deviceinfo.UpscalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upscale.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diuo.mutation.RemovedUpscalesIDs(); len(nodes) > 0 && !diuo.mutation.UpscalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceinfo.UpscalesTable,
			Columns: []string{deviceinfo.UpscalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upscale.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diuo.mutation.UpscalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceinfo.UpscalesTable,
			Columns: []string{deviceinfo.UpscalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upscale.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if diuo.mutation.VoiceoversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceinfo.VoiceoversTable,
			Columns: []string{deviceinfo.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceover.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diuo.mutation.RemovedVoiceoversIDs(); len(nodes) > 0 && !diuo.mutation.VoiceoversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceinfo.VoiceoversTable,
			Columns: []string{deviceinfo.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diuo.mutation.VoiceoversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceinfo.VoiceoversTable,
			Columns: []string{deviceinfo.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(diuo.modifiers...)
	_node = &DeviceInfo{config: diuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, diuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deviceinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	diuo.mutation.done = true
	return _node, nil
}
