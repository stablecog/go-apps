// Code generated by ent, DO NOT EDIT.

package tiplog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TipLog {
	return predicate.TipLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TipLog {
	return predicate.TipLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TipLog {
	return predicate.TipLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TipLog {
	return predicate.TipLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TipLog {
	return predicate.TipLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TipLog {
	return predicate.TipLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TipLog {
	return predicate.TipLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TipLog {
	return predicate.TipLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TipLog {
	return predicate.TipLog(sql.FieldLTE(FieldID, id))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int32) predicate.TipLog {
	return predicate.TipLog(sql.FieldEQ(FieldAmount, v))
}

// TippedToDiscordID applies equality check predicate on the "tipped_to_discord_id" field. It's identical to TippedToDiscordIDEQ.
func TippedToDiscordID(v string) predicate.TipLog {
	return predicate.TipLog(sql.FieldEQ(FieldTippedToDiscordID, v))
}

// TippedBy applies equality check predicate on the "tipped_by" field. It's identical to TippedByEQ.
func TippedBy(v uuid.UUID) predicate.TipLog {
	return predicate.TipLog(sql.FieldEQ(FieldTippedBy, v))
}

// TippedTo applies equality check predicate on the "tipped_to" field. It's identical to TippedToEQ.
func TippedTo(v uuid.UUID) predicate.TipLog {
	return predicate.TipLog(sql.FieldEQ(FieldTippedTo, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TipLog {
	return predicate.TipLog(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TipLog {
	return predicate.TipLog(sql.FieldEQ(FieldUpdatedAt, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int32) predicate.TipLog {
	return predicate.TipLog(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int32) predicate.TipLog {
	return predicate.TipLog(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int32) predicate.TipLog {
	return predicate.TipLog(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int32) predicate.TipLog {
	return predicate.TipLog(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int32) predicate.TipLog {
	return predicate.TipLog(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int32) predicate.TipLog {
	return predicate.TipLog(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int32) predicate.TipLog {
	return predicate.TipLog(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int32) predicate.TipLog {
	return predicate.TipLog(sql.FieldLTE(FieldAmount, v))
}

// TippedToDiscordIDEQ applies the EQ predicate on the "tipped_to_discord_id" field.
func TippedToDiscordIDEQ(v string) predicate.TipLog {
	return predicate.TipLog(sql.FieldEQ(FieldTippedToDiscordID, v))
}

// TippedToDiscordIDNEQ applies the NEQ predicate on the "tipped_to_discord_id" field.
func TippedToDiscordIDNEQ(v string) predicate.TipLog {
	return predicate.TipLog(sql.FieldNEQ(FieldTippedToDiscordID, v))
}

// TippedToDiscordIDIn applies the In predicate on the "tipped_to_discord_id" field.
func TippedToDiscordIDIn(vs ...string) predicate.TipLog {
	return predicate.TipLog(sql.FieldIn(FieldTippedToDiscordID, vs...))
}

// TippedToDiscordIDNotIn applies the NotIn predicate on the "tipped_to_discord_id" field.
func TippedToDiscordIDNotIn(vs ...string) predicate.TipLog {
	return predicate.TipLog(sql.FieldNotIn(FieldTippedToDiscordID, vs...))
}

// TippedToDiscordIDGT applies the GT predicate on the "tipped_to_discord_id" field.
func TippedToDiscordIDGT(v string) predicate.TipLog {
	return predicate.TipLog(sql.FieldGT(FieldTippedToDiscordID, v))
}

// TippedToDiscordIDGTE applies the GTE predicate on the "tipped_to_discord_id" field.
func TippedToDiscordIDGTE(v string) predicate.TipLog {
	return predicate.TipLog(sql.FieldGTE(FieldTippedToDiscordID, v))
}

// TippedToDiscordIDLT applies the LT predicate on the "tipped_to_discord_id" field.
func TippedToDiscordIDLT(v string) predicate.TipLog {
	return predicate.TipLog(sql.FieldLT(FieldTippedToDiscordID, v))
}

// TippedToDiscordIDLTE applies the LTE predicate on the "tipped_to_discord_id" field.
func TippedToDiscordIDLTE(v string) predicate.TipLog {
	return predicate.TipLog(sql.FieldLTE(FieldTippedToDiscordID, v))
}

// TippedToDiscordIDContains applies the Contains predicate on the "tipped_to_discord_id" field.
func TippedToDiscordIDContains(v string) predicate.TipLog {
	return predicate.TipLog(sql.FieldContains(FieldTippedToDiscordID, v))
}

// TippedToDiscordIDHasPrefix applies the HasPrefix predicate on the "tipped_to_discord_id" field.
func TippedToDiscordIDHasPrefix(v string) predicate.TipLog {
	return predicate.TipLog(sql.FieldHasPrefix(FieldTippedToDiscordID, v))
}

// TippedToDiscordIDHasSuffix applies the HasSuffix predicate on the "tipped_to_discord_id" field.
func TippedToDiscordIDHasSuffix(v string) predicate.TipLog {
	return predicate.TipLog(sql.FieldHasSuffix(FieldTippedToDiscordID, v))
}

// TippedToDiscordIDEqualFold applies the EqualFold predicate on the "tipped_to_discord_id" field.
func TippedToDiscordIDEqualFold(v string) predicate.TipLog {
	return predicate.TipLog(sql.FieldEqualFold(FieldTippedToDiscordID, v))
}

// TippedToDiscordIDContainsFold applies the ContainsFold predicate on the "tipped_to_discord_id" field.
func TippedToDiscordIDContainsFold(v string) predicate.TipLog {
	return predicate.TipLog(sql.FieldContainsFold(FieldTippedToDiscordID, v))
}

// TippedByEQ applies the EQ predicate on the "tipped_by" field.
func TippedByEQ(v uuid.UUID) predicate.TipLog {
	return predicate.TipLog(sql.FieldEQ(FieldTippedBy, v))
}

// TippedByNEQ applies the NEQ predicate on the "tipped_by" field.
func TippedByNEQ(v uuid.UUID) predicate.TipLog {
	return predicate.TipLog(sql.FieldNEQ(FieldTippedBy, v))
}

// TippedByIn applies the In predicate on the "tipped_by" field.
func TippedByIn(vs ...uuid.UUID) predicate.TipLog {
	return predicate.TipLog(sql.FieldIn(FieldTippedBy, vs...))
}

// TippedByNotIn applies the NotIn predicate on the "tipped_by" field.
func TippedByNotIn(vs ...uuid.UUID) predicate.TipLog {
	return predicate.TipLog(sql.FieldNotIn(FieldTippedBy, vs...))
}

// TippedToEQ applies the EQ predicate on the "tipped_to" field.
func TippedToEQ(v uuid.UUID) predicate.TipLog {
	return predicate.TipLog(sql.FieldEQ(FieldTippedTo, v))
}

// TippedToNEQ applies the NEQ predicate on the "tipped_to" field.
func TippedToNEQ(v uuid.UUID) predicate.TipLog {
	return predicate.TipLog(sql.FieldNEQ(FieldTippedTo, v))
}

// TippedToIn applies the In predicate on the "tipped_to" field.
func TippedToIn(vs ...uuid.UUID) predicate.TipLog {
	return predicate.TipLog(sql.FieldIn(FieldTippedTo, vs...))
}

// TippedToNotIn applies the NotIn predicate on the "tipped_to" field.
func TippedToNotIn(vs ...uuid.UUID) predicate.TipLog {
	return predicate.TipLog(sql.FieldNotIn(FieldTippedTo, vs...))
}

// TippedToIsNil applies the IsNil predicate on the "tipped_to" field.
func TippedToIsNil() predicate.TipLog {
	return predicate.TipLog(sql.FieldIsNull(FieldTippedTo))
}

// TippedToNotNil applies the NotNil predicate on the "tipped_to" field.
func TippedToNotNil() predicate.TipLog {
	return predicate.TipLog(sql.FieldNotNull(FieldTippedTo))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TipLog {
	return predicate.TipLog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TipLog {
	return predicate.TipLog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TipLog {
	return predicate.TipLog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TipLog {
	return predicate.TipLog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TipLog {
	return predicate.TipLog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TipLog {
	return predicate.TipLog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TipLog {
	return predicate.TipLog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TipLog {
	return predicate.TipLog(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TipLog {
	return predicate.TipLog(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TipLog {
	return predicate.TipLog(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TipLog {
	return predicate.TipLog(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TipLog {
	return predicate.TipLog(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TipLog {
	return predicate.TipLog(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TipLog {
	return predicate.TipLog(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TipLog {
	return predicate.TipLog(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TipLog {
	return predicate.TipLog(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasTipsReceived applies the HasEdge predicate on the "tips_received" edge.
func HasTipsReceived() predicate.TipLog {
	return predicate.TipLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TipsReceivedTable, TipsReceivedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTipsReceivedWith applies the HasEdge predicate on the "tips_received" edge with a given conditions (other predicates).
func HasTipsReceivedWith(preds ...predicate.User) predicate.TipLog {
	return predicate.TipLog(func(s *sql.Selector) {
		step := newTipsReceivedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTipsGiven applies the HasEdge predicate on the "tips_given" edge.
func HasTipsGiven() predicate.TipLog {
	return predicate.TipLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TipsGivenTable, TipsGivenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTipsGivenWith applies the HasEdge predicate on the "tips_given" edge with a given conditions (other predicates).
func HasTipsGivenWith(preds ...predicate.User) predicate.TipLog {
	return predicate.TipLog(func(s *sql.Selector) {
		step := newTipsGivenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TipLog) predicate.TipLog {
	return predicate.TipLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TipLog) predicate.TipLog {
	return predicate.TipLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TipLog) predicate.TipLog {
	return predicate.TipLog(sql.NotPredicates(p))
}
