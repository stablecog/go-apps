// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/disposableemail"
)

// DisposableEmailCreate is the builder for creating a DisposableEmail entity.
type DisposableEmailCreate struct {
	config
	mutation *DisposableEmailMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDomain sets the "domain" field.
func (dec *DisposableEmailCreate) SetDomain(s string) *DisposableEmailCreate {
	dec.mutation.SetDomain(s)
	return dec
}

// SetCreatedAt sets the "created_at" field.
func (dec *DisposableEmailCreate) SetCreatedAt(t time.Time) *DisposableEmailCreate {
	dec.mutation.SetCreatedAt(t)
	return dec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dec *DisposableEmailCreate) SetNillableCreatedAt(t *time.Time) *DisposableEmailCreate {
	if t != nil {
		dec.SetCreatedAt(*t)
	}
	return dec
}

// SetUpdatedAt sets the "updated_at" field.
func (dec *DisposableEmailCreate) SetUpdatedAt(t time.Time) *DisposableEmailCreate {
	dec.mutation.SetUpdatedAt(t)
	return dec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dec *DisposableEmailCreate) SetNillableUpdatedAt(t *time.Time) *DisposableEmailCreate {
	if t != nil {
		dec.SetUpdatedAt(*t)
	}
	return dec
}

// SetID sets the "id" field.
func (dec *DisposableEmailCreate) SetID(u uuid.UUID) *DisposableEmailCreate {
	dec.mutation.SetID(u)
	return dec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dec *DisposableEmailCreate) SetNillableID(u *uuid.UUID) *DisposableEmailCreate {
	if u != nil {
		dec.SetID(*u)
	}
	return dec
}

// Mutation returns the DisposableEmailMutation object of the builder.
func (dec *DisposableEmailCreate) Mutation() *DisposableEmailMutation {
	return dec.mutation
}

// Save creates the DisposableEmail in the database.
func (dec *DisposableEmailCreate) Save(ctx context.Context) (*DisposableEmail, error) {
	dec.defaults()
	return withHooks(ctx, dec.sqlSave, dec.mutation, dec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dec *DisposableEmailCreate) SaveX(ctx context.Context) *DisposableEmail {
	v, err := dec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dec *DisposableEmailCreate) Exec(ctx context.Context) error {
	_, err := dec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dec *DisposableEmailCreate) ExecX(ctx context.Context) {
	if err := dec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dec *DisposableEmailCreate) defaults() {
	if _, ok := dec.mutation.CreatedAt(); !ok {
		v := disposableemail.DefaultCreatedAt()
		dec.mutation.SetCreatedAt(v)
	}
	if _, ok := dec.mutation.UpdatedAt(); !ok {
		v := disposableemail.DefaultUpdatedAt()
		dec.mutation.SetUpdatedAt(v)
	}
	if _, ok := dec.mutation.ID(); !ok {
		v := disposableemail.DefaultID()
		dec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dec *DisposableEmailCreate) check() error {
	if _, ok := dec.mutation.Domain(); !ok {
		return &ValidationError{Name: "domain", err: errors.New(`ent: missing required field "DisposableEmail.domain"`)}
	}
	if _, ok := dec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DisposableEmail.created_at"`)}
	}
	if _, ok := dec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DisposableEmail.updated_at"`)}
	}
	return nil
}

func (dec *DisposableEmailCreate) sqlSave(ctx context.Context) (*DisposableEmail, error) {
	if err := dec.check(); err != nil {
		return nil, err
	}
	_node, _spec := dec.createSpec()
	if err := sqlgraph.CreateNode(ctx, dec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dec.mutation.id = &_node.ID
	dec.mutation.done = true
	return _node, nil
}

func (dec *DisposableEmailCreate) createSpec() (*DisposableEmail, *sqlgraph.CreateSpec) {
	var (
		_node = &DisposableEmail{config: dec.config}
		_spec = sqlgraph.NewCreateSpec(disposableemail.Table, sqlgraph.NewFieldSpec(disposableemail.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = dec.conflict
	if id, ok := dec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dec.mutation.Domain(); ok {
		_spec.SetField(disposableemail.FieldDomain, field.TypeString, value)
		_node.Domain = value
	}
	if value, ok := dec.mutation.CreatedAt(); ok {
		_spec.SetField(disposableemail.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dec.mutation.UpdatedAt(); ok {
		_spec.SetField(disposableemail.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DisposableEmail.Create().
//		SetDomain(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DisposableEmailUpsert) {
//			SetDomain(v+v).
//		}).
//		Exec(ctx)
func (dec *DisposableEmailCreate) OnConflict(opts ...sql.ConflictOption) *DisposableEmailUpsertOne {
	dec.conflict = opts
	return &DisposableEmailUpsertOne{
		create: dec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DisposableEmail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dec *DisposableEmailCreate) OnConflictColumns(columns ...string) *DisposableEmailUpsertOne {
	dec.conflict = append(dec.conflict, sql.ConflictColumns(columns...))
	return &DisposableEmailUpsertOne{
		create: dec,
	}
}

type (
	// DisposableEmailUpsertOne is the builder for "upsert"-ing
	//  one DisposableEmail node.
	DisposableEmailUpsertOne struct {
		create *DisposableEmailCreate
	}

	// DisposableEmailUpsert is the "OnConflict" setter.
	DisposableEmailUpsert struct {
		*sql.UpdateSet
	}
)

// SetDomain sets the "domain" field.
func (u *DisposableEmailUpsert) SetDomain(v string) *DisposableEmailUpsert {
	u.Set(disposableemail.FieldDomain, v)
	return u
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *DisposableEmailUpsert) UpdateDomain() *DisposableEmailUpsert {
	u.SetExcluded(disposableemail.FieldDomain)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DisposableEmailUpsert) SetUpdatedAt(v time.Time) *DisposableEmailUpsert {
	u.Set(disposableemail.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DisposableEmailUpsert) UpdateUpdatedAt() *DisposableEmailUpsert {
	u.SetExcluded(disposableemail.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DisposableEmail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(disposableemail.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DisposableEmailUpsertOne) UpdateNewValues() *DisposableEmailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(disposableemail.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(disposableemail.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DisposableEmail.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DisposableEmailUpsertOne) Ignore() *DisposableEmailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DisposableEmailUpsertOne) DoNothing() *DisposableEmailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DisposableEmailCreate.OnConflict
// documentation for more info.
func (u *DisposableEmailUpsertOne) Update(set func(*DisposableEmailUpsert)) *DisposableEmailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DisposableEmailUpsert{UpdateSet: update})
	}))
	return u
}

// SetDomain sets the "domain" field.
func (u *DisposableEmailUpsertOne) SetDomain(v string) *DisposableEmailUpsertOne {
	return u.Update(func(s *DisposableEmailUpsert) {
		s.SetDomain(v)
	})
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *DisposableEmailUpsertOne) UpdateDomain() *DisposableEmailUpsertOne {
	return u.Update(func(s *DisposableEmailUpsert) {
		s.UpdateDomain()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DisposableEmailUpsertOne) SetUpdatedAt(v time.Time) *DisposableEmailUpsertOne {
	return u.Update(func(s *DisposableEmailUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DisposableEmailUpsertOne) UpdateUpdatedAt() *DisposableEmailUpsertOne {
	return u.Update(func(s *DisposableEmailUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *DisposableEmailUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DisposableEmailCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DisposableEmailUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DisposableEmailUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DisposableEmailUpsertOne.ID is not supported by MySQL driver. Use DisposableEmailUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DisposableEmailUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DisposableEmailCreateBulk is the builder for creating many DisposableEmail entities in bulk.
type DisposableEmailCreateBulk struct {
	config
	err      error
	builders []*DisposableEmailCreate
	conflict []sql.ConflictOption
}

// Save creates the DisposableEmail entities in the database.
func (decb *DisposableEmailCreateBulk) Save(ctx context.Context) ([]*DisposableEmail, error) {
	if decb.err != nil {
		return nil, decb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(decb.builders))
	nodes := make([]*DisposableEmail, len(decb.builders))
	mutators := make([]Mutator, len(decb.builders))
	for i := range decb.builders {
		func(i int, root context.Context) {
			builder := decb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DisposableEmailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, decb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = decb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, decb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, decb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (decb *DisposableEmailCreateBulk) SaveX(ctx context.Context) []*DisposableEmail {
	v, err := decb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (decb *DisposableEmailCreateBulk) Exec(ctx context.Context) error {
	_, err := decb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (decb *DisposableEmailCreateBulk) ExecX(ctx context.Context) {
	if err := decb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DisposableEmail.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DisposableEmailUpsert) {
//			SetDomain(v+v).
//		}).
//		Exec(ctx)
func (decb *DisposableEmailCreateBulk) OnConflict(opts ...sql.ConflictOption) *DisposableEmailUpsertBulk {
	decb.conflict = opts
	return &DisposableEmailUpsertBulk{
		create: decb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DisposableEmail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (decb *DisposableEmailCreateBulk) OnConflictColumns(columns ...string) *DisposableEmailUpsertBulk {
	decb.conflict = append(decb.conflict, sql.ConflictColumns(columns...))
	return &DisposableEmailUpsertBulk{
		create: decb,
	}
}

// DisposableEmailUpsertBulk is the builder for "upsert"-ing
// a bulk of DisposableEmail nodes.
type DisposableEmailUpsertBulk struct {
	create *DisposableEmailCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DisposableEmail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(disposableemail.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DisposableEmailUpsertBulk) UpdateNewValues() *DisposableEmailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(disposableemail.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(disposableemail.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DisposableEmail.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DisposableEmailUpsertBulk) Ignore() *DisposableEmailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DisposableEmailUpsertBulk) DoNothing() *DisposableEmailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DisposableEmailCreateBulk.OnConflict
// documentation for more info.
func (u *DisposableEmailUpsertBulk) Update(set func(*DisposableEmailUpsert)) *DisposableEmailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DisposableEmailUpsert{UpdateSet: update})
	}))
	return u
}

// SetDomain sets the "domain" field.
func (u *DisposableEmailUpsertBulk) SetDomain(v string) *DisposableEmailUpsertBulk {
	return u.Update(func(s *DisposableEmailUpsert) {
		s.SetDomain(v)
	})
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *DisposableEmailUpsertBulk) UpdateDomain() *DisposableEmailUpsertBulk {
	return u.Update(func(s *DisposableEmailUpsert) {
		s.UpdateDomain()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DisposableEmailUpsertBulk) SetUpdatedAt(v time.Time) *DisposableEmailUpsertBulk {
	return u.Update(func(s *DisposableEmailUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DisposableEmailUpsertBulk) UpdateUpdatedAt() *DisposableEmailUpsertBulk {
	return u.Update(func(s *DisposableEmailUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *DisposableEmailUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DisposableEmailCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DisposableEmailCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DisposableEmailUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
