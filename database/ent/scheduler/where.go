// Code generated by ent, DO NOT EDIT.

package scheduler

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldLTE(FieldID, id))
}

// NameInWorker applies equality check predicate on the "name_in_worker" field. It's identical to NameInWorkerEQ.
func NameInWorker(v string) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldEQ(FieldNameInWorker, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldEQ(FieldIsActive, v))
}

// IsDefault applies equality check predicate on the "is_default" field. It's identical to IsDefaultEQ.
func IsDefault(v bool) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldEQ(FieldIsDefault, v))
}

// IsHidden applies equality check predicate on the "is_hidden" field. It's identical to IsHiddenEQ.
func IsHidden(v bool) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldEQ(FieldIsHidden, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameInWorkerEQ applies the EQ predicate on the "name_in_worker" field.
func NameInWorkerEQ(v string) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldEQ(FieldNameInWorker, v))
}

// NameInWorkerNEQ applies the NEQ predicate on the "name_in_worker" field.
func NameInWorkerNEQ(v string) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldNEQ(FieldNameInWorker, v))
}

// NameInWorkerIn applies the In predicate on the "name_in_worker" field.
func NameInWorkerIn(vs ...string) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldIn(FieldNameInWorker, vs...))
}

// NameInWorkerNotIn applies the NotIn predicate on the "name_in_worker" field.
func NameInWorkerNotIn(vs ...string) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldNotIn(FieldNameInWorker, vs...))
}

// NameInWorkerGT applies the GT predicate on the "name_in_worker" field.
func NameInWorkerGT(v string) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldGT(FieldNameInWorker, v))
}

// NameInWorkerGTE applies the GTE predicate on the "name_in_worker" field.
func NameInWorkerGTE(v string) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldGTE(FieldNameInWorker, v))
}

// NameInWorkerLT applies the LT predicate on the "name_in_worker" field.
func NameInWorkerLT(v string) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldLT(FieldNameInWorker, v))
}

// NameInWorkerLTE applies the LTE predicate on the "name_in_worker" field.
func NameInWorkerLTE(v string) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldLTE(FieldNameInWorker, v))
}

// NameInWorkerContains applies the Contains predicate on the "name_in_worker" field.
func NameInWorkerContains(v string) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldContains(FieldNameInWorker, v))
}

// NameInWorkerHasPrefix applies the HasPrefix predicate on the "name_in_worker" field.
func NameInWorkerHasPrefix(v string) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldHasPrefix(FieldNameInWorker, v))
}

// NameInWorkerHasSuffix applies the HasSuffix predicate on the "name_in_worker" field.
func NameInWorkerHasSuffix(v string) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldHasSuffix(FieldNameInWorker, v))
}

// NameInWorkerEqualFold applies the EqualFold predicate on the "name_in_worker" field.
func NameInWorkerEqualFold(v string) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldEqualFold(FieldNameInWorker, v))
}

// NameInWorkerContainsFold applies the ContainsFold predicate on the "name_in_worker" field.
func NameInWorkerContainsFold(v string) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldContainsFold(FieldNameInWorker, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldNEQ(FieldIsActive, v))
}

// IsDefaultEQ applies the EQ predicate on the "is_default" field.
func IsDefaultEQ(v bool) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldEQ(FieldIsDefault, v))
}

// IsDefaultNEQ applies the NEQ predicate on the "is_default" field.
func IsDefaultNEQ(v bool) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldNEQ(FieldIsDefault, v))
}

// IsHiddenEQ applies the EQ predicate on the "is_hidden" field.
func IsHiddenEQ(v bool) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldEQ(FieldIsHidden, v))
}

// IsHiddenNEQ applies the NEQ predicate on the "is_hidden" field.
func IsHiddenNEQ(v bool) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldNEQ(FieldIsHidden, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Scheduler {
	return predicate.Scheduler(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasGenerations applies the HasEdge predicate on the "generations" edge.
func HasGenerations() predicate.Scheduler {
	return predicate.Scheduler(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GenerationsTable, GenerationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGenerationsWith applies the HasEdge predicate on the "generations" edge with a given conditions (other predicates).
func HasGenerationsWith(preds ...predicate.Generation) predicate.Scheduler {
	return predicate.Scheduler(func(s *sql.Selector) {
		step := newGenerationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGenerationModels applies the HasEdge predicate on the "generation_models" edge.
func HasGenerationModels() predicate.Scheduler {
	return predicate.Scheduler(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, GenerationModelsTable, GenerationModelsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGenerationModelsWith applies the HasEdge predicate on the "generation_models" edge with a given conditions (other predicates).
func HasGenerationModelsWith(preds ...predicate.GenerationModel) predicate.Scheduler {
	return predicate.Scheduler(func(s *sql.Selector) {
		step := newGenerationModelsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Scheduler) predicate.Scheduler {
	return predicate.Scheduler(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Scheduler) predicate.Scheduler {
	return predicate.Scheduler(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Scheduler) predicate.Scheduler {
	return predicate.Scheduler(sql.NotPredicates(p))
}
