// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/apitoken"
	"github.com/stablecog/sc-go/database/ent/credit"
	"github.com/stablecog/sc-go/database/ent/generation"
	"github.com/stablecog/sc-go/database/ent/generationoutputlike"
	"github.com/stablecog/sc-go/database/ent/role"
	"github.com/stablecog/sc-go/database/ent/tiplog"
	"github.com/stablecog/sc-go/database/ent/upscale"
	"github.com/stablecog/sc-go/database/ent/user"
	"github.com/stablecog/sc-go/database/ent/voiceover"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetStripeCustomerID sets the "stripe_customer_id" field.
func (uc *UserCreate) SetStripeCustomerID(s string) *UserCreate {
	uc.mutation.SetStripeCustomerID(s)
	return uc
}

// SetActiveProductID sets the "active_product_id" field.
func (uc *UserCreate) SetActiveProductID(s string) *UserCreate {
	uc.mutation.SetActiveProductID(s)
	return uc
}

// SetNillableActiveProductID sets the "active_product_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableActiveProductID(s *string) *UserCreate {
	if s != nil {
		uc.SetActiveProductID(*s)
	}
	return uc
}

// SetLastSignInAt sets the "last_sign_in_at" field.
func (uc *UserCreate) SetLastSignInAt(t time.Time) *UserCreate {
	uc.mutation.SetLastSignInAt(t)
	return uc
}

// SetNillableLastSignInAt sets the "last_sign_in_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastSignInAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetLastSignInAt(*t)
	}
	return uc
}

// SetLastSeenAt sets the "last_seen_at" field.
func (uc *UserCreate) SetLastSeenAt(t time.Time) *UserCreate {
	uc.mutation.SetLastSeenAt(t)
	return uc
}

// SetNillableLastSeenAt sets the "last_seen_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastSeenAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetLastSeenAt(*t)
	}
	return uc
}

// SetBannedAt sets the "banned_at" field.
func (uc *UserCreate) SetBannedAt(t time.Time) *UserCreate {
	uc.mutation.SetBannedAt(t)
	return uc
}

// SetNillableBannedAt sets the "banned_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableBannedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetBannedAt(*t)
	}
	return uc
}

// SetScheduledForDeletionOn sets the "scheduled_for_deletion_on" field.
func (uc *UserCreate) SetScheduledForDeletionOn(t time.Time) *UserCreate {
	uc.mutation.SetScheduledForDeletionOn(t)
	return uc
}

// SetNillableScheduledForDeletionOn sets the "scheduled_for_deletion_on" field if the given value is not nil.
func (uc *UserCreate) SetNillableScheduledForDeletionOn(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetScheduledForDeletionOn(*t)
	}
	return uc
}

// SetDataDeletedAt sets the "data_deleted_at" field.
func (uc *UserCreate) SetDataDeletedAt(t time.Time) *UserCreate {
	uc.mutation.SetDataDeletedAt(t)
	return uc
}

// SetNillableDataDeletedAt sets the "data_deleted_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableDataDeletedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetDataDeletedAt(*t)
	}
	return uc
}

// SetWantsEmail sets the "wants_email" field.
func (uc *UserCreate) SetWantsEmail(b bool) *UserCreate {
	uc.mutation.SetWantsEmail(b)
	return uc
}

// SetNillableWantsEmail sets the "wants_email" field if the given value is not nil.
func (uc *UserCreate) SetNillableWantsEmail(b *bool) *UserCreate {
	if b != nil {
		uc.SetWantsEmail(*b)
	}
	return uc
}

// SetDiscordID sets the "discord_id" field.
func (uc *UserCreate) SetDiscordID(s string) *UserCreate {
	uc.mutation.SetDiscordID(s)
	return uc
}

// SetNillableDiscordID sets the "discord_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableDiscordID(s *string) *UserCreate {
	if s != nil {
		uc.SetDiscordID(*s)
	}
	return uc
}

// SetUsername sets the "username" field.
func (uc *UserCreate) SetUsername(s string) *UserCreate {
	uc.mutation.SetUsername(s)
	return uc
}

// SetUsernameChangedAt sets the "username_changed_at" field.
func (uc *UserCreate) SetUsernameChangedAt(t time.Time) *UserCreate {
	uc.mutation.SetUsernameChangedAt(t)
	return uc
}

// SetNillableUsernameChangedAt sets the "username_changed_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableUsernameChangedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUsernameChangedAt(*t)
	}
	return uc
}

// SetStripeHighestProductID sets the "stripe_highest_product_id" field.
func (uc *UserCreate) SetStripeHighestProductID(s string) *UserCreate {
	uc.mutation.SetStripeHighestProductID(s)
	return uc
}

// SetNillableStripeHighestProductID sets the "stripe_highest_product_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableStripeHighestProductID(s *string) *UserCreate {
	if s != nil {
		uc.SetStripeHighestProductID(*s)
	}
	return uc
}

// SetStripeHighestPriceID sets the "stripe_highest_price_id" field.
func (uc *UserCreate) SetStripeHighestPriceID(s string) *UserCreate {
	uc.mutation.SetStripeHighestPriceID(s)
	return uc
}

// SetNillableStripeHighestPriceID sets the "stripe_highest_price_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableStripeHighestPriceID(s *string) *UserCreate {
	if s != nil {
		uc.SetStripeHighestPriceID(*s)
	}
	return uc
}

// SetStripeCancelsAt sets the "stripe_cancels_at" field.
func (uc *UserCreate) SetStripeCancelsAt(t time.Time) *UserCreate {
	uc.mutation.SetStripeCancelsAt(t)
	return uc
}

// SetNillableStripeCancelsAt sets the "stripe_cancels_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableStripeCancelsAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetStripeCancelsAt(*t)
	}
	return uc
}

// SetStripeSyncedAt sets the "stripe_synced_at" field.
func (uc *UserCreate) SetStripeSyncedAt(t time.Time) *UserCreate {
	uc.mutation.SetStripeSyncedAt(t)
	return uc
}

// SetNillableStripeSyncedAt sets the "stripe_synced_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableStripeSyncedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetStripeSyncedAt(*t)
	}
	return uc
}

// SetStripeRenewsAt sets the "stripe_renews_at" field.
func (uc *UserCreate) SetStripeRenewsAt(t time.Time) *UserCreate {
	uc.mutation.SetStripeRenewsAt(t)
	return uc
}

// SetNillableStripeRenewsAt sets the "stripe_renews_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableStripeRenewsAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetStripeRenewsAt(*t)
	}
	return uc
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(u uuid.UUID) *UserCreate {
	uc.mutation.SetID(u)
	return uc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uc *UserCreate) SetNillableID(u *uuid.UUID) *UserCreate {
	if u != nil {
		uc.SetID(*u)
	}
	return uc
}

// AddGenerationIDs adds the "generations" edge to the Generation entity by IDs.
func (uc *UserCreate) AddGenerationIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddGenerationIDs(ids...)
	return uc
}

// AddGenerations adds the "generations" edges to the Generation entity.
func (uc *UserCreate) AddGenerations(g ...*Generation) *UserCreate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uc.AddGenerationIDs(ids...)
}

// AddUpscaleIDs adds the "upscales" edge to the Upscale entity by IDs.
func (uc *UserCreate) AddUpscaleIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddUpscaleIDs(ids...)
	return uc
}

// AddUpscales adds the "upscales" edges to the Upscale entity.
func (uc *UserCreate) AddUpscales(u ...*Upscale) *UserCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddUpscaleIDs(ids...)
}

// AddVoiceoverIDs adds the "voiceovers" edge to the Voiceover entity by IDs.
func (uc *UserCreate) AddVoiceoverIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddVoiceoverIDs(ids...)
	return uc
}

// AddVoiceovers adds the "voiceovers" edges to the Voiceover entity.
func (uc *UserCreate) AddVoiceovers(v ...*Voiceover) *UserCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uc.AddVoiceoverIDs(ids...)
}

// AddCreditIDs adds the "credits" edge to the Credit entity by IDs.
func (uc *UserCreate) AddCreditIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddCreditIDs(ids...)
	return uc
}

// AddCredits adds the "credits" edges to the Credit entity.
func (uc *UserCreate) AddCredits(c ...*Credit) *UserCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddCreditIDs(ids...)
}

// AddAPITokenIDs adds the "api_tokens" edge to the ApiToken entity by IDs.
func (uc *UserCreate) AddAPITokenIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddAPITokenIDs(ids...)
	return uc
}

// AddAPITokens adds the "api_tokens" edges to the ApiToken entity.
func (uc *UserCreate) AddAPITokens(a ...*ApiToken) *UserCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uc.AddAPITokenIDs(ids...)
}

// AddTipsGivenIDs adds the "tips_given" edge to the TipLog entity by IDs.
func (uc *UserCreate) AddTipsGivenIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddTipsGivenIDs(ids...)
	return uc
}

// AddTipsGiven adds the "tips_given" edges to the TipLog entity.
func (uc *UserCreate) AddTipsGiven(t ...*TipLog) *UserCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uc.AddTipsGivenIDs(ids...)
}

// AddTipsReceivedIDs adds the "tips_received" edge to the TipLog entity by IDs.
func (uc *UserCreate) AddTipsReceivedIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddTipsReceivedIDs(ids...)
	return uc
}

// AddTipsReceived adds the "tips_received" edges to the TipLog entity.
func (uc *UserCreate) AddTipsReceived(t ...*TipLog) *UserCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uc.AddTipsReceivedIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (uc *UserCreate) AddRoleIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddRoleIDs(ids...)
	return uc
}

// AddRoles adds the "roles" edges to the Role entity.
func (uc *UserCreate) AddRoles(r ...*Role) *UserCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uc.AddRoleIDs(ids...)
}

// AddGenerationOutputLikeIDs adds the "generation_output_likes" edge to the GenerationOutputLike entity by IDs.
func (uc *UserCreate) AddGenerationOutputLikeIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddGenerationOutputLikeIDs(ids...)
	return uc
}

// AddGenerationOutputLikes adds the "generation_output_likes" edges to the GenerationOutputLike entity.
func (uc *UserCreate) AddGenerationOutputLikes(g ...*GenerationOutputLike) *UserCreate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uc.AddGenerationOutputLikeIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.LastSeenAt(); !ok {
		v := user.DefaultLastSeenAt()
		uc.mutation.SetLastSeenAt(v)
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uc.mutation.ID(); !ok {
		v := user.DefaultID()
		uc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if _, ok := uc.mutation.StripeCustomerID(); !ok {
		return &ValidationError{Name: "stripe_customer_id", err: errors.New(`ent: missing required field "User.stripe_customer_id"`)}
	}
	if _, ok := uc.mutation.LastSeenAt(); !ok {
		return &ValidationError{Name: "last_seen_at", err: errors.New(`ent: missing required field "User.last_seen_at"`)}
	}
	if _, ok := uc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "User.username"`)}
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "User.updated_at"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = uc.conflict
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.StripeCustomerID(); ok {
		_spec.SetField(user.FieldStripeCustomerID, field.TypeString, value)
		_node.StripeCustomerID = value
	}
	if value, ok := uc.mutation.ActiveProductID(); ok {
		_spec.SetField(user.FieldActiveProductID, field.TypeString, value)
		_node.ActiveProductID = &value
	}
	if value, ok := uc.mutation.LastSignInAt(); ok {
		_spec.SetField(user.FieldLastSignInAt, field.TypeTime, value)
		_node.LastSignInAt = &value
	}
	if value, ok := uc.mutation.LastSeenAt(); ok {
		_spec.SetField(user.FieldLastSeenAt, field.TypeTime, value)
		_node.LastSeenAt = value
	}
	if value, ok := uc.mutation.BannedAt(); ok {
		_spec.SetField(user.FieldBannedAt, field.TypeTime, value)
		_node.BannedAt = &value
	}
	if value, ok := uc.mutation.ScheduledForDeletionOn(); ok {
		_spec.SetField(user.FieldScheduledForDeletionOn, field.TypeTime, value)
		_node.ScheduledForDeletionOn = &value
	}
	if value, ok := uc.mutation.DataDeletedAt(); ok {
		_spec.SetField(user.FieldDataDeletedAt, field.TypeTime, value)
		_node.DataDeletedAt = &value
	}
	if value, ok := uc.mutation.WantsEmail(); ok {
		_spec.SetField(user.FieldWantsEmail, field.TypeBool, value)
		_node.WantsEmail = &value
	}
	if value, ok := uc.mutation.DiscordID(); ok {
		_spec.SetField(user.FieldDiscordID, field.TypeString, value)
		_node.DiscordID = &value
	}
	if value, ok := uc.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := uc.mutation.UsernameChangedAt(); ok {
		_spec.SetField(user.FieldUsernameChangedAt, field.TypeTime, value)
		_node.UsernameChangedAt = &value
	}
	if value, ok := uc.mutation.StripeHighestProductID(); ok {
		_spec.SetField(user.FieldStripeHighestProductID, field.TypeString, value)
		_node.StripeHighestProductID = &value
	}
	if value, ok := uc.mutation.StripeHighestPriceID(); ok {
		_spec.SetField(user.FieldStripeHighestPriceID, field.TypeString, value)
		_node.StripeHighestPriceID = &value
	}
	if value, ok := uc.mutation.StripeCancelsAt(); ok {
		_spec.SetField(user.FieldStripeCancelsAt, field.TypeTime, value)
		_node.StripeCancelsAt = &value
	}
	if value, ok := uc.mutation.StripeSyncedAt(); ok {
		_spec.SetField(user.FieldStripeSyncedAt, field.TypeTime, value)
		_node.StripeSyncedAt = &value
	}
	if value, ok := uc.mutation.StripeRenewsAt(); ok {
		_spec.SetField(user.FieldStripeRenewsAt, field.TypeTime, value)
		_node.StripeRenewsAt = &value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := uc.mutation.GenerationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GenerationsTable,
			Columns: []string{user.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UpscalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpscalesTable,
			Columns: []string{user.UpscalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upscale.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.VoiceoversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VoiceoversTable,
			Columns: []string{user.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CreditsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreditsTable,
			Columns: []string{user.CreditsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.APITokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APITokensTable,
			Columns: []string{user.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.TipsGivenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TipsGivenTable,
			Columns: []string{user.TipsGivenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tiplog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.TipsReceivedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TipsReceivedTable,
			Columns: []string{user.TipsReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tiplog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.GenerationOutputLikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GenerationOutputLikesTable,
			Columns: []string{user.GenerationOutputLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generationoutputlike.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetEmail(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetEmail(v+v).
//		}).
//		Exec(ctx)
func (uc *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	uc.conflict = opts
	return &UserUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: uc,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetEmail sets the "email" field.
func (u *UserUpsert) SetEmail(v string) *UserUpsert {
	u.Set(user.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmail() *UserUpsert {
	u.SetExcluded(user.FieldEmail)
	return u
}

// SetStripeCustomerID sets the "stripe_customer_id" field.
func (u *UserUpsert) SetStripeCustomerID(v string) *UserUpsert {
	u.Set(user.FieldStripeCustomerID, v)
	return u
}

// UpdateStripeCustomerID sets the "stripe_customer_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateStripeCustomerID() *UserUpsert {
	u.SetExcluded(user.FieldStripeCustomerID)
	return u
}

// SetActiveProductID sets the "active_product_id" field.
func (u *UserUpsert) SetActiveProductID(v string) *UserUpsert {
	u.Set(user.FieldActiveProductID, v)
	return u
}

// UpdateActiveProductID sets the "active_product_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateActiveProductID() *UserUpsert {
	u.SetExcluded(user.FieldActiveProductID)
	return u
}

// ClearActiveProductID clears the value of the "active_product_id" field.
func (u *UserUpsert) ClearActiveProductID() *UserUpsert {
	u.SetNull(user.FieldActiveProductID)
	return u
}

// SetLastSignInAt sets the "last_sign_in_at" field.
func (u *UserUpsert) SetLastSignInAt(v time.Time) *UserUpsert {
	u.Set(user.FieldLastSignInAt, v)
	return u
}

// UpdateLastSignInAt sets the "last_sign_in_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateLastSignInAt() *UserUpsert {
	u.SetExcluded(user.FieldLastSignInAt)
	return u
}

// ClearLastSignInAt clears the value of the "last_sign_in_at" field.
func (u *UserUpsert) ClearLastSignInAt() *UserUpsert {
	u.SetNull(user.FieldLastSignInAt)
	return u
}

// SetLastSeenAt sets the "last_seen_at" field.
func (u *UserUpsert) SetLastSeenAt(v time.Time) *UserUpsert {
	u.Set(user.FieldLastSeenAt, v)
	return u
}

// UpdateLastSeenAt sets the "last_seen_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateLastSeenAt() *UserUpsert {
	u.SetExcluded(user.FieldLastSeenAt)
	return u
}

// SetBannedAt sets the "banned_at" field.
func (u *UserUpsert) SetBannedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldBannedAt, v)
	return u
}

// UpdateBannedAt sets the "banned_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateBannedAt() *UserUpsert {
	u.SetExcluded(user.FieldBannedAt)
	return u
}

// ClearBannedAt clears the value of the "banned_at" field.
func (u *UserUpsert) ClearBannedAt() *UserUpsert {
	u.SetNull(user.FieldBannedAt)
	return u
}

// SetScheduledForDeletionOn sets the "scheduled_for_deletion_on" field.
func (u *UserUpsert) SetScheduledForDeletionOn(v time.Time) *UserUpsert {
	u.Set(user.FieldScheduledForDeletionOn, v)
	return u
}

// UpdateScheduledForDeletionOn sets the "scheduled_for_deletion_on" field to the value that was provided on create.
func (u *UserUpsert) UpdateScheduledForDeletionOn() *UserUpsert {
	u.SetExcluded(user.FieldScheduledForDeletionOn)
	return u
}

// ClearScheduledForDeletionOn clears the value of the "scheduled_for_deletion_on" field.
func (u *UserUpsert) ClearScheduledForDeletionOn() *UserUpsert {
	u.SetNull(user.FieldScheduledForDeletionOn)
	return u
}

// SetDataDeletedAt sets the "data_deleted_at" field.
func (u *UserUpsert) SetDataDeletedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldDataDeletedAt, v)
	return u
}

// UpdateDataDeletedAt sets the "data_deleted_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateDataDeletedAt() *UserUpsert {
	u.SetExcluded(user.FieldDataDeletedAt)
	return u
}

// ClearDataDeletedAt clears the value of the "data_deleted_at" field.
func (u *UserUpsert) ClearDataDeletedAt() *UserUpsert {
	u.SetNull(user.FieldDataDeletedAt)
	return u
}

// SetWantsEmail sets the "wants_email" field.
func (u *UserUpsert) SetWantsEmail(v bool) *UserUpsert {
	u.Set(user.FieldWantsEmail, v)
	return u
}

// UpdateWantsEmail sets the "wants_email" field to the value that was provided on create.
func (u *UserUpsert) UpdateWantsEmail() *UserUpsert {
	u.SetExcluded(user.FieldWantsEmail)
	return u
}

// ClearWantsEmail clears the value of the "wants_email" field.
func (u *UserUpsert) ClearWantsEmail() *UserUpsert {
	u.SetNull(user.FieldWantsEmail)
	return u
}

// SetDiscordID sets the "discord_id" field.
func (u *UserUpsert) SetDiscordID(v string) *UserUpsert {
	u.Set(user.FieldDiscordID, v)
	return u
}

// UpdateDiscordID sets the "discord_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateDiscordID() *UserUpsert {
	u.SetExcluded(user.FieldDiscordID)
	return u
}

// ClearDiscordID clears the value of the "discord_id" field.
func (u *UserUpsert) ClearDiscordID() *UserUpsert {
	u.SetNull(user.FieldDiscordID)
	return u
}

// SetUsername sets the "username" field.
func (u *UserUpsert) SetUsername(v string) *UserUpsert {
	u.Set(user.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *UserUpsert) UpdateUsername() *UserUpsert {
	u.SetExcluded(user.FieldUsername)
	return u
}

// SetUsernameChangedAt sets the "username_changed_at" field.
func (u *UserUpsert) SetUsernameChangedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldUsernameChangedAt, v)
	return u
}

// UpdateUsernameChangedAt sets the "username_changed_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateUsernameChangedAt() *UserUpsert {
	u.SetExcluded(user.FieldUsernameChangedAt)
	return u
}

// ClearUsernameChangedAt clears the value of the "username_changed_at" field.
func (u *UserUpsert) ClearUsernameChangedAt() *UserUpsert {
	u.SetNull(user.FieldUsernameChangedAt)
	return u
}

// SetStripeHighestProductID sets the "stripe_highest_product_id" field.
func (u *UserUpsert) SetStripeHighestProductID(v string) *UserUpsert {
	u.Set(user.FieldStripeHighestProductID, v)
	return u
}

// UpdateStripeHighestProductID sets the "stripe_highest_product_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateStripeHighestProductID() *UserUpsert {
	u.SetExcluded(user.FieldStripeHighestProductID)
	return u
}

// ClearStripeHighestProductID clears the value of the "stripe_highest_product_id" field.
func (u *UserUpsert) ClearStripeHighestProductID() *UserUpsert {
	u.SetNull(user.FieldStripeHighestProductID)
	return u
}

// SetStripeHighestPriceID sets the "stripe_highest_price_id" field.
func (u *UserUpsert) SetStripeHighestPriceID(v string) *UserUpsert {
	u.Set(user.FieldStripeHighestPriceID, v)
	return u
}

// UpdateStripeHighestPriceID sets the "stripe_highest_price_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateStripeHighestPriceID() *UserUpsert {
	u.SetExcluded(user.FieldStripeHighestPriceID)
	return u
}

// ClearStripeHighestPriceID clears the value of the "stripe_highest_price_id" field.
func (u *UserUpsert) ClearStripeHighestPriceID() *UserUpsert {
	u.SetNull(user.FieldStripeHighestPriceID)
	return u
}

// SetStripeCancelsAt sets the "stripe_cancels_at" field.
func (u *UserUpsert) SetStripeCancelsAt(v time.Time) *UserUpsert {
	u.Set(user.FieldStripeCancelsAt, v)
	return u
}

// UpdateStripeCancelsAt sets the "stripe_cancels_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateStripeCancelsAt() *UserUpsert {
	u.SetExcluded(user.FieldStripeCancelsAt)
	return u
}

// ClearStripeCancelsAt clears the value of the "stripe_cancels_at" field.
func (u *UserUpsert) ClearStripeCancelsAt() *UserUpsert {
	u.SetNull(user.FieldStripeCancelsAt)
	return u
}

// SetStripeSyncedAt sets the "stripe_synced_at" field.
func (u *UserUpsert) SetStripeSyncedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldStripeSyncedAt, v)
	return u
}

// UpdateStripeSyncedAt sets the "stripe_synced_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateStripeSyncedAt() *UserUpsert {
	u.SetExcluded(user.FieldStripeSyncedAt)
	return u
}

// ClearStripeSyncedAt clears the value of the "stripe_synced_at" field.
func (u *UserUpsert) ClearStripeSyncedAt() *UserUpsert {
	u.SetNull(user.FieldStripeSyncedAt)
	return u
}

// SetStripeRenewsAt sets the "stripe_renews_at" field.
func (u *UserUpsert) SetStripeRenewsAt(v time.Time) *UserUpsert {
	u.Set(user.FieldStripeRenewsAt, v)
	return u
}

// UpdateStripeRenewsAt sets the "stripe_renews_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateStripeRenewsAt() *UserUpsert {
	u.SetExcluded(user.FieldStripeRenewsAt)
	return u
}

// ClearStripeRenewsAt clears the value of the "stripe_renews_at" field.
func (u *UserUpsert) ClearStripeRenewsAt() *UserUpsert {
	u.SetNull(user.FieldStripeRenewsAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsert) SetUpdatedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdatedAt() *UserUpsert {
	u.SetExcluded(user.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(user.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(user.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmail sets the "email" field.
func (u *UserUpsertOne) SetEmail(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetStripeCustomerID sets the "stripe_customer_id" field.
func (u *UserUpsertOne) SetStripeCustomerID(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetStripeCustomerID(v)
	})
}

// UpdateStripeCustomerID sets the "stripe_customer_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateStripeCustomerID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStripeCustomerID()
	})
}

// SetActiveProductID sets the "active_product_id" field.
func (u *UserUpsertOne) SetActiveProductID(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetActiveProductID(v)
	})
}

// UpdateActiveProductID sets the "active_product_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateActiveProductID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateActiveProductID()
	})
}

// ClearActiveProductID clears the value of the "active_product_id" field.
func (u *UserUpsertOne) ClearActiveProductID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearActiveProductID()
	})
}

// SetLastSignInAt sets the "last_sign_in_at" field.
func (u *UserUpsertOne) SetLastSignInAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLastSignInAt(v)
	})
}

// UpdateLastSignInAt sets the "last_sign_in_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLastSignInAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastSignInAt()
	})
}

// ClearLastSignInAt clears the value of the "last_sign_in_at" field.
func (u *UserUpsertOne) ClearLastSignInAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastSignInAt()
	})
}

// SetLastSeenAt sets the "last_seen_at" field.
func (u *UserUpsertOne) SetLastSeenAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLastSeenAt(v)
	})
}

// UpdateLastSeenAt sets the "last_seen_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLastSeenAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastSeenAt()
	})
}

// SetBannedAt sets the "banned_at" field.
func (u *UserUpsertOne) SetBannedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetBannedAt(v)
	})
}

// UpdateBannedAt sets the "banned_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateBannedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBannedAt()
	})
}

// ClearBannedAt clears the value of the "banned_at" field.
func (u *UserUpsertOne) ClearBannedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearBannedAt()
	})
}

// SetScheduledForDeletionOn sets the "scheduled_for_deletion_on" field.
func (u *UserUpsertOne) SetScheduledForDeletionOn(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetScheduledForDeletionOn(v)
	})
}

// UpdateScheduledForDeletionOn sets the "scheduled_for_deletion_on" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateScheduledForDeletionOn() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateScheduledForDeletionOn()
	})
}

// ClearScheduledForDeletionOn clears the value of the "scheduled_for_deletion_on" field.
func (u *UserUpsertOne) ClearScheduledForDeletionOn() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearScheduledForDeletionOn()
	})
}

// SetDataDeletedAt sets the "data_deleted_at" field.
func (u *UserUpsertOne) SetDataDeletedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetDataDeletedAt(v)
	})
}

// UpdateDataDeletedAt sets the "data_deleted_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateDataDeletedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDataDeletedAt()
	})
}

// ClearDataDeletedAt clears the value of the "data_deleted_at" field.
func (u *UserUpsertOne) ClearDataDeletedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearDataDeletedAt()
	})
}

// SetWantsEmail sets the "wants_email" field.
func (u *UserUpsertOne) SetWantsEmail(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetWantsEmail(v)
	})
}

// UpdateWantsEmail sets the "wants_email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateWantsEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateWantsEmail()
	})
}

// ClearWantsEmail clears the value of the "wants_email" field.
func (u *UserUpsertOne) ClearWantsEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearWantsEmail()
	})
}

// SetDiscordID sets the "discord_id" field.
func (u *UserUpsertOne) SetDiscordID(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetDiscordID(v)
	})
}

// UpdateDiscordID sets the "discord_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateDiscordID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDiscordID()
	})
}

// ClearDiscordID clears the value of the "discord_id" field.
func (u *UserUpsertOne) ClearDiscordID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearDiscordID()
	})
}

// SetUsername sets the "username" field.
func (u *UserUpsertOne) SetUsername(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUsername() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUsername()
	})
}

// SetUsernameChangedAt sets the "username_changed_at" field.
func (u *UserUpsertOne) SetUsernameChangedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUsernameChangedAt(v)
	})
}

// UpdateUsernameChangedAt sets the "username_changed_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUsernameChangedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUsernameChangedAt()
	})
}

// ClearUsernameChangedAt clears the value of the "username_changed_at" field.
func (u *UserUpsertOne) ClearUsernameChangedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearUsernameChangedAt()
	})
}

// SetStripeHighestProductID sets the "stripe_highest_product_id" field.
func (u *UserUpsertOne) SetStripeHighestProductID(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetStripeHighestProductID(v)
	})
}

// UpdateStripeHighestProductID sets the "stripe_highest_product_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateStripeHighestProductID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStripeHighestProductID()
	})
}

// ClearStripeHighestProductID clears the value of the "stripe_highest_product_id" field.
func (u *UserUpsertOne) ClearStripeHighestProductID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearStripeHighestProductID()
	})
}

// SetStripeHighestPriceID sets the "stripe_highest_price_id" field.
func (u *UserUpsertOne) SetStripeHighestPriceID(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetStripeHighestPriceID(v)
	})
}

// UpdateStripeHighestPriceID sets the "stripe_highest_price_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateStripeHighestPriceID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStripeHighestPriceID()
	})
}

// ClearStripeHighestPriceID clears the value of the "stripe_highest_price_id" field.
func (u *UserUpsertOne) ClearStripeHighestPriceID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearStripeHighestPriceID()
	})
}

// SetStripeCancelsAt sets the "stripe_cancels_at" field.
func (u *UserUpsertOne) SetStripeCancelsAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetStripeCancelsAt(v)
	})
}

// UpdateStripeCancelsAt sets the "stripe_cancels_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateStripeCancelsAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStripeCancelsAt()
	})
}

// ClearStripeCancelsAt clears the value of the "stripe_cancels_at" field.
func (u *UserUpsertOne) ClearStripeCancelsAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearStripeCancelsAt()
	})
}

// SetStripeSyncedAt sets the "stripe_synced_at" field.
func (u *UserUpsertOne) SetStripeSyncedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetStripeSyncedAt(v)
	})
}

// UpdateStripeSyncedAt sets the "stripe_synced_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateStripeSyncedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStripeSyncedAt()
	})
}

// ClearStripeSyncedAt clears the value of the "stripe_synced_at" field.
func (u *UserUpsertOne) ClearStripeSyncedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearStripeSyncedAt()
	})
}

// SetStripeRenewsAt sets the "stripe_renews_at" field.
func (u *UserUpsertOne) SetStripeRenewsAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetStripeRenewsAt(v)
	})
}

// UpdateStripeRenewsAt sets the "stripe_renews_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateStripeRenewsAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStripeRenewsAt()
	})
}

// ClearStripeRenewsAt clears the value of the "stripe_renews_at" field.
func (u *UserUpsertOne) ClearStripeRenewsAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearStripeRenewsAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertOne) SetUpdatedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UserUpsertOne.ID is not supported by MySQL driver. Use UserUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetEmail(v+v).
//		}).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	ucb.conflict = opts
	return &UserUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: ucb,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(user.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(user.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmail sets the "email" field.
func (u *UserUpsertBulk) SetEmail(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetStripeCustomerID sets the "stripe_customer_id" field.
func (u *UserUpsertBulk) SetStripeCustomerID(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetStripeCustomerID(v)
	})
}

// UpdateStripeCustomerID sets the "stripe_customer_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateStripeCustomerID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStripeCustomerID()
	})
}

// SetActiveProductID sets the "active_product_id" field.
func (u *UserUpsertBulk) SetActiveProductID(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetActiveProductID(v)
	})
}

// UpdateActiveProductID sets the "active_product_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateActiveProductID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateActiveProductID()
	})
}

// ClearActiveProductID clears the value of the "active_product_id" field.
func (u *UserUpsertBulk) ClearActiveProductID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearActiveProductID()
	})
}

// SetLastSignInAt sets the "last_sign_in_at" field.
func (u *UserUpsertBulk) SetLastSignInAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLastSignInAt(v)
	})
}

// UpdateLastSignInAt sets the "last_sign_in_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLastSignInAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastSignInAt()
	})
}

// ClearLastSignInAt clears the value of the "last_sign_in_at" field.
func (u *UserUpsertBulk) ClearLastSignInAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastSignInAt()
	})
}

// SetLastSeenAt sets the "last_seen_at" field.
func (u *UserUpsertBulk) SetLastSeenAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLastSeenAt(v)
	})
}

// UpdateLastSeenAt sets the "last_seen_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLastSeenAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastSeenAt()
	})
}

// SetBannedAt sets the "banned_at" field.
func (u *UserUpsertBulk) SetBannedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetBannedAt(v)
	})
}

// UpdateBannedAt sets the "banned_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateBannedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBannedAt()
	})
}

// ClearBannedAt clears the value of the "banned_at" field.
func (u *UserUpsertBulk) ClearBannedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearBannedAt()
	})
}

// SetScheduledForDeletionOn sets the "scheduled_for_deletion_on" field.
func (u *UserUpsertBulk) SetScheduledForDeletionOn(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetScheduledForDeletionOn(v)
	})
}

// UpdateScheduledForDeletionOn sets the "scheduled_for_deletion_on" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateScheduledForDeletionOn() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateScheduledForDeletionOn()
	})
}

// ClearScheduledForDeletionOn clears the value of the "scheduled_for_deletion_on" field.
func (u *UserUpsertBulk) ClearScheduledForDeletionOn() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearScheduledForDeletionOn()
	})
}

// SetDataDeletedAt sets the "data_deleted_at" field.
func (u *UserUpsertBulk) SetDataDeletedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetDataDeletedAt(v)
	})
}

// UpdateDataDeletedAt sets the "data_deleted_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateDataDeletedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDataDeletedAt()
	})
}

// ClearDataDeletedAt clears the value of the "data_deleted_at" field.
func (u *UserUpsertBulk) ClearDataDeletedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearDataDeletedAt()
	})
}

// SetWantsEmail sets the "wants_email" field.
func (u *UserUpsertBulk) SetWantsEmail(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetWantsEmail(v)
	})
}

// UpdateWantsEmail sets the "wants_email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateWantsEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateWantsEmail()
	})
}

// ClearWantsEmail clears the value of the "wants_email" field.
func (u *UserUpsertBulk) ClearWantsEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearWantsEmail()
	})
}

// SetDiscordID sets the "discord_id" field.
func (u *UserUpsertBulk) SetDiscordID(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetDiscordID(v)
	})
}

// UpdateDiscordID sets the "discord_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateDiscordID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDiscordID()
	})
}

// ClearDiscordID clears the value of the "discord_id" field.
func (u *UserUpsertBulk) ClearDiscordID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearDiscordID()
	})
}

// SetUsername sets the "username" field.
func (u *UserUpsertBulk) SetUsername(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUsername() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUsername()
	})
}

// SetUsernameChangedAt sets the "username_changed_at" field.
func (u *UserUpsertBulk) SetUsernameChangedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUsernameChangedAt(v)
	})
}

// UpdateUsernameChangedAt sets the "username_changed_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUsernameChangedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUsernameChangedAt()
	})
}

// ClearUsernameChangedAt clears the value of the "username_changed_at" field.
func (u *UserUpsertBulk) ClearUsernameChangedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearUsernameChangedAt()
	})
}

// SetStripeHighestProductID sets the "stripe_highest_product_id" field.
func (u *UserUpsertBulk) SetStripeHighestProductID(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetStripeHighestProductID(v)
	})
}

// UpdateStripeHighestProductID sets the "stripe_highest_product_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateStripeHighestProductID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStripeHighestProductID()
	})
}

// ClearStripeHighestProductID clears the value of the "stripe_highest_product_id" field.
func (u *UserUpsertBulk) ClearStripeHighestProductID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearStripeHighestProductID()
	})
}

// SetStripeHighestPriceID sets the "stripe_highest_price_id" field.
func (u *UserUpsertBulk) SetStripeHighestPriceID(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetStripeHighestPriceID(v)
	})
}

// UpdateStripeHighestPriceID sets the "stripe_highest_price_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateStripeHighestPriceID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStripeHighestPriceID()
	})
}

// ClearStripeHighestPriceID clears the value of the "stripe_highest_price_id" field.
func (u *UserUpsertBulk) ClearStripeHighestPriceID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearStripeHighestPriceID()
	})
}

// SetStripeCancelsAt sets the "stripe_cancels_at" field.
func (u *UserUpsertBulk) SetStripeCancelsAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetStripeCancelsAt(v)
	})
}

// UpdateStripeCancelsAt sets the "stripe_cancels_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateStripeCancelsAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStripeCancelsAt()
	})
}

// ClearStripeCancelsAt clears the value of the "stripe_cancels_at" field.
func (u *UserUpsertBulk) ClearStripeCancelsAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearStripeCancelsAt()
	})
}

// SetStripeSyncedAt sets the "stripe_synced_at" field.
func (u *UserUpsertBulk) SetStripeSyncedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetStripeSyncedAt(v)
	})
}

// UpdateStripeSyncedAt sets the "stripe_synced_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateStripeSyncedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStripeSyncedAt()
	})
}

// ClearStripeSyncedAt clears the value of the "stripe_synced_at" field.
func (u *UserUpsertBulk) ClearStripeSyncedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearStripeSyncedAt()
	})
}

// SetStripeRenewsAt sets the "stripe_renews_at" field.
func (u *UserUpsertBulk) SetStripeRenewsAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetStripeRenewsAt(v)
	})
}

// UpdateStripeRenewsAt sets the "stripe_renews_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateStripeRenewsAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStripeRenewsAt()
	})
}

// ClearStripeRenewsAt clears the value of the "stripe_renews_at" field.
func (u *UserUpsertBulk) ClearStripeRenewsAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearStripeRenewsAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertBulk) SetUpdatedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
