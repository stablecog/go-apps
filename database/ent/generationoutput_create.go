// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/generation"
	"github.com/stablecog/sc-go/database/ent/generationoutput"
	"github.com/stablecog/sc-go/database/ent/generationoutputlike"
	"github.com/stablecog/sc-go/database/ent/upscaleoutput"
)

// GenerationOutputCreate is the builder for creating a GenerationOutput entity.
type GenerationOutputCreate struct {
	config
	mutation *GenerationOutputMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetImagePath sets the "image_path" field.
func (goc *GenerationOutputCreate) SetImagePath(s string) *GenerationOutputCreate {
	goc.mutation.SetImagePath(s)
	return goc
}

// SetUpscaledImagePath sets the "upscaled_image_path" field.
func (goc *GenerationOutputCreate) SetUpscaledImagePath(s string) *GenerationOutputCreate {
	goc.mutation.SetUpscaledImagePath(s)
	return goc
}

// SetNillableUpscaledImagePath sets the "upscaled_image_path" field if the given value is not nil.
func (goc *GenerationOutputCreate) SetNillableUpscaledImagePath(s *string) *GenerationOutputCreate {
	if s != nil {
		goc.SetUpscaledImagePath(*s)
	}
	return goc
}

// SetGalleryStatus sets the "gallery_status" field.
func (goc *GenerationOutputCreate) SetGalleryStatus(gs generationoutput.GalleryStatus) *GenerationOutputCreate {
	goc.mutation.SetGalleryStatus(gs)
	return goc
}

// SetNillableGalleryStatus sets the "gallery_status" field if the given value is not nil.
func (goc *GenerationOutputCreate) SetNillableGalleryStatus(gs *generationoutput.GalleryStatus) *GenerationOutputCreate {
	if gs != nil {
		goc.SetGalleryStatus(*gs)
	}
	return goc
}

// SetIsFavorited sets the "is_favorited" field.
func (goc *GenerationOutputCreate) SetIsFavorited(b bool) *GenerationOutputCreate {
	goc.mutation.SetIsFavorited(b)
	return goc
}

// SetNillableIsFavorited sets the "is_favorited" field if the given value is not nil.
func (goc *GenerationOutputCreate) SetNillableIsFavorited(b *bool) *GenerationOutputCreate {
	if b != nil {
		goc.SetIsFavorited(*b)
	}
	return goc
}

// SetHasEmbeddings sets the "has_embeddings" field.
func (goc *GenerationOutputCreate) SetHasEmbeddings(b bool) *GenerationOutputCreate {
	goc.mutation.SetHasEmbeddings(b)
	return goc
}

// SetNillableHasEmbeddings sets the "has_embeddings" field if the given value is not nil.
func (goc *GenerationOutputCreate) SetNillableHasEmbeddings(b *bool) *GenerationOutputCreate {
	if b != nil {
		goc.SetHasEmbeddings(*b)
	}
	return goc
}

// SetHasEmbeddingsNew sets the "has_embeddings_new" field.
func (goc *GenerationOutputCreate) SetHasEmbeddingsNew(b bool) *GenerationOutputCreate {
	goc.mutation.SetHasEmbeddingsNew(b)
	return goc
}

// SetNillableHasEmbeddingsNew sets the "has_embeddings_new" field if the given value is not nil.
func (goc *GenerationOutputCreate) SetNillableHasEmbeddingsNew(b *bool) *GenerationOutputCreate {
	if b != nil {
		goc.SetHasEmbeddingsNew(*b)
	}
	return goc
}

// SetIsPublic sets the "is_public" field.
func (goc *GenerationOutputCreate) SetIsPublic(b bool) *GenerationOutputCreate {
	goc.mutation.SetIsPublic(b)
	return goc
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (goc *GenerationOutputCreate) SetNillableIsPublic(b *bool) *GenerationOutputCreate {
	if b != nil {
		goc.SetIsPublic(*b)
	}
	return goc
}

// SetAestheticRatingScore sets the "aesthetic_rating_score" field.
func (goc *GenerationOutputCreate) SetAestheticRatingScore(f float32) *GenerationOutputCreate {
	goc.mutation.SetAestheticRatingScore(f)
	return goc
}

// SetNillableAestheticRatingScore sets the "aesthetic_rating_score" field if the given value is not nil.
func (goc *GenerationOutputCreate) SetNillableAestheticRatingScore(f *float32) *GenerationOutputCreate {
	if f != nil {
		goc.SetAestheticRatingScore(*f)
	}
	return goc
}

// SetAestheticArtifactScore sets the "aesthetic_artifact_score" field.
func (goc *GenerationOutputCreate) SetAestheticArtifactScore(f float32) *GenerationOutputCreate {
	goc.mutation.SetAestheticArtifactScore(f)
	return goc
}

// SetNillableAestheticArtifactScore sets the "aesthetic_artifact_score" field if the given value is not nil.
func (goc *GenerationOutputCreate) SetNillableAestheticArtifactScore(f *float32) *GenerationOutputCreate {
	if f != nil {
		goc.SetAestheticArtifactScore(*f)
	}
	return goc
}

// SetLikeCount sets the "like_count" field.
func (goc *GenerationOutputCreate) SetLikeCount(i int) *GenerationOutputCreate {
	goc.mutation.SetLikeCount(i)
	return goc
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (goc *GenerationOutputCreate) SetNillableLikeCount(i *int) *GenerationOutputCreate {
	if i != nil {
		goc.SetLikeCount(*i)
	}
	return goc
}

// SetGenerationID sets the "generation_id" field.
func (goc *GenerationOutputCreate) SetGenerationID(u uuid.UUID) *GenerationOutputCreate {
	goc.mutation.SetGenerationID(u)
	return goc
}

// SetDeletedAt sets the "deleted_at" field.
func (goc *GenerationOutputCreate) SetDeletedAt(t time.Time) *GenerationOutputCreate {
	goc.mutation.SetDeletedAt(t)
	return goc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (goc *GenerationOutputCreate) SetNillableDeletedAt(t *time.Time) *GenerationOutputCreate {
	if t != nil {
		goc.SetDeletedAt(*t)
	}
	return goc
}

// SetCreatedAt sets the "created_at" field.
func (goc *GenerationOutputCreate) SetCreatedAt(t time.Time) *GenerationOutputCreate {
	goc.mutation.SetCreatedAt(t)
	return goc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (goc *GenerationOutputCreate) SetNillableCreatedAt(t *time.Time) *GenerationOutputCreate {
	if t != nil {
		goc.SetCreatedAt(*t)
	}
	return goc
}

// SetUpdatedAt sets the "updated_at" field.
func (goc *GenerationOutputCreate) SetUpdatedAt(t time.Time) *GenerationOutputCreate {
	goc.mutation.SetUpdatedAt(t)
	return goc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (goc *GenerationOutputCreate) SetNillableUpdatedAt(t *time.Time) *GenerationOutputCreate {
	if t != nil {
		goc.SetUpdatedAt(*t)
	}
	return goc
}

// SetID sets the "id" field.
func (goc *GenerationOutputCreate) SetID(u uuid.UUID) *GenerationOutputCreate {
	goc.mutation.SetID(u)
	return goc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (goc *GenerationOutputCreate) SetNillableID(u *uuid.UUID) *GenerationOutputCreate {
	if u != nil {
		goc.SetID(*u)
	}
	return goc
}

// SetGenerationsID sets the "generations" edge to the Generation entity by ID.
func (goc *GenerationOutputCreate) SetGenerationsID(id uuid.UUID) *GenerationOutputCreate {
	goc.mutation.SetGenerationsID(id)
	return goc
}

// SetGenerations sets the "generations" edge to the Generation entity.
func (goc *GenerationOutputCreate) SetGenerations(g *Generation) *GenerationOutputCreate {
	return goc.SetGenerationsID(g.ID)
}

// SetUpscaleOutputsID sets the "upscale_outputs" edge to the UpscaleOutput entity by ID.
func (goc *GenerationOutputCreate) SetUpscaleOutputsID(id uuid.UUID) *GenerationOutputCreate {
	goc.mutation.SetUpscaleOutputsID(id)
	return goc
}

// SetNillableUpscaleOutputsID sets the "upscale_outputs" edge to the UpscaleOutput entity by ID if the given value is not nil.
func (goc *GenerationOutputCreate) SetNillableUpscaleOutputsID(id *uuid.UUID) *GenerationOutputCreate {
	if id != nil {
		goc = goc.SetUpscaleOutputsID(*id)
	}
	return goc
}

// SetUpscaleOutputs sets the "upscale_outputs" edge to the UpscaleOutput entity.
func (goc *GenerationOutputCreate) SetUpscaleOutputs(u *UpscaleOutput) *GenerationOutputCreate {
	return goc.SetUpscaleOutputsID(u.ID)
}

// AddGenerationOutputLikeIDs adds the "generation_output_likes" edge to the GenerationOutputLike entity by IDs.
func (goc *GenerationOutputCreate) AddGenerationOutputLikeIDs(ids ...uuid.UUID) *GenerationOutputCreate {
	goc.mutation.AddGenerationOutputLikeIDs(ids...)
	return goc
}

// AddGenerationOutputLikes adds the "generation_output_likes" edges to the GenerationOutputLike entity.
func (goc *GenerationOutputCreate) AddGenerationOutputLikes(g ...*GenerationOutputLike) *GenerationOutputCreate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return goc.AddGenerationOutputLikeIDs(ids...)
}

// Mutation returns the GenerationOutputMutation object of the builder.
func (goc *GenerationOutputCreate) Mutation() *GenerationOutputMutation {
	return goc.mutation
}

// Save creates the GenerationOutput in the database.
func (goc *GenerationOutputCreate) Save(ctx context.Context) (*GenerationOutput, error) {
	goc.defaults()
	return withHooks[*GenerationOutput, GenerationOutputMutation](ctx, goc.sqlSave, goc.mutation, goc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (goc *GenerationOutputCreate) SaveX(ctx context.Context) *GenerationOutput {
	v, err := goc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (goc *GenerationOutputCreate) Exec(ctx context.Context) error {
	_, err := goc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (goc *GenerationOutputCreate) ExecX(ctx context.Context) {
	if err := goc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (goc *GenerationOutputCreate) defaults() {
	if _, ok := goc.mutation.GalleryStatus(); !ok {
		v := generationoutput.DefaultGalleryStatus
		goc.mutation.SetGalleryStatus(v)
	}
	if _, ok := goc.mutation.IsFavorited(); !ok {
		v := generationoutput.DefaultIsFavorited
		goc.mutation.SetIsFavorited(v)
	}
	if _, ok := goc.mutation.HasEmbeddings(); !ok {
		v := generationoutput.DefaultHasEmbeddings
		goc.mutation.SetHasEmbeddings(v)
	}
	if _, ok := goc.mutation.HasEmbeddingsNew(); !ok {
		v := generationoutput.DefaultHasEmbeddingsNew
		goc.mutation.SetHasEmbeddingsNew(v)
	}
	if _, ok := goc.mutation.IsPublic(); !ok {
		v := generationoutput.DefaultIsPublic
		goc.mutation.SetIsPublic(v)
	}
	if _, ok := goc.mutation.AestheticRatingScore(); !ok {
		v := generationoutput.DefaultAestheticRatingScore
		goc.mutation.SetAestheticRatingScore(v)
	}
	if _, ok := goc.mutation.AestheticArtifactScore(); !ok {
		v := generationoutput.DefaultAestheticArtifactScore
		goc.mutation.SetAestheticArtifactScore(v)
	}
	if _, ok := goc.mutation.LikeCount(); !ok {
		v := generationoutput.DefaultLikeCount
		goc.mutation.SetLikeCount(v)
	}
	if _, ok := goc.mutation.CreatedAt(); !ok {
		v := generationoutput.DefaultCreatedAt()
		goc.mutation.SetCreatedAt(v)
	}
	if _, ok := goc.mutation.UpdatedAt(); !ok {
		v := generationoutput.DefaultUpdatedAt()
		goc.mutation.SetUpdatedAt(v)
	}
	if _, ok := goc.mutation.ID(); !ok {
		v := generationoutput.DefaultID()
		goc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (goc *GenerationOutputCreate) check() error {
	if _, ok := goc.mutation.ImagePath(); !ok {
		return &ValidationError{Name: "image_path", err: errors.New(`ent: missing required field "GenerationOutput.image_path"`)}
	}
	if _, ok := goc.mutation.GalleryStatus(); !ok {
		return &ValidationError{Name: "gallery_status", err: errors.New(`ent: missing required field "GenerationOutput.gallery_status"`)}
	}
	if v, ok := goc.mutation.GalleryStatus(); ok {
		if err := generationoutput.GalleryStatusValidator(v); err != nil {
			return &ValidationError{Name: "gallery_status", err: fmt.Errorf(`ent: validator failed for field "GenerationOutput.gallery_status": %w`, err)}
		}
	}
	if _, ok := goc.mutation.IsFavorited(); !ok {
		return &ValidationError{Name: "is_favorited", err: errors.New(`ent: missing required field "GenerationOutput.is_favorited"`)}
	}
	if _, ok := goc.mutation.HasEmbeddings(); !ok {
		return &ValidationError{Name: "has_embeddings", err: errors.New(`ent: missing required field "GenerationOutput.has_embeddings"`)}
	}
	if _, ok := goc.mutation.HasEmbeddingsNew(); !ok {
		return &ValidationError{Name: "has_embeddings_new", err: errors.New(`ent: missing required field "GenerationOutput.has_embeddings_new"`)}
	}
	if _, ok := goc.mutation.IsPublic(); !ok {
		return &ValidationError{Name: "is_public", err: errors.New(`ent: missing required field "GenerationOutput.is_public"`)}
	}
	if _, ok := goc.mutation.AestheticRatingScore(); !ok {
		return &ValidationError{Name: "aesthetic_rating_score", err: errors.New(`ent: missing required field "GenerationOutput.aesthetic_rating_score"`)}
	}
	if _, ok := goc.mutation.AestheticArtifactScore(); !ok {
		return &ValidationError{Name: "aesthetic_artifact_score", err: errors.New(`ent: missing required field "GenerationOutput.aesthetic_artifact_score"`)}
	}
	if _, ok := goc.mutation.LikeCount(); !ok {
		return &ValidationError{Name: "like_count", err: errors.New(`ent: missing required field "GenerationOutput.like_count"`)}
	}
	if _, ok := goc.mutation.GenerationID(); !ok {
		return &ValidationError{Name: "generation_id", err: errors.New(`ent: missing required field "GenerationOutput.generation_id"`)}
	}
	if _, ok := goc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GenerationOutput.created_at"`)}
	}
	if _, ok := goc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "GenerationOutput.updated_at"`)}
	}
	if _, ok := goc.mutation.GenerationsID(); !ok {
		return &ValidationError{Name: "generations", err: errors.New(`ent: missing required edge "GenerationOutput.generations"`)}
	}
	return nil
}

func (goc *GenerationOutputCreate) sqlSave(ctx context.Context) (*GenerationOutput, error) {
	if err := goc.check(); err != nil {
		return nil, err
	}
	_node, _spec := goc.createSpec()
	if err := sqlgraph.CreateNode(ctx, goc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	goc.mutation.id = &_node.ID
	goc.mutation.done = true
	return _node, nil
}

func (goc *GenerationOutputCreate) createSpec() (*GenerationOutput, *sqlgraph.CreateSpec) {
	var (
		_node = &GenerationOutput{config: goc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: generationoutput.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: generationoutput.FieldID,
			},
		}
	)
	_spec.OnConflict = goc.conflict
	if id, ok := goc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := goc.mutation.ImagePath(); ok {
		_spec.SetField(generationoutput.FieldImagePath, field.TypeString, value)
		_node.ImagePath = value
	}
	if value, ok := goc.mutation.UpscaledImagePath(); ok {
		_spec.SetField(generationoutput.FieldUpscaledImagePath, field.TypeString, value)
		_node.UpscaledImagePath = &value
	}
	if value, ok := goc.mutation.GalleryStatus(); ok {
		_spec.SetField(generationoutput.FieldGalleryStatus, field.TypeEnum, value)
		_node.GalleryStatus = value
	}
	if value, ok := goc.mutation.IsFavorited(); ok {
		_spec.SetField(generationoutput.FieldIsFavorited, field.TypeBool, value)
		_node.IsFavorited = value
	}
	if value, ok := goc.mutation.HasEmbeddings(); ok {
		_spec.SetField(generationoutput.FieldHasEmbeddings, field.TypeBool, value)
		_node.HasEmbeddings = value
	}
	if value, ok := goc.mutation.HasEmbeddingsNew(); ok {
		_spec.SetField(generationoutput.FieldHasEmbeddingsNew, field.TypeBool, value)
		_node.HasEmbeddingsNew = value
	}
	if value, ok := goc.mutation.IsPublic(); ok {
		_spec.SetField(generationoutput.FieldIsPublic, field.TypeBool, value)
		_node.IsPublic = value
	}
	if value, ok := goc.mutation.AestheticRatingScore(); ok {
		_spec.SetField(generationoutput.FieldAestheticRatingScore, field.TypeFloat32, value)
		_node.AestheticRatingScore = value
	}
	if value, ok := goc.mutation.AestheticArtifactScore(); ok {
		_spec.SetField(generationoutput.FieldAestheticArtifactScore, field.TypeFloat32, value)
		_node.AestheticArtifactScore = value
	}
	if value, ok := goc.mutation.LikeCount(); ok {
		_spec.SetField(generationoutput.FieldLikeCount, field.TypeInt, value)
		_node.LikeCount = value
	}
	if value, ok := goc.mutation.DeletedAt(); ok {
		_spec.SetField(generationoutput.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := goc.mutation.CreatedAt(); ok {
		_spec.SetField(generationoutput.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := goc.mutation.UpdatedAt(); ok {
		_spec.SetField(generationoutput.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := goc.mutation.GenerationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generationoutput.GenerationsTable,
			Columns: []string{generationoutput.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GenerationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := goc.mutation.UpscaleOutputsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   generationoutput.UpscaleOutputsTable,
			Columns: []string{generationoutput.UpscaleOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: upscaleoutput.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := goc.mutation.GenerationOutputLikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   generationoutput.GenerationOutputLikesTable,
			Columns: []string{generationoutput.GenerationOutputLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generationoutputlike.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GenerationOutput.Create().
//		SetImagePath(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GenerationOutputUpsert) {
//			SetImagePath(v+v).
//		}).
//		Exec(ctx)
func (goc *GenerationOutputCreate) OnConflict(opts ...sql.ConflictOption) *GenerationOutputUpsertOne {
	goc.conflict = opts
	return &GenerationOutputUpsertOne{
		create: goc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GenerationOutput.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (goc *GenerationOutputCreate) OnConflictColumns(columns ...string) *GenerationOutputUpsertOne {
	goc.conflict = append(goc.conflict, sql.ConflictColumns(columns...))
	return &GenerationOutputUpsertOne{
		create: goc,
	}
}

type (
	// GenerationOutputUpsertOne is the builder for "upsert"-ing
	//  one GenerationOutput node.
	GenerationOutputUpsertOne struct {
		create *GenerationOutputCreate
	}

	// GenerationOutputUpsert is the "OnConflict" setter.
	GenerationOutputUpsert struct {
		*sql.UpdateSet
	}
)

// SetImagePath sets the "image_path" field.
func (u *GenerationOutputUpsert) SetImagePath(v string) *GenerationOutputUpsert {
	u.Set(generationoutput.FieldImagePath, v)
	return u
}

// UpdateImagePath sets the "image_path" field to the value that was provided on create.
func (u *GenerationOutputUpsert) UpdateImagePath() *GenerationOutputUpsert {
	u.SetExcluded(generationoutput.FieldImagePath)
	return u
}

// SetUpscaledImagePath sets the "upscaled_image_path" field.
func (u *GenerationOutputUpsert) SetUpscaledImagePath(v string) *GenerationOutputUpsert {
	u.Set(generationoutput.FieldUpscaledImagePath, v)
	return u
}

// UpdateUpscaledImagePath sets the "upscaled_image_path" field to the value that was provided on create.
func (u *GenerationOutputUpsert) UpdateUpscaledImagePath() *GenerationOutputUpsert {
	u.SetExcluded(generationoutput.FieldUpscaledImagePath)
	return u
}

// ClearUpscaledImagePath clears the value of the "upscaled_image_path" field.
func (u *GenerationOutputUpsert) ClearUpscaledImagePath() *GenerationOutputUpsert {
	u.SetNull(generationoutput.FieldUpscaledImagePath)
	return u
}

// SetGalleryStatus sets the "gallery_status" field.
func (u *GenerationOutputUpsert) SetGalleryStatus(v generationoutput.GalleryStatus) *GenerationOutputUpsert {
	u.Set(generationoutput.FieldGalleryStatus, v)
	return u
}

// UpdateGalleryStatus sets the "gallery_status" field to the value that was provided on create.
func (u *GenerationOutputUpsert) UpdateGalleryStatus() *GenerationOutputUpsert {
	u.SetExcluded(generationoutput.FieldGalleryStatus)
	return u
}

// SetIsFavorited sets the "is_favorited" field.
func (u *GenerationOutputUpsert) SetIsFavorited(v bool) *GenerationOutputUpsert {
	u.Set(generationoutput.FieldIsFavorited, v)
	return u
}

// UpdateIsFavorited sets the "is_favorited" field to the value that was provided on create.
func (u *GenerationOutputUpsert) UpdateIsFavorited() *GenerationOutputUpsert {
	u.SetExcluded(generationoutput.FieldIsFavorited)
	return u
}

// SetHasEmbeddings sets the "has_embeddings" field.
func (u *GenerationOutputUpsert) SetHasEmbeddings(v bool) *GenerationOutputUpsert {
	u.Set(generationoutput.FieldHasEmbeddings, v)
	return u
}

// UpdateHasEmbeddings sets the "has_embeddings" field to the value that was provided on create.
func (u *GenerationOutputUpsert) UpdateHasEmbeddings() *GenerationOutputUpsert {
	u.SetExcluded(generationoutput.FieldHasEmbeddings)
	return u
}

// SetHasEmbeddingsNew sets the "has_embeddings_new" field.
func (u *GenerationOutputUpsert) SetHasEmbeddingsNew(v bool) *GenerationOutputUpsert {
	u.Set(generationoutput.FieldHasEmbeddingsNew, v)
	return u
}

// UpdateHasEmbeddingsNew sets the "has_embeddings_new" field to the value that was provided on create.
func (u *GenerationOutputUpsert) UpdateHasEmbeddingsNew() *GenerationOutputUpsert {
	u.SetExcluded(generationoutput.FieldHasEmbeddingsNew)
	return u
}

// SetIsPublic sets the "is_public" field.
func (u *GenerationOutputUpsert) SetIsPublic(v bool) *GenerationOutputUpsert {
	u.Set(generationoutput.FieldIsPublic, v)
	return u
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *GenerationOutputUpsert) UpdateIsPublic() *GenerationOutputUpsert {
	u.SetExcluded(generationoutput.FieldIsPublic)
	return u
}

// SetAestheticRatingScore sets the "aesthetic_rating_score" field.
func (u *GenerationOutputUpsert) SetAestheticRatingScore(v float32) *GenerationOutputUpsert {
	u.Set(generationoutput.FieldAestheticRatingScore, v)
	return u
}

// UpdateAestheticRatingScore sets the "aesthetic_rating_score" field to the value that was provided on create.
func (u *GenerationOutputUpsert) UpdateAestheticRatingScore() *GenerationOutputUpsert {
	u.SetExcluded(generationoutput.FieldAestheticRatingScore)
	return u
}

// AddAestheticRatingScore adds v to the "aesthetic_rating_score" field.
func (u *GenerationOutputUpsert) AddAestheticRatingScore(v float32) *GenerationOutputUpsert {
	u.Add(generationoutput.FieldAestheticRatingScore, v)
	return u
}

// SetAestheticArtifactScore sets the "aesthetic_artifact_score" field.
func (u *GenerationOutputUpsert) SetAestheticArtifactScore(v float32) *GenerationOutputUpsert {
	u.Set(generationoutput.FieldAestheticArtifactScore, v)
	return u
}

// UpdateAestheticArtifactScore sets the "aesthetic_artifact_score" field to the value that was provided on create.
func (u *GenerationOutputUpsert) UpdateAestheticArtifactScore() *GenerationOutputUpsert {
	u.SetExcluded(generationoutput.FieldAestheticArtifactScore)
	return u
}

// AddAestheticArtifactScore adds v to the "aesthetic_artifact_score" field.
func (u *GenerationOutputUpsert) AddAestheticArtifactScore(v float32) *GenerationOutputUpsert {
	u.Add(generationoutput.FieldAestheticArtifactScore, v)
	return u
}

// SetLikeCount sets the "like_count" field.
func (u *GenerationOutputUpsert) SetLikeCount(v int) *GenerationOutputUpsert {
	u.Set(generationoutput.FieldLikeCount, v)
	return u
}

// UpdateLikeCount sets the "like_count" field to the value that was provided on create.
func (u *GenerationOutputUpsert) UpdateLikeCount() *GenerationOutputUpsert {
	u.SetExcluded(generationoutput.FieldLikeCount)
	return u
}

// AddLikeCount adds v to the "like_count" field.
func (u *GenerationOutputUpsert) AddLikeCount(v int) *GenerationOutputUpsert {
	u.Add(generationoutput.FieldLikeCount, v)
	return u
}

// SetGenerationID sets the "generation_id" field.
func (u *GenerationOutputUpsert) SetGenerationID(v uuid.UUID) *GenerationOutputUpsert {
	u.Set(generationoutput.FieldGenerationID, v)
	return u
}

// UpdateGenerationID sets the "generation_id" field to the value that was provided on create.
func (u *GenerationOutputUpsert) UpdateGenerationID() *GenerationOutputUpsert {
	u.SetExcluded(generationoutput.FieldGenerationID)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GenerationOutputUpsert) SetDeletedAt(v time.Time) *GenerationOutputUpsert {
	u.Set(generationoutput.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GenerationOutputUpsert) UpdateDeletedAt() *GenerationOutputUpsert {
	u.SetExcluded(generationoutput.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *GenerationOutputUpsert) ClearDeletedAt() *GenerationOutputUpsert {
	u.SetNull(generationoutput.FieldDeletedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GenerationOutputUpsert) SetUpdatedAt(v time.Time) *GenerationOutputUpsert {
	u.Set(generationoutput.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GenerationOutputUpsert) UpdateUpdatedAt() *GenerationOutputUpsert {
	u.SetExcluded(generationoutput.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GenerationOutput.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(generationoutput.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GenerationOutputUpsertOne) UpdateNewValues() *GenerationOutputUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(generationoutput.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(generationoutput.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GenerationOutput.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GenerationOutputUpsertOne) Ignore() *GenerationOutputUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GenerationOutputUpsertOne) DoNothing() *GenerationOutputUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GenerationOutputCreate.OnConflict
// documentation for more info.
func (u *GenerationOutputUpsertOne) Update(set func(*GenerationOutputUpsert)) *GenerationOutputUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GenerationOutputUpsert{UpdateSet: update})
	}))
	return u
}

// SetImagePath sets the "image_path" field.
func (u *GenerationOutputUpsertOne) SetImagePath(v string) *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetImagePath(v)
	})
}

// UpdateImagePath sets the "image_path" field to the value that was provided on create.
func (u *GenerationOutputUpsertOne) UpdateImagePath() *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateImagePath()
	})
}

// SetUpscaledImagePath sets the "upscaled_image_path" field.
func (u *GenerationOutputUpsertOne) SetUpscaledImagePath(v string) *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetUpscaledImagePath(v)
	})
}

// UpdateUpscaledImagePath sets the "upscaled_image_path" field to the value that was provided on create.
func (u *GenerationOutputUpsertOne) UpdateUpscaledImagePath() *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateUpscaledImagePath()
	})
}

// ClearUpscaledImagePath clears the value of the "upscaled_image_path" field.
func (u *GenerationOutputUpsertOne) ClearUpscaledImagePath() *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.ClearUpscaledImagePath()
	})
}

// SetGalleryStatus sets the "gallery_status" field.
func (u *GenerationOutputUpsertOne) SetGalleryStatus(v generationoutput.GalleryStatus) *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetGalleryStatus(v)
	})
}

// UpdateGalleryStatus sets the "gallery_status" field to the value that was provided on create.
func (u *GenerationOutputUpsertOne) UpdateGalleryStatus() *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateGalleryStatus()
	})
}

// SetIsFavorited sets the "is_favorited" field.
func (u *GenerationOutputUpsertOne) SetIsFavorited(v bool) *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetIsFavorited(v)
	})
}

// UpdateIsFavorited sets the "is_favorited" field to the value that was provided on create.
func (u *GenerationOutputUpsertOne) UpdateIsFavorited() *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateIsFavorited()
	})
}

// SetHasEmbeddings sets the "has_embeddings" field.
func (u *GenerationOutputUpsertOne) SetHasEmbeddings(v bool) *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetHasEmbeddings(v)
	})
}

// UpdateHasEmbeddings sets the "has_embeddings" field to the value that was provided on create.
func (u *GenerationOutputUpsertOne) UpdateHasEmbeddings() *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateHasEmbeddings()
	})
}

// SetHasEmbeddingsNew sets the "has_embeddings_new" field.
func (u *GenerationOutputUpsertOne) SetHasEmbeddingsNew(v bool) *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetHasEmbeddingsNew(v)
	})
}

// UpdateHasEmbeddingsNew sets the "has_embeddings_new" field to the value that was provided on create.
func (u *GenerationOutputUpsertOne) UpdateHasEmbeddingsNew() *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateHasEmbeddingsNew()
	})
}

// SetIsPublic sets the "is_public" field.
func (u *GenerationOutputUpsertOne) SetIsPublic(v bool) *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetIsPublic(v)
	})
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *GenerationOutputUpsertOne) UpdateIsPublic() *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateIsPublic()
	})
}

// SetAestheticRatingScore sets the "aesthetic_rating_score" field.
func (u *GenerationOutputUpsertOne) SetAestheticRatingScore(v float32) *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetAestheticRatingScore(v)
	})
}

// AddAestheticRatingScore adds v to the "aesthetic_rating_score" field.
func (u *GenerationOutputUpsertOne) AddAestheticRatingScore(v float32) *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.AddAestheticRatingScore(v)
	})
}

// UpdateAestheticRatingScore sets the "aesthetic_rating_score" field to the value that was provided on create.
func (u *GenerationOutputUpsertOne) UpdateAestheticRatingScore() *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateAestheticRatingScore()
	})
}

// SetAestheticArtifactScore sets the "aesthetic_artifact_score" field.
func (u *GenerationOutputUpsertOne) SetAestheticArtifactScore(v float32) *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetAestheticArtifactScore(v)
	})
}

// AddAestheticArtifactScore adds v to the "aesthetic_artifact_score" field.
func (u *GenerationOutputUpsertOne) AddAestheticArtifactScore(v float32) *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.AddAestheticArtifactScore(v)
	})
}

// UpdateAestheticArtifactScore sets the "aesthetic_artifact_score" field to the value that was provided on create.
func (u *GenerationOutputUpsertOne) UpdateAestheticArtifactScore() *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateAestheticArtifactScore()
	})
}

// SetLikeCount sets the "like_count" field.
func (u *GenerationOutputUpsertOne) SetLikeCount(v int) *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetLikeCount(v)
	})
}

// AddLikeCount adds v to the "like_count" field.
func (u *GenerationOutputUpsertOne) AddLikeCount(v int) *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.AddLikeCount(v)
	})
}

// UpdateLikeCount sets the "like_count" field to the value that was provided on create.
func (u *GenerationOutputUpsertOne) UpdateLikeCount() *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateLikeCount()
	})
}

// SetGenerationID sets the "generation_id" field.
func (u *GenerationOutputUpsertOne) SetGenerationID(v uuid.UUID) *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetGenerationID(v)
	})
}

// UpdateGenerationID sets the "generation_id" field to the value that was provided on create.
func (u *GenerationOutputUpsertOne) UpdateGenerationID() *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateGenerationID()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GenerationOutputUpsertOne) SetDeletedAt(v time.Time) *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GenerationOutputUpsertOne) UpdateDeletedAt() *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *GenerationOutputUpsertOne) ClearDeletedAt() *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GenerationOutputUpsertOne) SetUpdatedAt(v time.Time) *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GenerationOutputUpsertOne) UpdateUpdatedAt() *GenerationOutputUpsertOne {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *GenerationOutputUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GenerationOutputCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GenerationOutputUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GenerationOutputUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: GenerationOutputUpsertOne.ID is not supported by MySQL driver. Use GenerationOutputUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GenerationOutputUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GenerationOutputCreateBulk is the builder for creating many GenerationOutput entities in bulk.
type GenerationOutputCreateBulk struct {
	config
	builders []*GenerationOutputCreate
	conflict []sql.ConflictOption
}

// Save creates the GenerationOutput entities in the database.
func (gocb *GenerationOutputCreateBulk) Save(ctx context.Context) ([]*GenerationOutput, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gocb.builders))
	nodes := make([]*GenerationOutput, len(gocb.builders))
	mutators := make([]Mutator, len(gocb.builders))
	for i := range gocb.builders {
		func(i int, root context.Context) {
			builder := gocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GenerationOutputMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gocb *GenerationOutputCreateBulk) SaveX(ctx context.Context) []*GenerationOutput {
	v, err := gocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gocb *GenerationOutputCreateBulk) Exec(ctx context.Context) error {
	_, err := gocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gocb *GenerationOutputCreateBulk) ExecX(ctx context.Context) {
	if err := gocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GenerationOutput.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GenerationOutputUpsert) {
//			SetImagePath(v+v).
//		}).
//		Exec(ctx)
func (gocb *GenerationOutputCreateBulk) OnConflict(opts ...sql.ConflictOption) *GenerationOutputUpsertBulk {
	gocb.conflict = opts
	return &GenerationOutputUpsertBulk{
		create: gocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GenerationOutput.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gocb *GenerationOutputCreateBulk) OnConflictColumns(columns ...string) *GenerationOutputUpsertBulk {
	gocb.conflict = append(gocb.conflict, sql.ConflictColumns(columns...))
	return &GenerationOutputUpsertBulk{
		create: gocb,
	}
}

// GenerationOutputUpsertBulk is the builder for "upsert"-ing
// a bulk of GenerationOutput nodes.
type GenerationOutputUpsertBulk struct {
	create *GenerationOutputCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GenerationOutput.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(generationoutput.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GenerationOutputUpsertBulk) UpdateNewValues() *GenerationOutputUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(generationoutput.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(generationoutput.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GenerationOutput.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GenerationOutputUpsertBulk) Ignore() *GenerationOutputUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GenerationOutputUpsertBulk) DoNothing() *GenerationOutputUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GenerationOutputCreateBulk.OnConflict
// documentation for more info.
func (u *GenerationOutputUpsertBulk) Update(set func(*GenerationOutputUpsert)) *GenerationOutputUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GenerationOutputUpsert{UpdateSet: update})
	}))
	return u
}

// SetImagePath sets the "image_path" field.
func (u *GenerationOutputUpsertBulk) SetImagePath(v string) *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetImagePath(v)
	})
}

// UpdateImagePath sets the "image_path" field to the value that was provided on create.
func (u *GenerationOutputUpsertBulk) UpdateImagePath() *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateImagePath()
	})
}

// SetUpscaledImagePath sets the "upscaled_image_path" field.
func (u *GenerationOutputUpsertBulk) SetUpscaledImagePath(v string) *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetUpscaledImagePath(v)
	})
}

// UpdateUpscaledImagePath sets the "upscaled_image_path" field to the value that was provided on create.
func (u *GenerationOutputUpsertBulk) UpdateUpscaledImagePath() *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateUpscaledImagePath()
	})
}

// ClearUpscaledImagePath clears the value of the "upscaled_image_path" field.
func (u *GenerationOutputUpsertBulk) ClearUpscaledImagePath() *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.ClearUpscaledImagePath()
	})
}

// SetGalleryStatus sets the "gallery_status" field.
func (u *GenerationOutputUpsertBulk) SetGalleryStatus(v generationoutput.GalleryStatus) *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetGalleryStatus(v)
	})
}

// UpdateGalleryStatus sets the "gallery_status" field to the value that was provided on create.
func (u *GenerationOutputUpsertBulk) UpdateGalleryStatus() *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateGalleryStatus()
	})
}

// SetIsFavorited sets the "is_favorited" field.
func (u *GenerationOutputUpsertBulk) SetIsFavorited(v bool) *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetIsFavorited(v)
	})
}

// UpdateIsFavorited sets the "is_favorited" field to the value that was provided on create.
func (u *GenerationOutputUpsertBulk) UpdateIsFavorited() *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateIsFavorited()
	})
}

// SetHasEmbeddings sets the "has_embeddings" field.
func (u *GenerationOutputUpsertBulk) SetHasEmbeddings(v bool) *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetHasEmbeddings(v)
	})
}

// UpdateHasEmbeddings sets the "has_embeddings" field to the value that was provided on create.
func (u *GenerationOutputUpsertBulk) UpdateHasEmbeddings() *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateHasEmbeddings()
	})
}

// SetHasEmbeddingsNew sets the "has_embeddings_new" field.
func (u *GenerationOutputUpsertBulk) SetHasEmbeddingsNew(v bool) *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetHasEmbeddingsNew(v)
	})
}

// UpdateHasEmbeddingsNew sets the "has_embeddings_new" field to the value that was provided on create.
func (u *GenerationOutputUpsertBulk) UpdateHasEmbeddingsNew() *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateHasEmbeddingsNew()
	})
}

// SetIsPublic sets the "is_public" field.
func (u *GenerationOutputUpsertBulk) SetIsPublic(v bool) *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetIsPublic(v)
	})
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *GenerationOutputUpsertBulk) UpdateIsPublic() *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateIsPublic()
	})
}

// SetAestheticRatingScore sets the "aesthetic_rating_score" field.
func (u *GenerationOutputUpsertBulk) SetAestheticRatingScore(v float32) *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetAestheticRatingScore(v)
	})
}

// AddAestheticRatingScore adds v to the "aesthetic_rating_score" field.
func (u *GenerationOutputUpsertBulk) AddAestheticRatingScore(v float32) *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.AddAestheticRatingScore(v)
	})
}

// UpdateAestheticRatingScore sets the "aesthetic_rating_score" field to the value that was provided on create.
func (u *GenerationOutputUpsertBulk) UpdateAestheticRatingScore() *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateAestheticRatingScore()
	})
}

// SetAestheticArtifactScore sets the "aesthetic_artifact_score" field.
func (u *GenerationOutputUpsertBulk) SetAestheticArtifactScore(v float32) *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetAestheticArtifactScore(v)
	})
}

// AddAestheticArtifactScore adds v to the "aesthetic_artifact_score" field.
func (u *GenerationOutputUpsertBulk) AddAestheticArtifactScore(v float32) *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.AddAestheticArtifactScore(v)
	})
}

// UpdateAestheticArtifactScore sets the "aesthetic_artifact_score" field to the value that was provided on create.
func (u *GenerationOutputUpsertBulk) UpdateAestheticArtifactScore() *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateAestheticArtifactScore()
	})
}

// SetLikeCount sets the "like_count" field.
func (u *GenerationOutputUpsertBulk) SetLikeCount(v int) *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetLikeCount(v)
	})
}

// AddLikeCount adds v to the "like_count" field.
func (u *GenerationOutputUpsertBulk) AddLikeCount(v int) *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.AddLikeCount(v)
	})
}

// UpdateLikeCount sets the "like_count" field to the value that was provided on create.
func (u *GenerationOutputUpsertBulk) UpdateLikeCount() *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateLikeCount()
	})
}

// SetGenerationID sets the "generation_id" field.
func (u *GenerationOutputUpsertBulk) SetGenerationID(v uuid.UUID) *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetGenerationID(v)
	})
}

// UpdateGenerationID sets the "generation_id" field to the value that was provided on create.
func (u *GenerationOutputUpsertBulk) UpdateGenerationID() *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateGenerationID()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GenerationOutputUpsertBulk) SetDeletedAt(v time.Time) *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GenerationOutputUpsertBulk) UpdateDeletedAt() *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *GenerationOutputUpsertBulk) ClearDeletedAt() *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GenerationOutputUpsertBulk) SetUpdatedAt(v time.Time) *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GenerationOutputUpsertBulk) UpdateUpdatedAt() *GenerationOutputUpsertBulk {
	return u.Update(func(s *GenerationOutputUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *GenerationOutputUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GenerationOutputCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GenerationOutputCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GenerationOutputUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
