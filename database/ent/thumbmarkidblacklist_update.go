// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stablecog/sc-go/database/ent/predicate"
	"github.com/stablecog/sc-go/database/ent/thumbmarkidblacklist"
)

// ThumbmarkIdBlackListUpdate is the builder for updating ThumbmarkIdBlackList entities.
type ThumbmarkIdBlackListUpdate struct {
	config
	hooks     []Hook
	mutation  *ThumbmarkIdBlackListMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ThumbmarkIdBlackListUpdate builder.
func (tiblu *ThumbmarkIdBlackListUpdate) Where(ps ...predicate.ThumbmarkIdBlackList) *ThumbmarkIdBlackListUpdate {
	tiblu.mutation.Where(ps...)
	return tiblu
}

// SetThumbmarkID sets the "thumbmark_id" field.
func (tiblu *ThumbmarkIdBlackListUpdate) SetThumbmarkID(s string) *ThumbmarkIdBlackListUpdate {
	tiblu.mutation.SetThumbmarkID(s)
	return tiblu
}

// SetUpdatedAt sets the "updated_at" field.
func (tiblu *ThumbmarkIdBlackListUpdate) SetUpdatedAt(t time.Time) *ThumbmarkIdBlackListUpdate {
	tiblu.mutation.SetUpdatedAt(t)
	return tiblu
}

// Mutation returns the ThumbmarkIdBlackListMutation object of the builder.
func (tiblu *ThumbmarkIdBlackListUpdate) Mutation() *ThumbmarkIdBlackListMutation {
	return tiblu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tiblu *ThumbmarkIdBlackListUpdate) Save(ctx context.Context) (int, error) {
	tiblu.defaults()
	return withHooks[int, ThumbmarkIdBlackListMutation](ctx, tiblu.sqlSave, tiblu.mutation, tiblu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tiblu *ThumbmarkIdBlackListUpdate) SaveX(ctx context.Context) int {
	affected, err := tiblu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tiblu *ThumbmarkIdBlackListUpdate) Exec(ctx context.Context) error {
	_, err := tiblu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiblu *ThumbmarkIdBlackListUpdate) ExecX(ctx context.Context) {
	if err := tiblu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tiblu *ThumbmarkIdBlackListUpdate) defaults() {
	if _, ok := tiblu.mutation.UpdatedAt(); !ok {
		v := thumbmarkidblacklist.UpdateDefaultUpdatedAt()
		tiblu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tiblu *ThumbmarkIdBlackListUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ThumbmarkIdBlackListUpdate {
	tiblu.modifiers = append(tiblu.modifiers, modifiers...)
	return tiblu
}

func (tiblu *ThumbmarkIdBlackListUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   thumbmarkidblacklist.Table,
			Columns: thumbmarkidblacklist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: thumbmarkidblacklist.FieldID,
			},
		},
	}
	if ps := tiblu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tiblu.mutation.ThumbmarkID(); ok {
		_spec.SetField(thumbmarkidblacklist.FieldThumbmarkID, field.TypeString, value)
	}
	if value, ok := tiblu.mutation.UpdatedAt(); ok {
		_spec.SetField(thumbmarkidblacklist.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(tiblu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tiblu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{thumbmarkidblacklist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tiblu.mutation.done = true
	return n, nil
}

// ThumbmarkIdBlackListUpdateOne is the builder for updating a single ThumbmarkIdBlackList entity.
type ThumbmarkIdBlackListUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ThumbmarkIdBlackListMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetThumbmarkID sets the "thumbmark_id" field.
func (tibluo *ThumbmarkIdBlackListUpdateOne) SetThumbmarkID(s string) *ThumbmarkIdBlackListUpdateOne {
	tibluo.mutation.SetThumbmarkID(s)
	return tibluo
}

// SetUpdatedAt sets the "updated_at" field.
func (tibluo *ThumbmarkIdBlackListUpdateOne) SetUpdatedAt(t time.Time) *ThumbmarkIdBlackListUpdateOne {
	tibluo.mutation.SetUpdatedAt(t)
	return tibluo
}

// Mutation returns the ThumbmarkIdBlackListMutation object of the builder.
func (tibluo *ThumbmarkIdBlackListUpdateOne) Mutation() *ThumbmarkIdBlackListMutation {
	return tibluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tibluo *ThumbmarkIdBlackListUpdateOne) Select(field string, fields ...string) *ThumbmarkIdBlackListUpdateOne {
	tibluo.fields = append([]string{field}, fields...)
	return tibluo
}

// Save executes the query and returns the updated ThumbmarkIdBlackList entity.
func (tibluo *ThumbmarkIdBlackListUpdateOne) Save(ctx context.Context) (*ThumbmarkIdBlackList, error) {
	tibluo.defaults()
	return withHooks[*ThumbmarkIdBlackList, ThumbmarkIdBlackListMutation](ctx, tibluo.sqlSave, tibluo.mutation, tibluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tibluo *ThumbmarkIdBlackListUpdateOne) SaveX(ctx context.Context) *ThumbmarkIdBlackList {
	node, err := tibluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tibluo *ThumbmarkIdBlackListUpdateOne) Exec(ctx context.Context) error {
	_, err := tibluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tibluo *ThumbmarkIdBlackListUpdateOne) ExecX(ctx context.Context) {
	if err := tibluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tibluo *ThumbmarkIdBlackListUpdateOne) defaults() {
	if _, ok := tibluo.mutation.UpdatedAt(); !ok {
		v := thumbmarkidblacklist.UpdateDefaultUpdatedAt()
		tibluo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tibluo *ThumbmarkIdBlackListUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ThumbmarkIdBlackListUpdateOne {
	tibluo.modifiers = append(tibluo.modifiers, modifiers...)
	return tibluo
}

func (tibluo *ThumbmarkIdBlackListUpdateOne) sqlSave(ctx context.Context) (_node *ThumbmarkIdBlackList, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   thumbmarkidblacklist.Table,
			Columns: thumbmarkidblacklist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: thumbmarkidblacklist.FieldID,
			},
		},
	}
	id, ok := tibluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ThumbmarkIdBlackList.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tibluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, thumbmarkidblacklist.FieldID)
		for _, f := range fields {
			if !thumbmarkidblacklist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != thumbmarkidblacklist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tibluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tibluo.mutation.ThumbmarkID(); ok {
		_spec.SetField(thumbmarkidblacklist.FieldThumbmarkID, field.TypeString, value)
	}
	if value, ok := tibluo.mutation.UpdatedAt(); ok {
		_spec.SetField(thumbmarkidblacklist.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(tibluo.modifiers...)
	_node = &ThumbmarkIdBlackList{config: tibluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tibluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{thumbmarkidblacklist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tibluo.mutation.done = true
	return _node, nil
}
