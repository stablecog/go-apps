// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stablecog/sc-go/database/ent/mqlog"
	"github.com/stablecog/sc-go/database/ent/predicate"
)

// MqLogUpdate is the builder for updating MqLog entities.
type MqLogUpdate struct {
	config
	hooks     []Hook
	mutation  *MqLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MqLogUpdate builder.
func (mlu *MqLogUpdate) Where(ps ...predicate.MqLog) *MqLogUpdate {
	mlu.mutation.Where(ps...)
	return mlu
}

// SetMessageID sets the "message_id" field.
func (mlu *MqLogUpdate) SetMessageID(s string) *MqLogUpdate {
	mlu.mutation.SetMessageID(s)
	return mlu
}

// SetNillableMessageID sets the "message_id" field if the given value is not nil.
func (mlu *MqLogUpdate) SetNillableMessageID(s *string) *MqLogUpdate {
	if s != nil {
		mlu.SetMessageID(*s)
	}
	return mlu
}

// SetPriority sets the "priority" field.
func (mlu *MqLogUpdate) SetPriority(i int) *MqLogUpdate {
	mlu.mutation.ResetPriority()
	mlu.mutation.SetPriority(i)
	return mlu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (mlu *MqLogUpdate) SetNillablePriority(i *int) *MqLogUpdate {
	if i != nil {
		mlu.SetPriority(*i)
	}
	return mlu
}

// AddPriority adds i to the "priority" field.
func (mlu *MqLogUpdate) AddPriority(i int) *MqLogUpdate {
	mlu.mutation.AddPriority(i)
	return mlu
}

// SetIsProcessing sets the "is_processing" field.
func (mlu *MqLogUpdate) SetIsProcessing(b bool) *MqLogUpdate {
	mlu.mutation.SetIsProcessing(b)
	return mlu
}

// SetNillableIsProcessing sets the "is_processing" field if the given value is not nil.
func (mlu *MqLogUpdate) SetNillableIsProcessing(b *bool) *MqLogUpdate {
	if b != nil {
		mlu.SetIsProcessing(*b)
	}
	return mlu
}

// SetUpdatedAt sets the "updated_at" field.
func (mlu *MqLogUpdate) SetUpdatedAt(t time.Time) *MqLogUpdate {
	mlu.mutation.SetUpdatedAt(t)
	return mlu
}

// Mutation returns the MqLogMutation object of the builder.
func (mlu *MqLogUpdate) Mutation() *MqLogMutation {
	return mlu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mlu *MqLogUpdate) Save(ctx context.Context) (int, error) {
	mlu.defaults()
	return withHooks(ctx, mlu.sqlSave, mlu.mutation, mlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mlu *MqLogUpdate) SaveX(ctx context.Context) int {
	affected, err := mlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mlu *MqLogUpdate) Exec(ctx context.Context) error {
	_, err := mlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlu *MqLogUpdate) ExecX(ctx context.Context) {
	if err := mlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mlu *MqLogUpdate) defaults() {
	if _, ok := mlu.mutation.UpdatedAt(); !ok {
		v := mqlog.UpdateDefaultUpdatedAt()
		mlu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mlu *MqLogUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MqLogUpdate {
	mlu.modifiers = append(mlu.modifiers, modifiers...)
	return mlu
}

func (mlu *MqLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(mqlog.Table, mqlog.Columns, sqlgraph.NewFieldSpec(mqlog.FieldID, field.TypeUUID))
	if ps := mlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mlu.mutation.MessageID(); ok {
		_spec.SetField(mqlog.FieldMessageID, field.TypeString, value)
	}
	if value, ok := mlu.mutation.Priority(); ok {
		_spec.SetField(mqlog.FieldPriority, field.TypeInt, value)
	}
	if value, ok := mlu.mutation.AddedPriority(); ok {
		_spec.AddField(mqlog.FieldPriority, field.TypeInt, value)
	}
	if value, ok := mlu.mutation.IsProcessing(); ok {
		_spec.SetField(mqlog.FieldIsProcessing, field.TypeBool, value)
	}
	if value, ok := mlu.mutation.UpdatedAt(); ok {
		_spec.SetField(mqlog.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(mlu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mqlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mlu.mutation.done = true
	return n, nil
}

// MqLogUpdateOne is the builder for updating a single MqLog entity.
type MqLogUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MqLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetMessageID sets the "message_id" field.
func (mluo *MqLogUpdateOne) SetMessageID(s string) *MqLogUpdateOne {
	mluo.mutation.SetMessageID(s)
	return mluo
}

// SetNillableMessageID sets the "message_id" field if the given value is not nil.
func (mluo *MqLogUpdateOne) SetNillableMessageID(s *string) *MqLogUpdateOne {
	if s != nil {
		mluo.SetMessageID(*s)
	}
	return mluo
}

// SetPriority sets the "priority" field.
func (mluo *MqLogUpdateOne) SetPriority(i int) *MqLogUpdateOne {
	mluo.mutation.ResetPriority()
	mluo.mutation.SetPriority(i)
	return mluo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (mluo *MqLogUpdateOne) SetNillablePriority(i *int) *MqLogUpdateOne {
	if i != nil {
		mluo.SetPriority(*i)
	}
	return mluo
}

// AddPriority adds i to the "priority" field.
func (mluo *MqLogUpdateOne) AddPriority(i int) *MqLogUpdateOne {
	mluo.mutation.AddPriority(i)
	return mluo
}

// SetIsProcessing sets the "is_processing" field.
func (mluo *MqLogUpdateOne) SetIsProcessing(b bool) *MqLogUpdateOne {
	mluo.mutation.SetIsProcessing(b)
	return mluo
}

// SetNillableIsProcessing sets the "is_processing" field if the given value is not nil.
func (mluo *MqLogUpdateOne) SetNillableIsProcessing(b *bool) *MqLogUpdateOne {
	if b != nil {
		mluo.SetIsProcessing(*b)
	}
	return mluo
}

// SetUpdatedAt sets the "updated_at" field.
func (mluo *MqLogUpdateOne) SetUpdatedAt(t time.Time) *MqLogUpdateOne {
	mluo.mutation.SetUpdatedAt(t)
	return mluo
}

// Mutation returns the MqLogMutation object of the builder.
func (mluo *MqLogUpdateOne) Mutation() *MqLogMutation {
	return mluo.mutation
}

// Where appends a list predicates to the MqLogUpdate builder.
func (mluo *MqLogUpdateOne) Where(ps ...predicate.MqLog) *MqLogUpdateOne {
	mluo.mutation.Where(ps...)
	return mluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mluo *MqLogUpdateOne) Select(field string, fields ...string) *MqLogUpdateOne {
	mluo.fields = append([]string{field}, fields...)
	return mluo
}

// Save executes the query and returns the updated MqLog entity.
func (mluo *MqLogUpdateOne) Save(ctx context.Context) (*MqLog, error) {
	mluo.defaults()
	return withHooks(ctx, mluo.sqlSave, mluo.mutation, mluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mluo *MqLogUpdateOne) SaveX(ctx context.Context) *MqLog {
	node, err := mluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mluo *MqLogUpdateOne) Exec(ctx context.Context) error {
	_, err := mluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mluo *MqLogUpdateOne) ExecX(ctx context.Context) {
	if err := mluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mluo *MqLogUpdateOne) defaults() {
	if _, ok := mluo.mutation.UpdatedAt(); !ok {
		v := mqlog.UpdateDefaultUpdatedAt()
		mluo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mluo *MqLogUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MqLogUpdateOne {
	mluo.modifiers = append(mluo.modifiers, modifiers...)
	return mluo
}

func (mluo *MqLogUpdateOne) sqlSave(ctx context.Context) (_node *MqLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(mqlog.Table, mqlog.Columns, sqlgraph.NewFieldSpec(mqlog.FieldID, field.TypeUUID))
	id, ok := mluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MqLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mqlog.FieldID)
		for _, f := range fields {
			if !mqlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mqlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mluo.mutation.MessageID(); ok {
		_spec.SetField(mqlog.FieldMessageID, field.TypeString, value)
	}
	if value, ok := mluo.mutation.Priority(); ok {
		_spec.SetField(mqlog.FieldPriority, field.TypeInt, value)
	}
	if value, ok := mluo.mutation.AddedPriority(); ok {
		_spec.AddField(mqlog.FieldPriority, field.TypeInt, value)
	}
	if value, ok := mluo.mutation.IsProcessing(); ok {
		_spec.SetField(mqlog.FieldIsProcessing, field.TypeBool, value)
	}
	if value, ok := mluo.mutation.UpdatedAt(); ok {
		_spec.SetField(mqlog.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(mluo.modifiers...)
	_node = &MqLog{config: mluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mqlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mluo.mutation.done = true
	return _node, nil
}
