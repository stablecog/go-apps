// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/apitoken"
	"github.com/stablecog/sc-go/database/ent/authclient"
	"github.com/stablecog/sc-go/database/ent/predicate"
)

// AuthClientUpdate is the builder for updating AuthClient entities.
type AuthClientUpdate struct {
	config
	hooks     []Hook
	mutation  *AuthClientMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AuthClientUpdate builder.
func (acu *AuthClientUpdate) Where(ps ...predicate.AuthClient) *AuthClientUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetName sets the "name" field.
func (acu *AuthClientUpdate) SetName(s string) *AuthClientUpdate {
	acu.mutation.SetName(s)
	return acu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (acu *AuthClientUpdate) SetNillableName(s *string) *AuthClientUpdate {
	if s != nil {
		acu.SetName(*s)
	}
	return acu
}

// SetUpdatedAt sets the "updated_at" field.
func (acu *AuthClientUpdate) SetUpdatedAt(t time.Time) *AuthClientUpdate {
	acu.mutation.SetUpdatedAt(t)
	return acu
}

// AddAPITokenIDs adds the "api_tokens" edge to the ApiToken entity by IDs.
func (acu *AuthClientUpdate) AddAPITokenIDs(ids ...uuid.UUID) *AuthClientUpdate {
	acu.mutation.AddAPITokenIDs(ids...)
	return acu
}

// AddAPITokens adds the "api_tokens" edges to the ApiToken entity.
func (acu *AuthClientUpdate) AddAPITokens(a ...*ApiToken) *AuthClientUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acu.AddAPITokenIDs(ids...)
}

// Mutation returns the AuthClientMutation object of the builder.
func (acu *AuthClientUpdate) Mutation() *AuthClientMutation {
	return acu.mutation
}

// ClearAPITokens clears all "api_tokens" edges to the ApiToken entity.
func (acu *AuthClientUpdate) ClearAPITokens() *AuthClientUpdate {
	acu.mutation.ClearAPITokens()
	return acu
}

// RemoveAPITokenIDs removes the "api_tokens" edge to ApiToken entities by IDs.
func (acu *AuthClientUpdate) RemoveAPITokenIDs(ids ...uuid.UUID) *AuthClientUpdate {
	acu.mutation.RemoveAPITokenIDs(ids...)
	return acu
}

// RemoveAPITokens removes "api_tokens" edges to ApiToken entities.
func (acu *AuthClientUpdate) RemoveAPITokens(a ...*ApiToken) *AuthClientUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acu.RemoveAPITokenIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *AuthClientUpdate) Save(ctx context.Context) (int, error) {
	acu.defaults()
	return withHooks(ctx, acu.sqlSave, acu.mutation, acu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acu *AuthClientUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *AuthClientUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *AuthClientUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acu *AuthClientUpdate) defaults() {
	if _, ok := acu.mutation.UpdatedAt(); !ok {
		v := authclient.UpdateDefaultUpdatedAt()
		acu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (acu *AuthClientUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AuthClientUpdate {
	acu.modifiers = append(acu.modifiers, modifiers...)
	return acu
}

func (acu *AuthClientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(authclient.Table, authclient.Columns, sqlgraph.NewFieldSpec(authclient.FieldID, field.TypeUUID))
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.Name(); ok {
		_spec.SetField(authclient.FieldName, field.TypeString, value)
	}
	if value, ok := acu.mutation.UpdatedAt(); ok {
		_spec.SetField(authclient.FieldUpdatedAt, field.TypeTime, value)
	}
	if acu.mutation.APITokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authclient.APITokensTable,
			Columns: []string{authclient.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.RemovedAPITokensIDs(); len(nodes) > 0 && !acu.mutation.APITokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authclient.APITokensTable,
			Columns: []string{authclient.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.APITokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authclient.APITokensTable,
			Columns: []string{authclient.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(acu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authclient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	acu.mutation.done = true
	return n, nil
}

// AuthClientUpdateOne is the builder for updating a single AuthClient entity.
type AuthClientUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AuthClientMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (acuo *AuthClientUpdateOne) SetName(s string) *AuthClientUpdateOne {
	acuo.mutation.SetName(s)
	return acuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (acuo *AuthClientUpdateOne) SetNillableName(s *string) *AuthClientUpdateOne {
	if s != nil {
		acuo.SetName(*s)
	}
	return acuo
}

// SetUpdatedAt sets the "updated_at" field.
func (acuo *AuthClientUpdateOne) SetUpdatedAt(t time.Time) *AuthClientUpdateOne {
	acuo.mutation.SetUpdatedAt(t)
	return acuo
}

// AddAPITokenIDs adds the "api_tokens" edge to the ApiToken entity by IDs.
func (acuo *AuthClientUpdateOne) AddAPITokenIDs(ids ...uuid.UUID) *AuthClientUpdateOne {
	acuo.mutation.AddAPITokenIDs(ids...)
	return acuo
}

// AddAPITokens adds the "api_tokens" edges to the ApiToken entity.
func (acuo *AuthClientUpdateOne) AddAPITokens(a ...*ApiToken) *AuthClientUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acuo.AddAPITokenIDs(ids...)
}

// Mutation returns the AuthClientMutation object of the builder.
func (acuo *AuthClientUpdateOne) Mutation() *AuthClientMutation {
	return acuo.mutation
}

// ClearAPITokens clears all "api_tokens" edges to the ApiToken entity.
func (acuo *AuthClientUpdateOne) ClearAPITokens() *AuthClientUpdateOne {
	acuo.mutation.ClearAPITokens()
	return acuo
}

// RemoveAPITokenIDs removes the "api_tokens" edge to ApiToken entities by IDs.
func (acuo *AuthClientUpdateOne) RemoveAPITokenIDs(ids ...uuid.UUID) *AuthClientUpdateOne {
	acuo.mutation.RemoveAPITokenIDs(ids...)
	return acuo
}

// RemoveAPITokens removes "api_tokens" edges to ApiToken entities.
func (acuo *AuthClientUpdateOne) RemoveAPITokens(a ...*ApiToken) *AuthClientUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acuo.RemoveAPITokenIDs(ids...)
}

// Where appends a list predicates to the AuthClientUpdate builder.
func (acuo *AuthClientUpdateOne) Where(ps ...predicate.AuthClient) *AuthClientUpdateOne {
	acuo.mutation.Where(ps...)
	return acuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *AuthClientUpdateOne) Select(field string, fields ...string) *AuthClientUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated AuthClient entity.
func (acuo *AuthClientUpdateOne) Save(ctx context.Context) (*AuthClient, error) {
	acuo.defaults()
	return withHooks(ctx, acuo.sqlSave, acuo.mutation, acuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *AuthClientUpdateOne) SaveX(ctx context.Context) *AuthClient {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *AuthClientUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *AuthClientUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acuo *AuthClientUpdateOne) defaults() {
	if _, ok := acuo.mutation.UpdatedAt(); !ok {
		v := authclient.UpdateDefaultUpdatedAt()
		acuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (acuo *AuthClientUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AuthClientUpdateOne {
	acuo.modifiers = append(acuo.modifiers, modifiers...)
	return acuo
}

func (acuo *AuthClientUpdateOne) sqlSave(ctx context.Context) (_node *AuthClient, err error) {
	_spec := sqlgraph.NewUpdateSpec(authclient.Table, authclient.Columns, sqlgraph.NewFieldSpec(authclient.FieldID, field.TypeUUID))
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthClient.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authclient.FieldID)
		for _, f := range fields {
			if !authclient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authclient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.Name(); ok {
		_spec.SetField(authclient.FieldName, field.TypeString, value)
	}
	if value, ok := acuo.mutation.UpdatedAt(); ok {
		_spec.SetField(authclient.FieldUpdatedAt, field.TypeTime, value)
	}
	if acuo.mutation.APITokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authclient.APITokensTable,
			Columns: []string{authclient.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.RemovedAPITokensIDs(); len(nodes) > 0 && !acuo.mutation.APITokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authclient.APITokensTable,
			Columns: []string{authclient.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.APITokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authclient.APITokensTable,
			Columns: []string{authclient.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(acuo.modifiers...)
	_node = &AuthClient{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authclient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	acuo.mutation.done = true
	return _node, nil
}
