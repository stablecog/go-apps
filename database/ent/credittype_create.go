// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/credit"
	"github.com/stablecog/sc-go/database/ent/credittype"
)

// CreditTypeCreate is the builder for creating a CreditType entity.
type CreditTypeCreate struct {
	config
	mutation *CreditTypeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (ctc *CreditTypeCreate) SetName(s string) *CreditTypeCreate {
	ctc.mutation.SetName(s)
	return ctc
}

// SetDescription sets the "description" field.
func (ctc *CreditTypeCreate) SetDescription(s string) *CreditTypeCreate {
	ctc.mutation.SetDescription(s)
	return ctc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ctc *CreditTypeCreate) SetNillableDescription(s *string) *CreditTypeCreate {
	if s != nil {
		ctc.SetDescription(*s)
	}
	return ctc
}

// SetAmount sets the "amount" field.
func (ctc *CreditTypeCreate) SetAmount(i int32) *CreditTypeCreate {
	ctc.mutation.SetAmount(i)
	return ctc
}

// SetStripeProductID sets the "stripe_product_id" field.
func (ctc *CreditTypeCreate) SetStripeProductID(s string) *CreditTypeCreate {
	ctc.mutation.SetStripeProductID(s)
	return ctc
}

// SetNillableStripeProductID sets the "stripe_product_id" field if the given value is not nil.
func (ctc *CreditTypeCreate) SetNillableStripeProductID(s *string) *CreditTypeCreate {
	if s != nil {
		ctc.SetStripeProductID(*s)
	}
	return ctc
}

// SetAnnual sets the "annual" field.
func (ctc *CreditTypeCreate) SetAnnual(b bool) *CreditTypeCreate {
	ctc.mutation.SetAnnual(b)
	return ctc
}

// SetNillableAnnual sets the "annual" field if the given value is not nil.
func (ctc *CreditTypeCreate) SetNillableAnnual(b *bool) *CreditTypeCreate {
	if b != nil {
		ctc.SetAnnual(*b)
	}
	return ctc
}

// SetType sets the "type" field.
func (ctc *CreditTypeCreate) SetType(c credittype.Type) *CreditTypeCreate {
	ctc.mutation.SetType(c)
	return ctc
}

// SetCreatedAt sets the "created_at" field.
func (ctc *CreditTypeCreate) SetCreatedAt(t time.Time) *CreditTypeCreate {
	ctc.mutation.SetCreatedAt(t)
	return ctc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ctc *CreditTypeCreate) SetNillableCreatedAt(t *time.Time) *CreditTypeCreate {
	if t != nil {
		ctc.SetCreatedAt(*t)
	}
	return ctc
}

// SetUpdatedAt sets the "updated_at" field.
func (ctc *CreditTypeCreate) SetUpdatedAt(t time.Time) *CreditTypeCreate {
	ctc.mutation.SetUpdatedAt(t)
	return ctc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ctc *CreditTypeCreate) SetNillableUpdatedAt(t *time.Time) *CreditTypeCreate {
	if t != nil {
		ctc.SetUpdatedAt(*t)
	}
	return ctc
}

// SetID sets the "id" field.
func (ctc *CreditTypeCreate) SetID(u uuid.UUID) *CreditTypeCreate {
	ctc.mutation.SetID(u)
	return ctc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ctc *CreditTypeCreate) SetNillableID(u *uuid.UUID) *CreditTypeCreate {
	if u != nil {
		ctc.SetID(*u)
	}
	return ctc
}

// AddCreditIDs adds the "credits" edge to the Credit entity by IDs.
func (ctc *CreditTypeCreate) AddCreditIDs(ids ...uuid.UUID) *CreditTypeCreate {
	ctc.mutation.AddCreditIDs(ids...)
	return ctc
}

// AddCredits adds the "credits" edges to the Credit entity.
func (ctc *CreditTypeCreate) AddCredits(c ...*Credit) *CreditTypeCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctc.AddCreditIDs(ids...)
}

// Mutation returns the CreditTypeMutation object of the builder.
func (ctc *CreditTypeCreate) Mutation() *CreditTypeMutation {
	return ctc.mutation
}

// Save creates the CreditType in the database.
func (ctc *CreditTypeCreate) Save(ctx context.Context) (*CreditType, error) {
	ctc.defaults()
	return withHooks(ctx, ctc.sqlSave, ctc.mutation, ctc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ctc *CreditTypeCreate) SaveX(ctx context.Context) *CreditType {
	v, err := ctc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctc *CreditTypeCreate) Exec(ctx context.Context) error {
	_, err := ctc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctc *CreditTypeCreate) ExecX(ctx context.Context) {
	if err := ctc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctc *CreditTypeCreate) defaults() {
	if _, ok := ctc.mutation.Annual(); !ok {
		v := credittype.DefaultAnnual
		ctc.mutation.SetAnnual(v)
	}
	if _, ok := ctc.mutation.CreatedAt(); !ok {
		v := credittype.DefaultCreatedAt()
		ctc.mutation.SetCreatedAt(v)
	}
	if _, ok := ctc.mutation.UpdatedAt(); !ok {
		v := credittype.DefaultUpdatedAt()
		ctc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ctc.mutation.ID(); !ok {
		v := credittype.DefaultID()
		ctc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctc *CreditTypeCreate) check() error {
	if _, ok := ctc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CreditType.name"`)}
	}
	if _, ok := ctc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "CreditType.amount"`)}
	}
	if _, ok := ctc.mutation.Annual(); !ok {
		return &ValidationError{Name: "annual", err: errors.New(`ent: missing required field "CreditType.annual"`)}
	}
	if _, ok := ctc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "CreditType.type"`)}
	}
	if v, ok := ctc.mutation.GetType(); ok {
		if err := credittype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "CreditType.type": %w`, err)}
		}
	}
	if _, ok := ctc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CreditType.created_at"`)}
	}
	if _, ok := ctc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CreditType.updated_at"`)}
	}
	return nil
}

func (ctc *CreditTypeCreate) sqlSave(ctx context.Context) (*CreditType, error) {
	if err := ctc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ctc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ctc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ctc.mutation.id = &_node.ID
	ctc.mutation.done = true
	return _node, nil
}

func (ctc *CreditTypeCreate) createSpec() (*CreditType, *sqlgraph.CreateSpec) {
	var (
		_node = &CreditType{config: ctc.config}
		_spec = sqlgraph.NewCreateSpec(credittype.Table, sqlgraph.NewFieldSpec(credittype.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = ctc.conflict
	if id, ok := ctc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ctc.mutation.Name(); ok {
		_spec.SetField(credittype.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ctc.mutation.Description(); ok {
		_spec.SetField(credittype.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := ctc.mutation.Amount(); ok {
		_spec.SetField(credittype.FieldAmount, field.TypeInt32, value)
		_node.Amount = value
	}
	if value, ok := ctc.mutation.StripeProductID(); ok {
		_spec.SetField(credittype.FieldStripeProductID, field.TypeString, value)
		_node.StripeProductID = &value
	}
	if value, ok := ctc.mutation.Annual(); ok {
		_spec.SetField(credittype.FieldAnnual, field.TypeBool, value)
		_node.Annual = value
	}
	if value, ok := ctc.mutation.GetType(); ok {
		_spec.SetField(credittype.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := ctc.mutation.CreatedAt(); ok {
		_spec.SetField(credittype.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ctc.mutation.UpdatedAt(); ok {
		_spec.SetField(credittype.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ctc.mutation.CreditsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   credittype.CreditsTable,
			Columns: []string{credittype.CreditsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CreditType.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CreditTypeUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ctc *CreditTypeCreate) OnConflict(opts ...sql.ConflictOption) *CreditTypeUpsertOne {
	ctc.conflict = opts
	return &CreditTypeUpsertOne{
		create: ctc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CreditType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ctc *CreditTypeCreate) OnConflictColumns(columns ...string) *CreditTypeUpsertOne {
	ctc.conflict = append(ctc.conflict, sql.ConflictColumns(columns...))
	return &CreditTypeUpsertOne{
		create: ctc,
	}
}

type (
	// CreditTypeUpsertOne is the builder for "upsert"-ing
	//  one CreditType node.
	CreditTypeUpsertOne struct {
		create *CreditTypeCreate
	}

	// CreditTypeUpsert is the "OnConflict" setter.
	CreditTypeUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *CreditTypeUpsert) SetName(v string) *CreditTypeUpsert {
	u.Set(credittype.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CreditTypeUpsert) UpdateName() *CreditTypeUpsert {
	u.SetExcluded(credittype.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *CreditTypeUpsert) SetDescription(v string) *CreditTypeUpsert {
	u.Set(credittype.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CreditTypeUpsert) UpdateDescription() *CreditTypeUpsert {
	u.SetExcluded(credittype.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *CreditTypeUpsert) ClearDescription() *CreditTypeUpsert {
	u.SetNull(credittype.FieldDescription)
	return u
}

// SetAmount sets the "amount" field.
func (u *CreditTypeUpsert) SetAmount(v int32) *CreditTypeUpsert {
	u.Set(credittype.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *CreditTypeUpsert) UpdateAmount() *CreditTypeUpsert {
	u.SetExcluded(credittype.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *CreditTypeUpsert) AddAmount(v int32) *CreditTypeUpsert {
	u.Add(credittype.FieldAmount, v)
	return u
}

// SetStripeProductID sets the "stripe_product_id" field.
func (u *CreditTypeUpsert) SetStripeProductID(v string) *CreditTypeUpsert {
	u.Set(credittype.FieldStripeProductID, v)
	return u
}

// UpdateStripeProductID sets the "stripe_product_id" field to the value that was provided on create.
func (u *CreditTypeUpsert) UpdateStripeProductID() *CreditTypeUpsert {
	u.SetExcluded(credittype.FieldStripeProductID)
	return u
}

// ClearStripeProductID clears the value of the "stripe_product_id" field.
func (u *CreditTypeUpsert) ClearStripeProductID() *CreditTypeUpsert {
	u.SetNull(credittype.FieldStripeProductID)
	return u
}

// SetAnnual sets the "annual" field.
func (u *CreditTypeUpsert) SetAnnual(v bool) *CreditTypeUpsert {
	u.Set(credittype.FieldAnnual, v)
	return u
}

// UpdateAnnual sets the "annual" field to the value that was provided on create.
func (u *CreditTypeUpsert) UpdateAnnual() *CreditTypeUpsert {
	u.SetExcluded(credittype.FieldAnnual)
	return u
}

// SetType sets the "type" field.
func (u *CreditTypeUpsert) SetType(v credittype.Type) *CreditTypeUpsert {
	u.Set(credittype.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CreditTypeUpsert) UpdateType() *CreditTypeUpsert {
	u.SetExcluded(credittype.FieldType)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CreditTypeUpsert) SetUpdatedAt(v time.Time) *CreditTypeUpsert {
	u.Set(credittype.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CreditTypeUpsert) UpdateUpdatedAt() *CreditTypeUpsert {
	u.SetExcluded(credittype.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CreditType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(credittype.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CreditTypeUpsertOne) UpdateNewValues() *CreditTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(credittype.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(credittype.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CreditType.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CreditTypeUpsertOne) Ignore() *CreditTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CreditTypeUpsertOne) DoNothing() *CreditTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CreditTypeCreate.OnConflict
// documentation for more info.
func (u *CreditTypeUpsertOne) Update(set func(*CreditTypeUpsert)) *CreditTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CreditTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *CreditTypeUpsertOne) SetName(v string) *CreditTypeUpsertOne {
	return u.Update(func(s *CreditTypeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CreditTypeUpsertOne) UpdateName() *CreditTypeUpsertOne {
	return u.Update(func(s *CreditTypeUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *CreditTypeUpsertOne) SetDescription(v string) *CreditTypeUpsertOne {
	return u.Update(func(s *CreditTypeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CreditTypeUpsertOne) UpdateDescription() *CreditTypeUpsertOne {
	return u.Update(func(s *CreditTypeUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *CreditTypeUpsertOne) ClearDescription() *CreditTypeUpsertOne {
	return u.Update(func(s *CreditTypeUpsert) {
		s.ClearDescription()
	})
}

// SetAmount sets the "amount" field.
func (u *CreditTypeUpsertOne) SetAmount(v int32) *CreditTypeUpsertOne {
	return u.Update(func(s *CreditTypeUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *CreditTypeUpsertOne) AddAmount(v int32) *CreditTypeUpsertOne {
	return u.Update(func(s *CreditTypeUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *CreditTypeUpsertOne) UpdateAmount() *CreditTypeUpsertOne {
	return u.Update(func(s *CreditTypeUpsert) {
		s.UpdateAmount()
	})
}

// SetStripeProductID sets the "stripe_product_id" field.
func (u *CreditTypeUpsertOne) SetStripeProductID(v string) *CreditTypeUpsertOne {
	return u.Update(func(s *CreditTypeUpsert) {
		s.SetStripeProductID(v)
	})
}

// UpdateStripeProductID sets the "stripe_product_id" field to the value that was provided on create.
func (u *CreditTypeUpsertOne) UpdateStripeProductID() *CreditTypeUpsertOne {
	return u.Update(func(s *CreditTypeUpsert) {
		s.UpdateStripeProductID()
	})
}

// ClearStripeProductID clears the value of the "stripe_product_id" field.
func (u *CreditTypeUpsertOne) ClearStripeProductID() *CreditTypeUpsertOne {
	return u.Update(func(s *CreditTypeUpsert) {
		s.ClearStripeProductID()
	})
}

// SetAnnual sets the "annual" field.
func (u *CreditTypeUpsertOne) SetAnnual(v bool) *CreditTypeUpsertOne {
	return u.Update(func(s *CreditTypeUpsert) {
		s.SetAnnual(v)
	})
}

// UpdateAnnual sets the "annual" field to the value that was provided on create.
func (u *CreditTypeUpsertOne) UpdateAnnual() *CreditTypeUpsertOne {
	return u.Update(func(s *CreditTypeUpsert) {
		s.UpdateAnnual()
	})
}

// SetType sets the "type" field.
func (u *CreditTypeUpsertOne) SetType(v credittype.Type) *CreditTypeUpsertOne {
	return u.Update(func(s *CreditTypeUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CreditTypeUpsertOne) UpdateType() *CreditTypeUpsertOne {
	return u.Update(func(s *CreditTypeUpsert) {
		s.UpdateType()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CreditTypeUpsertOne) SetUpdatedAt(v time.Time) *CreditTypeUpsertOne {
	return u.Update(func(s *CreditTypeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CreditTypeUpsertOne) UpdateUpdatedAt() *CreditTypeUpsertOne {
	return u.Update(func(s *CreditTypeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *CreditTypeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CreditTypeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CreditTypeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CreditTypeUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CreditTypeUpsertOne.ID is not supported by MySQL driver. Use CreditTypeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CreditTypeUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CreditTypeCreateBulk is the builder for creating many CreditType entities in bulk.
type CreditTypeCreateBulk struct {
	config
	err      error
	builders []*CreditTypeCreate
	conflict []sql.ConflictOption
}

// Save creates the CreditType entities in the database.
func (ctcb *CreditTypeCreateBulk) Save(ctx context.Context) ([]*CreditType, error) {
	if ctcb.err != nil {
		return nil, ctcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ctcb.builders))
	nodes := make([]*CreditType, len(ctcb.builders))
	mutators := make([]Mutator, len(ctcb.builders))
	for i := range ctcb.builders {
		func(i int, root context.Context) {
			builder := ctcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CreditTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ctcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ctcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ctcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ctcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ctcb *CreditTypeCreateBulk) SaveX(ctx context.Context) []*CreditType {
	v, err := ctcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctcb *CreditTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := ctcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctcb *CreditTypeCreateBulk) ExecX(ctx context.Context) {
	if err := ctcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CreditType.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CreditTypeUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ctcb *CreditTypeCreateBulk) OnConflict(opts ...sql.ConflictOption) *CreditTypeUpsertBulk {
	ctcb.conflict = opts
	return &CreditTypeUpsertBulk{
		create: ctcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CreditType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ctcb *CreditTypeCreateBulk) OnConflictColumns(columns ...string) *CreditTypeUpsertBulk {
	ctcb.conflict = append(ctcb.conflict, sql.ConflictColumns(columns...))
	return &CreditTypeUpsertBulk{
		create: ctcb,
	}
}

// CreditTypeUpsertBulk is the builder for "upsert"-ing
// a bulk of CreditType nodes.
type CreditTypeUpsertBulk struct {
	create *CreditTypeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CreditType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(credittype.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CreditTypeUpsertBulk) UpdateNewValues() *CreditTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(credittype.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(credittype.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CreditType.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CreditTypeUpsertBulk) Ignore() *CreditTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CreditTypeUpsertBulk) DoNothing() *CreditTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CreditTypeCreateBulk.OnConflict
// documentation for more info.
func (u *CreditTypeUpsertBulk) Update(set func(*CreditTypeUpsert)) *CreditTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CreditTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *CreditTypeUpsertBulk) SetName(v string) *CreditTypeUpsertBulk {
	return u.Update(func(s *CreditTypeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CreditTypeUpsertBulk) UpdateName() *CreditTypeUpsertBulk {
	return u.Update(func(s *CreditTypeUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *CreditTypeUpsertBulk) SetDescription(v string) *CreditTypeUpsertBulk {
	return u.Update(func(s *CreditTypeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CreditTypeUpsertBulk) UpdateDescription() *CreditTypeUpsertBulk {
	return u.Update(func(s *CreditTypeUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *CreditTypeUpsertBulk) ClearDescription() *CreditTypeUpsertBulk {
	return u.Update(func(s *CreditTypeUpsert) {
		s.ClearDescription()
	})
}

// SetAmount sets the "amount" field.
func (u *CreditTypeUpsertBulk) SetAmount(v int32) *CreditTypeUpsertBulk {
	return u.Update(func(s *CreditTypeUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *CreditTypeUpsertBulk) AddAmount(v int32) *CreditTypeUpsertBulk {
	return u.Update(func(s *CreditTypeUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *CreditTypeUpsertBulk) UpdateAmount() *CreditTypeUpsertBulk {
	return u.Update(func(s *CreditTypeUpsert) {
		s.UpdateAmount()
	})
}

// SetStripeProductID sets the "stripe_product_id" field.
func (u *CreditTypeUpsertBulk) SetStripeProductID(v string) *CreditTypeUpsertBulk {
	return u.Update(func(s *CreditTypeUpsert) {
		s.SetStripeProductID(v)
	})
}

// UpdateStripeProductID sets the "stripe_product_id" field to the value that was provided on create.
func (u *CreditTypeUpsertBulk) UpdateStripeProductID() *CreditTypeUpsertBulk {
	return u.Update(func(s *CreditTypeUpsert) {
		s.UpdateStripeProductID()
	})
}

// ClearStripeProductID clears the value of the "stripe_product_id" field.
func (u *CreditTypeUpsertBulk) ClearStripeProductID() *CreditTypeUpsertBulk {
	return u.Update(func(s *CreditTypeUpsert) {
		s.ClearStripeProductID()
	})
}

// SetAnnual sets the "annual" field.
func (u *CreditTypeUpsertBulk) SetAnnual(v bool) *CreditTypeUpsertBulk {
	return u.Update(func(s *CreditTypeUpsert) {
		s.SetAnnual(v)
	})
}

// UpdateAnnual sets the "annual" field to the value that was provided on create.
func (u *CreditTypeUpsertBulk) UpdateAnnual() *CreditTypeUpsertBulk {
	return u.Update(func(s *CreditTypeUpsert) {
		s.UpdateAnnual()
	})
}

// SetType sets the "type" field.
func (u *CreditTypeUpsertBulk) SetType(v credittype.Type) *CreditTypeUpsertBulk {
	return u.Update(func(s *CreditTypeUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CreditTypeUpsertBulk) UpdateType() *CreditTypeUpsertBulk {
	return u.Update(func(s *CreditTypeUpsert) {
		s.UpdateType()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CreditTypeUpsertBulk) SetUpdatedAt(v time.Time) *CreditTypeUpsertBulk {
	return u.Update(func(s *CreditTypeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CreditTypeUpsertBulk) UpdateUpdatedAt() *CreditTypeUpsertBulk {
	return u.Update(func(s *CreditTypeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *CreditTypeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CreditTypeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CreditTypeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CreditTypeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
