// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/authclient"
)

// AuthClient is the model entity for the AuthClient schema.
type AuthClient struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthClientQuery when eager-loading is set.
	Edges        AuthClientEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AuthClientEdges holds the relations/edges for other nodes in the graph.
type AuthClientEdges struct {
	// APITokens holds the value of the api_tokens edge.
	APITokens []*ApiToken `json:"api_tokens,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// APITokensOrErr returns the APITokens value or an error if the edge
// was not loaded in eager-loading.
func (e AuthClientEdges) APITokensOrErr() ([]*ApiToken, error) {
	if e.loadedTypes[0] {
		return e.APITokens, nil
	}
	return nil, &NotLoadedError{edge: "api_tokens"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthClient) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authclient.FieldName:
			values[i] = new(sql.NullString)
		case authclient.FieldCreatedAt, authclient.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case authclient.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthClient fields.
func (ac *AuthClient) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authclient.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ac.ID = *value
			}
		case authclient.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ac.Name = value.String
			}
		case authclient.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ac.CreatedAt = value.Time
			}
		case authclient.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ac.UpdatedAt = value.Time
			}
		default:
			ac.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuthClient.
// This includes values selected through modifiers, order, etc.
func (ac *AuthClient) Value(name string) (ent.Value, error) {
	return ac.selectValues.Get(name)
}

// QueryAPITokens queries the "api_tokens" edge of the AuthClient entity.
func (ac *AuthClient) QueryAPITokens() *ApiTokenQuery {
	return NewAuthClientClient(ac.config).QueryAPITokens(ac)
}

// Update returns a builder for updating this AuthClient.
// Note that you need to call AuthClient.Unwrap() before calling this method if this AuthClient
// was returned from a transaction, and the transaction was committed or rolled back.
func (ac *AuthClient) Update() *AuthClientUpdateOne {
	return NewAuthClientClient(ac.config).UpdateOne(ac)
}

// Unwrap unwraps the AuthClient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ac *AuthClient) Unwrap() *AuthClient {
	_tx, ok := ac.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthClient is not a transactional entity")
	}
	ac.config.driver = _tx.drv
	return ac
}

// String implements the fmt.Stringer.
func (ac *AuthClient) String() string {
	var builder strings.Builder
	builder.WriteString("AuthClient(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ac.ID))
	builder.WriteString("name=")
	builder.WriteString(ac.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ac.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ac.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AuthClients is a parsable slice of AuthClient.
type AuthClients []*AuthClient
