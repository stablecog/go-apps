// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/apitoken"
	"github.com/stablecog/sc-go/database/ent/deviceinfo"
	"github.com/stablecog/sc-go/database/ent/generation"
	"github.com/stablecog/sc-go/database/ent/generationmodel"
	"github.com/stablecog/sc-go/database/ent/generationoutput"
	"github.com/stablecog/sc-go/database/ent/negativeprompt"
	"github.com/stablecog/sc-go/database/ent/predicate"
	"github.com/stablecog/sc-go/database/ent/prompt"
	"github.com/stablecog/sc-go/database/ent/scheduler"
	"github.com/stablecog/sc-go/database/ent/user"
	"github.com/stablecog/sc-go/database/enttypes"
)

// GenerationUpdate is the builder for updating Generation entities.
type GenerationUpdate struct {
	config
	hooks     []Hook
	mutation  *GenerationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GenerationUpdate builder.
func (gu *GenerationUpdate) Where(ps ...predicate.Generation) *GenerationUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetWidth sets the "width" field.
func (gu *GenerationUpdate) SetWidth(i int32) *GenerationUpdate {
	gu.mutation.ResetWidth()
	gu.mutation.SetWidth(i)
	return gu
}

// AddWidth adds i to the "width" field.
func (gu *GenerationUpdate) AddWidth(i int32) *GenerationUpdate {
	gu.mutation.AddWidth(i)
	return gu
}

// SetHeight sets the "height" field.
func (gu *GenerationUpdate) SetHeight(i int32) *GenerationUpdate {
	gu.mutation.ResetHeight()
	gu.mutation.SetHeight(i)
	return gu
}

// AddHeight adds i to the "height" field.
func (gu *GenerationUpdate) AddHeight(i int32) *GenerationUpdate {
	gu.mutation.AddHeight(i)
	return gu
}

// SetInferenceSteps sets the "inference_steps" field.
func (gu *GenerationUpdate) SetInferenceSteps(i int32) *GenerationUpdate {
	gu.mutation.ResetInferenceSteps()
	gu.mutation.SetInferenceSteps(i)
	return gu
}

// AddInferenceSteps adds i to the "inference_steps" field.
func (gu *GenerationUpdate) AddInferenceSteps(i int32) *GenerationUpdate {
	gu.mutation.AddInferenceSteps(i)
	return gu
}

// SetGuidanceScale sets the "guidance_scale" field.
func (gu *GenerationUpdate) SetGuidanceScale(f float32) *GenerationUpdate {
	gu.mutation.ResetGuidanceScale()
	gu.mutation.SetGuidanceScale(f)
	return gu
}

// AddGuidanceScale adds f to the "guidance_scale" field.
func (gu *GenerationUpdate) AddGuidanceScale(f float32) *GenerationUpdate {
	gu.mutation.AddGuidanceScale(f)
	return gu
}

// SetNumOutputs sets the "num_outputs" field.
func (gu *GenerationUpdate) SetNumOutputs(i int32) *GenerationUpdate {
	gu.mutation.ResetNumOutputs()
	gu.mutation.SetNumOutputs(i)
	return gu
}

// AddNumOutputs adds i to the "num_outputs" field.
func (gu *GenerationUpdate) AddNumOutputs(i int32) *GenerationUpdate {
	gu.mutation.AddNumOutputs(i)
	return gu
}

// SetNsfwCount sets the "nsfw_count" field.
func (gu *GenerationUpdate) SetNsfwCount(i int32) *GenerationUpdate {
	gu.mutation.ResetNsfwCount()
	gu.mutation.SetNsfwCount(i)
	return gu
}

// SetNillableNsfwCount sets the "nsfw_count" field if the given value is not nil.
func (gu *GenerationUpdate) SetNillableNsfwCount(i *int32) *GenerationUpdate {
	if i != nil {
		gu.SetNsfwCount(*i)
	}
	return gu
}

// AddNsfwCount adds i to the "nsfw_count" field.
func (gu *GenerationUpdate) AddNsfwCount(i int32) *GenerationUpdate {
	gu.mutation.AddNsfwCount(i)
	return gu
}

// SetSeed sets the "seed" field.
func (gu *GenerationUpdate) SetSeed(i int) *GenerationUpdate {
	gu.mutation.ResetSeed()
	gu.mutation.SetSeed(i)
	return gu
}

// AddSeed adds i to the "seed" field.
func (gu *GenerationUpdate) AddSeed(i int) *GenerationUpdate {
	gu.mutation.AddSeed(i)
	return gu
}

// SetStatus sets the "status" field.
func (gu *GenerationUpdate) SetStatus(ge generation.Status) *GenerationUpdate {
	gu.mutation.SetStatus(ge)
	return gu
}

// SetFailureReason sets the "failure_reason" field.
func (gu *GenerationUpdate) SetFailureReason(s string) *GenerationUpdate {
	gu.mutation.SetFailureReason(s)
	return gu
}

// SetNillableFailureReason sets the "failure_reason" field if the given value is not nil.
func (gu *GenerationUpdate) SetNillableFailureReason(s *string) *GenerationUpdate {
	if s != nil {
		gu.SetFailureReason(*s)
	}
	return gu
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (gu *GenerationUpdate) ClearFailureReason() *GenerationUpdate {
	gu.mutation.ClearFailureReason()
	return gu
}

// SetCountryCode sets the "country_code" field.
func (gu *GenerationUpdate) SetCountryCode(s string) *GenerationUpdate {
	gu.mutation.SetCountryCode(s)
	return gu
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (gu *GenerationUpdate) SetNillableCountryCode(s *string) *GenerationUpdate {
	if s != nil {
		gu.SetCountryCode(*s)
	}
	return gu
}

// ClearCountryCode clears the value of the "country_code" field.
func (gu *GenerationUpdate) ClearCountryCode() *GenerationUpdate {
	gu.mutation.ClearCountryCode()
	return gu
}

// SetInitImageURL sets the "init_image_url" field.
func (gu *GenerationUpdate) SetInitImageURL(s string) *GenerationUpdate {
	gu.mutation.SetInitImageURL(s)
	return gu
}

// SetNillableInitImageURL sets the "init_image_url" field if the given value is not nil.
func (gu *GenerationUpdate) SetNillableInitImageURL(s *string) *GenerationUpdate {
	if s != nil {
		gu.SetInitImageURL(*s)
	}
	return gu
}

// ClearInitImageURL clears the value of the "init_image_url" field.
func (gu *GenerationUpdate) ClearInitImageURL() *GenerationUpdate {
	gu.mutation.ClearInitImageURL()
	return gu
}

// SetMaskImageURL sets the "mask_image_url" field.
func (gu *GenerationUpdate) SetMaskImageURL(s string) *GenerationUpdate {
	gu.mutation.SetMaskImageURL(s)
	return gu
}

// SetNillableMaskImageURL sets the "mask_image_url" field if the given value is not nil.
func (gu *GenerationUpdate) SetNillableMaskImageURL(s *string) *GenerationUpdate {
	if s != nil {
		gu.SetMaskImageURL(*s)
	}
	return gu
}

// ClearMaskImageURL clears the value of the "mask_image_url" field.
func (gu *GenerationUpdate) ClearMaskImageURL() *GenerationUpdate {
	gu.mutation.ClearMaskImageURL()
	return gu
}

// SetPromptStrength sets the "prompt_strength" field.
func (gu *GenerationUpdate) SetPromptStrength(f float32) *GenerationUpdate {
	gu.mutation.ResetPromptStrength()
	gu.mutation.SetPromptStrength(f)
	return gu
}

// SetNillablePromptStrength sets the "prompt_strength" field if the given value is not nil.
func (gu *GenerationUpdate) SetNillablePromptStrength(f *float32) *GenerationUpdate {
	if f != nil {
		gu.SetPromptStrength(*f)
	}
	return gu
}

// AddPromptStrength adds f to the "prompt_strength" field.
func (gu *GenerationUpdate) AddPromptStrength(f float32) *GenerationUpdate {
	gu.mutation.AddPromptStrength(f)
	return gu
}

// ClearPromptStrength clears the value of the "prompt_strength" field.
func (gu *GenerationUpdate) ClearPromptStrength() *GenerationUpdate {
	gu.mutation.ClearPromptStrength()
	return gu
}

// SetWasAutoSubmitted sets the "was_auto_submitted" field.
func (gu *GenerationUpdate) SetWasAutoSubmitted(b bool) *GenerationUpdate {
	gu.mutation.SetWasAutoSubmitted(b)
	return gu
}

// SetNillableWasAutoSubmitted sets the "was_auto_submitted" field if the given value is not nil.
func (gu *GenerationUpdate) SetNillableWasAutoSubmitted(b *bool) *GenerationUpdate {
	if b != nil {
		gu.SetWasAutoSubmitted(*b)
	}
	return gu
}

// SetStripeProductID sets the "stripe_product_id" field.
func (gu *GenerationUpdate) SetStripeProductID(s string) *GenerationUpdate {
	gu.mutation.SetStripeProductID(s)
	return gu
}

// SetNillableStripeProductID sets the "stripe_product_id" field if the given value is not nil.
func (gu *GenerationUpdate) SetNillableStripeProductID(s *string) *GenerationUpdate {
	if s != nil {
		gu.SetStripeProductID(*s)
	}
	return gu
}

// ClearStripeProductID clears the value of the "stripe_product_id" field.
func (gu *GenerationUpdate) ClearStripeProductID() *GenerationUpdate {
	gu.mutation.ClearStripeProductID()
	return gu
}

// SetSourceType sets the "source_type" field.
func (gu *GenerationUpdate) SetSourceType(et enttypes.SourceType) *GenerationUpdate {
	gu.mutation.SetSourceType(et)
	return gu
}

// SetNillableSourceType sets the "source_type" field if the given value is not nil.
func (gu *GenerationUpdate) SetNillableSourceType(et *enttypes.SourceType) *GenerationUpdate {
	if et != nil {
		gu.SetSourceType(*et)
	}
	return gu
}

// SetWebhookToken sets the "webhook_token" field.
func (gu *GenerationUpdate) SetWebhookToken(u uuid.UUID) *GenerationUpdate {
	gu.mutation.SetWebhookToken(u)
	return gu
}

// SetNillableWebhookToken sets the "webhook_token" field if the given value is not nil.
func (gu *GenerationUpdate) SetNillableWebhookToken(u *uuid.UUID) *GenerationUpdate {
	if u != nil {
		gu.SetWebhookToken(*u)
	}
	return gu
}

// SetPromptID sets the "prompt_id" field.
func (gu *GenerationUpdate) SetPromptID(u uuid.UUID) *GenerationUpdate {
	gu.mutation.SetPromptID(u)
	return gu
}

// SetNillablePromptID sets the "prompt_id" field if the given value is not nil.
func (gu *GenerationUpdate) SetNillablePromptID(u *uuid.UUID) *GenerationUpdate {
	if u != nil {
		gu.SetPromptID(*u)
	}
	return gu
}

// ClearPromptID clears the value of the "prompt_id" field.
func (gu *GenerationUpdate) ClearPromptID() *GenerationUpdate {
	gu.mutation.ClearPromptID()
	return gu
}

// SetNegativePromptID sets the "negative_prompt_id" field.
func (gu *GenerationUpdate) SetNegativePromptID(u uuid.UUID) *GenerationUpdate {
	gu.mutation.SetNegativePromptID(u)
	return gu
}

// SetNillableNegativePromptID sets the "negative_prompt_id" field if the given value is not nil.
func (gu *GenerationUpdate) SetNillableNegativePromptID(u *uuid.UUID) *GenerationUpdate {
	if u != nil {
		gu.SetNegativePromptID(*u)
	}
	return gu
}

// ClearNegativePromptID clears the value of the "negative_prompt_id" field.
func (gu *GenerationUpdate) ClearNegativePromptID() *GenerationUpdate {
	gu.mutation.ClearNegativePromptID()
	return gu
}

// SetModelID sets the "model_id" field.
func (gu *GenerationUpdate) SetModelID(u uuid.UUID) *GenerationUpdate {
	gu.mutation.SetModelID(u)
	return gu
}

// SetSchedulerID sets the "scheduler_id" field.
func (gu *GenerationUpdate) SetSchedulerID(u uuid.UUID) *GenerationUpdate {
	gu.mutation.SetSchedulerID(u)
	return gu
}

// SetUserID sets the "user_id" field.
func (gu *GenerationUpdate) SetUserID(u uuid.UUID) *GenerationUpdate {
	gu.mutation.SetUserID(u)
	return gu
}

// SetDeviceInfoID sets the "device_info_id" field.
func (gu *GenerationUpdate) SetDeviceInfoID(u uuid.UUID) *GenerationUpdate {
	gu.mutation.SetDeviceInfoID(u)
	return gu
}

// SetAPITokenID sets the "api_token_id" field.
func (gu *GenerationUpdate) SetAPITokenID(u uuid.UUID) *GenerationUpdate {
	gu.mutation.SetAPITokenID(u)
	return gu
}

// SetNillableAPITokenID sets the "api_token_id" field if the given value is not nil.
func (gu *GenerationUpdate) SetNillableAPITokenID(u *uuid.UUID) *GenerationUpdate {
	if u != nil {
		gu.SetAPITokenID(*u)
	}
	return gu
}

// ClearAPITokenID clears the value of the "api_token_id" field.
func (gu *GenerationUpdate) ClearAPITokenID() *GenerationUpdate {
	gu.mutation.ClearAPITokenID()
	return gu
}

// SetStartedAt sets the "started_at" field.
func (gu *GenerationUpdate) SetStartedAt(t time.Time) *GenerationUpdate {
	gu.mutation.SetStartedAt(t)
	return gu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (gu *GenerationUpdate) SetNillableStartedAt(t *time.Time) *GenerationUpdate {
	if t != nil {
		gu.SetStartedAt(*t)
	}
	return gu
}

// ClearStartedAt clears the value of the "started_at" field.
func (gu *GenerationUpdate) ClearStartedAt() *GenerationUpdate {
	gu.mutation.ClearStartedAt()
	return gu
}

// SetCompletedAt sets the "completed_at" field.
func (gu *GenerationUpdate) SetCompletedAt(t time.Time) *GenerationUpdate {
	gu.mutation.SetCompletedAt(t)
	return gu
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (gu *GenerationUpdate) SetNillableCompletedAt(t *time.Time) *GenerationUpdate {
	if t != nil {
		gu.SetCompletedAt(*t)
	}
	return gu
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (gu *GenerationUpdate) ClearCompletedAt() *GenerationUpdate {
	gu.mutation.ClearCompletedAt()
	return gu
}

// SetUpdatedAt sets the "updated_at" field.
func (gu *GenerationUpdate) SetUpdatedAt(t time.Time) *GenerationUpdate {
	gu.mutation.SetUpdatedAt(t)
	return gu
}

// SetDeviceInfo sets the "device_info" edge to the DeviceInfo entity.
func (gu *GenerationUpdate) SetDeviceInfo(d *DeviceInfo) *GenerationUpdate {
	return gu.SetDeviceInfoID(d.ID)
}

// SetScheduler sets the "scheduler" edge to the Scheduler entity.
func (gu *GenerationUpdate) SetScheduler(s *Scheduler) *GenerationUpdate {
	return gu.SetSchedulerID(s.ID)
}

// SetPrompt sets the "prompt" edge to the Prompt entity.
func (gu *GenerationUpdate) SetPrompt(p *Prompt) *GenerationUpdate {
	return gu.SetPromptID(p.ID)
}

// SetNegativePrompt sets the "negative_prompt" edge to the NegativePrompt entity.
func (gu *GenerationUpdate) SetNegativePrompt(n *NegativePrompt) *GenerationUpdate {
	return gu.SetNegativePromptID(n.ID)
}

// SetGenerationModelID sets the "generation_model" edge to the GenerationModel entity by ID.
func (gu *GenerationUpdate) SetGenerationModelID(id uuid.UUID) *GenerationUpdate {
	gu.mutation.SetGenerationModelID(id)
	return gu
}

// SetGenerationModel sets the "generation_model" edge to the GenerationModel entity.
func (gu *GenerationUpdate) SetGenerationModel(g *GenerationModel) *GenerationUpdate {
	return gu.SetGenerationModelID(g.ID)
}

// SetUser sets the "user" edge to the User entity.
func (gu *GenerationUpdate) SetUser(u *User) *GenerationUpdate {
	return gu.SetUserID(u.ID)
}

// SetAPITokensID sets the "api_tokens" edge to the ApiToken entity by ID.
func (gu *GenerationUpdate) SetAPITokensID(id uuid.UUID) *GenerationUpdate {
	gu.mutation.SetAPITokensID(id)
	return gu
}

// SetNillableAPITokensID sets the "api_tokens" edge to the ApiToken entity by ID if the given value is not nil.
func (gu *GenerationUpdate) SetNillableAPITokensID(id *uuid.UUID) *GenerationUpdate {
	if id != nil {
		gu = gu.SetAPITokensID(*id)
	}
	return gu
}

// SetAPITokens sets the "api_tokens" edge to the ApiToken entity.
func (gu *GenerationUpdate) SetAPITokens(a *ApiToken) *GenerationUpdate {
	return gu.SetAPITokensID(a.ID)
}

// AddGenerationOutputIDs adds the "generation_outputs" edge to the GenerationOutput entity by IDs.
func (gu *GenerationUpdate) AddGenerationOutputIDs(ids ...uuid.UUID) *GenerationUpdate {
	gu.mutation.AddGenerationOutputIDs(ids...)
	return gu
}

// AddGenerationOutputs adds the "generation_outputs" edges to the GenerationOutput entity.
func (gu *GenerationUpdate) AddGenerationOutputs(g ...*GenerationOutput) *GenerationUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.AddGenerationOutputIDs(ids...)
}

// Mutation returns the GenerationMutation object of the builder.
func (gu *GenerationUpdate) Mutation() *GenerationMutation {
	return gu.mutation
}

// ClearDeviceInfo clears the "device_info" edge to the DeviceInfo entity.
func (gu *GenerationUpdate) ClearDeviceInfo() *GenerationUpdate {
	gu.mutation.ClearDeviceInfo()
	return gu
}

// ClearScheduler clears the "scheduler" edge to the Scheduler entity.
func (gu *GenerationUpdate) ClearScheduler() *GenerationUpdate {
	gu.mutation.ClearScheduler()
	return gu
}

// ClearPrompt clears the "prompt" edge to the Prompt entity.
func (gu *GenerationUpdate) ClearPrompt() *GenerationUpdate {
	gu.mutation.ClearPrompt()
	return gu
}

// ClearNegativePrompt clears the "negative_prompt" edge to the NegativePrompt entity.
func (gu *GenerationUpdate) ClearNegativePrompt() *GenerationUpdate {
	gu.mutation.ClearNegativePrompt()
	return gu
}

// ClearGenerationModel clears the "generation_model" edge to the GenerationModel entity.
func (gu *GenerationUpdate) ClearGenerationModel() *GenerationUpdate {
	gu.mutation.ClearGenerationModel()
	return gu
}

// ClearUser clears the "user" edge to the User entity.
func (gu *GenerationUpdate) ClearUser() *GenerationUpdate {
	gu.mutation.ClearUser()
	return gu
}

// ClearAPITokens clears the "api_tokens" edge to the ApiToken entity.
func (gu *GenerationUpdate) ClearAPITokens() *GenerationUpdate {
	gu.mutation.ClearAPITokens()
	return gu
}

// ClearGenerationOutputs clears all "generation_outputs" edges to the GenerationOutput entity.
func (gu *GenerationUpdate) ClearGenerationOutputs() *GenerationUpdate {
	gu.mutation.ClearGenerationOutputs()
	return gu
}

// RemoveGenerationOutputIDs removes the "generation_outputs" edge to GenerationOutput entities by IDs.
func (gu *GenerationUpdate) RemoveGenerationOutputIDs(ids ...uuid.UUID) *GenerationUpdate {
	gu.mutation.RemoveGenerationOutputIDs(ids...)
	return gu
}

// RemoveGenerationOutputs removes "generation_outputs" edges to GenerationOutput entities.
func (gu *GenerationUpdate) RemoveGenerationOutputs(g ...*GenerationOutput) *GenerationUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.RemoveGenerationOutputIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GenerationUpdate) Save(ctx context.Context) (int, error) {
	gu.defaults()
	return withHooks[int, GenerationMutation](ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GenerationUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GenerationUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GenerationUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gu *GenerationUpdate) defaults() {
	if _, ok := gu.mutation.UpdatedAt(); !ok {
		v := generation.UpdateDefaultUpdatedAt()
		gu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gu *GenerationUpdate) check() error {
	if v, ok := gu.mutation.Status(); ok {
		if err := generation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Generation.status": %w`, err)}
		}
	}
	if v, ok := gu.mutation.SourceType(); ok {
		if err := generation.SourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "source_type", err: fmt.Errorf(`ent: validator failed for field "Generation.source_type": %w`, err)}
		}
	}
	if _, ok := gu.mutation.DeviceInfoID(); gu.mutation.DeviceInfoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Generation.device_info"`)
	}
	if _, ok := gu.mutation.SchedulerID(); gu.mutation.SchedulerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Generation.scheduler"`)
	}
	if _, ok := gu.mutation.GenerationModelID(); gu.mutation.GenerationModelCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Generation.generation_model"`)
	}
	if _, ok := gu.mutation.UserID(); gu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Generation.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gu *GenerationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GenerationUpdate {
	gu.modifiers = append(gu.modifiers, modifiers...)
	return gu
}

func (gu *GenerationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   generation.Table,
			Columns: generation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: generation.FieldID,
			},
		},
	}
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Width(); ok {
		_spec.SetField(generation.FieldWidth, field.TypeInt32, value)
	}
	if value, ok := gu.mutation.AddedWidth(); ok {
		_spec.AddField(generation.FieldWidth, field.TypeInt32, value)
	}
	if value, ok := gu.mutation.Height(); ok {
		_spec.SetField(generation.FieldHeight, field.TypeInt32, value)
	}
	if value, ok := gu.mutation.AddedHeight(); ok {
		_spec.AddField(generation.FieldHeight, field.TypeInt32, value)
	}
	if value, ok := gu.mutation.InferenceSteps(); ok {
		_spec.SetField(generation.FieldInferenceSteps, field.TypeInt32, value)
	}
	if value, ok := gu.mutation.AddedInferenceSteps(); ok {
		_spec.AddField(generation.FieldInferenceSteps, field.TypeInt32, value)
	}
	if value, ok := gu.mutation.GuidanceScale(); ok {
		_spec.SetField(generation.FieldGuidanceScale, field.TypeFloat32, value)
	}
	if value, ok := gu.mutation.AddedGuidanceScale(); ok {
		_spec.AddField(generation.FieldGuidanceScale, field.TypeFloat32, value)
	}
	if value, ok := gu.mutation.NumOutputs(); ok {
		_spec.SetField(generation.FieldNumOutputs, field.TypeInt32, value)
	}
	if value, ok := gu.mutation.AddedNumOutputs(); ok {
		_spec.AddField(generation.FieldNumOutputs, field.TypeInt32, value)
	}
	if value, ok := gu.mutation.NsfwCount(); ok {
		_spec.SetField(generation.FieldNsfwCount, field.TypeInt32, value)
	}
	if value, ok := gu.mutation.AddedNsfwCount(); ok {
		_spec.AddField(generation.FieldNsfwCount, field.TypeInt32, value)
	}
	if value, ok := gu.mutation.Seed(); ok {
		_spec.SetField(generation.FieldSeed, field.TypeInt, value)
	}
	if value, ok := gu.mutation.AddedSeed(); ok {
		_spec.AddField(generation.FieldSeed, field.TypeInt, value)
	}
	if value, ok := gu.mutation.Status(); ok {
		_spec.SetField(generation.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := gu.mutation.FailureReason(); ok {
		_spec.SetField(generation.FieldFailureReason, field.TypeString, value)
	}
	if gu.mutation.FailureReasonCleared() {
		_spec.ClearField(generation.FieldFailureReason, field.TypeString)
	}
	if value, ok := gu.mutation.CountryCode(); ok {
		_spec.SetField(generation.FieldCountryCode, field.TypeString, value)
	}
	if gu.mutation.CountryCodeCleared() {
		_spec.ClearField(generation.FieldCountryCode, field.TypeString)
	}
	if value, ok := gu.mutation.InitImageURL(); ok {
		_spec.SetField(generation.FieldInitImageURL, field.TypeString, value)
	}
	if gu.mutation.InitImageURLCleared() {
		_spec.ClearField(generation.FieldInitImageURL, field.TypeString)
	}
	if value, ok := gu.mutation.MaskImageURL(); ok {
		_spec.SetField(generation.FieldMaskImageURL, field.TypeString, value)
	}
	if gu.mutation.MaskImageURLCleared() {
		_spec.ClearField(generation.FieldMaskImageURL, field.TypeString)
	}
	if value, ok := gu.mutation.PromptStrength(); ok {
		_spec.SetField(generation.FieldPromptStrength, field.TypeFloat32, value)
	}
	if value, ok := gu.mutation.AddedPromptStrength(); ok {
		_spec.AddField(generation.FieldPromptStrength, field.TypeFloat32, value)
	}
	if gu.mutation.PromptStrengthCleared() {
		_spec.ClearField(generation.FieldPromptStrength, field.TypeFloat32)
	}
	if value, ok := gu.mutation.WasAutoSubmitted(); ok {
		_spec.SetField(generation.FieldWasAutoSubmitted, field.TypeBool, value)
	}
	if value, ok := gu.mutation.StripeProductID(); ok {
		_spec.SetField(generation.FieldStripeProductID, field.TypeString, value)
	}
	if gu.mutation.StripeProductIDCleared() {
		_spec.ClearField(generation.FieldStripeProductID, field.TypeString)
	}
	if value, ok := gu.mutation.SourceType(); ok {
		_spec.SetField(generation.FieldSourceType, field.TypeEnum, value)
	}
	if value, ok := gu.mutation.WebhookToken(); ok {
		_spec.SetField(generation.FieldWebhookToken, field.TypeUUID, value)
	}
	if value, ok := gu.mutation.StartedAt(); ok {
		_spec.SetField(generation.FieldStartedAt, field.TypeTime, value)
	}
	if gu.mutation.StartedAtCleared() {
		_spec.ClearField(generation.FieldStartedAt, field.TypeTime)
	}
	if value, ok := gu.mutation.CompletedAt(); ok {
		_spec.SetField(generation.FieldCompletedAt, field.TypeTime, value)
	}
	if gu.mutation.CompletedAtCleared() {
		_spec.ClearField(generation.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := gu.mutation.UpdatedAt(); ok {
		_spec.SetField(generation.FieldUpdatedAt, field.TypeTime, value)
	}
	if gu.mutation.DeviceInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.DeviceInfoTable,
			Columns: []string{generation.DeviceInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deviceinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.DeviceInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.DeviceInfoTable,
			Columns: []string{generation.DeviceInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deviceinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.SchedulerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.SchedulerTable,
			Columns: []string{generation.SchedulerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scheduler.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.SchedulerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.SchedulerTable,
			Columns: []string{generation.SchedulerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scheduler.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.PromptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.PromptTable,
			Columns: []string{generation.PromptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: prompt.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.PromptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.PromptTable,
			Columns: []string{generation.PromptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: prompt.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.NegativePromptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.NegativePromptTable,
			Columns: []string{generation.NegativePromptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: negativeprompt.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.NegativePromptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.NegativePromptTable,
			Columns: []string{generation.NegativePromptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: negativeprompt.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.GenerationModelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.GenerationModelTable,
			Columns: []string{generation.GenerationModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generationmodel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.GenerationModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.GenerationModelTable,
			Columns: []string{generation.GenerationModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generationmodel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.UserTable,
			Columns: []string{generation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.UserTable,
			Columns: []string{generation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.APITokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.APITokensTable,
			Columns: []string{generation.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: apitoken.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.APITokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.APITokensTable,
			Columns: []string{generation.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: apitoken.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.GenerationOutputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   generation.GenerationOutputsTable,
			Columns: []string{generation.GenerationOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generationoutput.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedGenerationOutputsIDs(); len(nodes) > 0 && !gu.mutation.GenerationOutputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   generation.GenerationOutputsTable,
			Columns: []string{generation.GenerationOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generationoutput.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.GenerationOutputsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   generation.GenerationOutputsTable,
			Columns: []string{generation.GenerationOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generationoutput.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(gu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{generation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GenerationUpdateOne is the builder for updating a single Generation entity.
type GenerationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GenerationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetWidth sets the "width" field.
func (guo *GenerationUpdateOne) SetWidth(i int32) *GenerationUpdateOne {
	guo.mutation.ResetWidth()
	guo.mutation.SetWidth(i)
	return guo
}

// AddWidth adds i to the "width" field.
func (guo *GenerationUpdateOne) AddWidth(i int32) *GenerationUpdateOne {
	guo.mutation.AddWidth(i)
	return guo
}

// SetHeight sets the "height" field.
func (guo *GenerationUpdateOne) SetHeight(i int32) *GenerationUpdateOne {
	guo.mutation.ResetHeight()
	guo.mutation.SetHeight(i)
	return guo
}

// AddHeight adds i to the "height" field.
func (guo *GenerationUpdateOne) AddHeight(i int32) *GenerationUpdateOne {
	guo.mutation.AddHeight(i)
	return guo
}

// SetInferenceSteps sets the "inference_steps" field.
func (guo *GenerationUpdateOne) SetInferenceSteps(i int32) *GenerationUpdateOne {
	guo.mutation.ResetInferenceSteps()
	guo.mutation.SetInferenceSteps(i)
	return guo
}

// AddInferenceSteps adds i to the "inference_steps" field.
func (guo *GenerationUpdateOne) AddInferenceSteps(i int32) *GenerationUpdateOne {
	guo.mutation.AddInferenceSteps(i)
	return guo
}

// SetGuidanceScale sets the "guidance_scale" field.
func (guo *GenerationUpdateOne) SetGuidanceScale(f float32) *GenerationUpdateOne {
	guo.mutation.ResetGuidanceScale()
	guo.mutation.SetGuidanceScale(f)
	return guo
}

// AddGuidanceScale adds f to the "guidance_scale" field.
func (guo *GenerationUpdateOne) AddGuidanceScale(f float32) *GenerationUpdateOne {
	guo.mutation.AddGuidanceScale(f)
	return guo
}

// SetNumOutputs sets the "num_outputs" field.
func (guo *GenerationUpdateOne) SetNumOutputs(i int32) *GenerationUpdateOne {
	guo.mutation.ResetNumOutputs()
	guo.mutation.SetNumOutputs(i)
	return guo
}

// AddNumOutputs adds i to the "num_outputs" field.
func (guo *GenerationUpdateOne) AddNumOutputs(i int32) *GenerationUpdateOne {
	guo.mutation.AddNumOutputs(i)
	return guo
}

// SetNsfwCount sets the "nsfw_count" field.
func (guo *GenerationUpdateOne) SetNsfwCount(i int32) *GenerationUpdateOne {
	guo.mutation.ResetNsfwCount()
	guo.mutation.SetNsfwCount(i)
	return guo
}

// SetNillableNsfwCount sets the "nsfw_count" field if the given value is not nil.
func (guo *GenerationUpdateOne) SetNillableNsfwCount(i *int32) *GenerationUpdateOne {
	if i != nil {
		guo.SetNsfwCount(*i)
	}
	return guo
}

// AddNsfwCount adds i to the "nsfw_count" field.
func (guo *GenerationUpdateOne) AddNsfwCount(i int32) *GenerationUpdateOne {
	guo.mutation.AddNsfwCount(i)
	return guo
}

// SetSeed sets the "seed" field.
func (guo *GenerationUpdateOne) SetSeed(i int) *GenerationUpdateOne {
	guo.mutation.ResetSeed()
	guo.mutation.SetSeed(i)
	return guo
}

// AddSeed adds i to the "seed" field.
func (guo *GenerationUpdateOne) AddSeed(i int) *GenerationUpdateOne {
	guo.mutation.AddSeed(i)
	return guo
}

// SetStatus sets the "status" field.
func (guo *GenerationUpdateOne) SetStatus(ge generation.Status) *GenerationUpdateOne {
	guo.mutation.SetStatus(ge)
	return guo
}

// SetFailureReason sets the "failure_reason" field.
func (guo *GenerationUpdateOne) SetFailureReason(s string) *GenerationUpdateOne {
	guo.mutation.SetFailureReason(s)
	return guo
}

// SetNillableFailureReason sets the "failure_reason" field if the given value is not nil.
func (guo *GenerationUpdateOne) SetNillableFailureReason(s *string) *GenerationUpdateOne {
	if s != nil {
		guo.SetFailureReason(*s)
	}
	return guo
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (guo *GenerationUpdateOne) ClearFailureReason() *GenerationUpdateOne {
	guo.mutation.ClearFailureReason()
	return guo
}

// SetCountryCode sets the "country_code" field.
func (guo *GenerationUpdateOne) SetCountryCode(s string) *GenerationUpdateOne {
	guo.mutation.SetCountryCode(s)
	return guo
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (guo *GenerationUpdateOne) SetNillableCountryCode(s *string) *GenerationUpdateOne {
	if s != nil {
		guo.SetCountryCode(*s)
	}
	return guo
}

// ClearCountryCode clears the value of the "country_code" field.
func (guo *GenerationUpdateOne) ClearCountryCode() *GenerationUpdateOne {
	guo.mutation.ClearCountryCode()
	return guo
}

// SetInitImageURL sets the "init_image_url" field.
func (guo *GenerationUpdateOne) SetInitImageURL(s string) *GenerationUpdateOne {
	guo.mutation.SetInitImageURL(s)
	return guo
}

// SetNillableInitImageURL sets the "init_image_url" field if the given value is not nil.
func (guo *GenerationUpdateOne) SetNillableInitImageURL(s *string) *GenerationUpdateOne {
	if s != nil {
		guo.SetInitImageURL(*s)
	}
	return guo
}

// ClearInitImageURL clears the value of the "init_image_url" field.
func (guo *GenerationUpdateOne) ClearInitImageURL() *GenerationUpdateOne {
	guo.mutation.ClearInitImageURL()
	return guo
}

// SetMaskImageURL sets the "mask_image_url" field.
func (guo *GenerationUpdateOne) SetMaskImageURL(s string) *GenerationUpdateOne {
	guo.mutation.SetMaskImageURL(s)
	return guo
}

// SetNillableMaskImageURL sets the "mask_image_url" field if the given value is not nil.
func (guo *GenerationUpdateOne) SetNillableMaskImageURL(s *string) *GenerationUpdateOne {
	if s != nil {
		guo.SetMaskImageURL(*s)
	}
	return guo
}

// ClearMaskImageURL clears the value of the "mask_image_url" field.
func (guo *GenerationUpdateOne) ClearMaskImageURL() *GenerationUpdateOne {
	guo.mutation.ClearMaskImageURL()
	return guo
}

// SetPromptStrength sets the "prompt_strength" field.
func (guo *GenerationUpdateOne) SetPromptStrength(f float32) *GenerationUpdateOne {
	guo.mutation.ResetPromptStrength()
	guo.mutation.SetPromptStrength(f)
	return guo
}

// SetNillablePromptStrength sets the "prompt_strength" field if the given value is not nil.
func (guo *GenerationUpdateOne) SetNillablePromptStrength(f *float32) *GenerationUpdateOne {
	if f != nil {
		guo.SetPromptStrength(*f)
	}
	return guo
}

// AddPromptStrength adds f to the "prompt_strength" field.
func (guo *GenerationUpdateOne) AddPromptStrength(f float32) *GenerationUpdateOne {
	guo.mutation.AddPromptStrength(f)
	return guo
}

// ClearPromptStrength clears the value of the "prompt_strength" field.
func (guo *GenerationUpdateOne) ClearPromptStrength() *GenerationUpdateOne {
	guo.mutation.ClearPromptStrength()
	return guo
}

// SetWasAutoSubmitted sets the "was_auto_submitted" field.
func (guo *GenerationUpdateOne) SetWasAutoSubmitted(b bool) *GenerationUpdateOne {
	guo.mutation.SetWasAutoSubmitted(b)
	return guo
}

// SetNillableWasAutoSubmitted sets the "was_auto_submitted" field if the given value is not nil.
func (guo *GenerationUpdateOne) SetNillableWasAutoSubmitted(b *bool) *GenerationUpdateOne {
	if b != nil {
		guo.SetWasAutoSubmitted(*b)
	}
	return guo
}

// SetStripeProductID sets the "stripe_product_id" field.
func (guo *GenerationUpdateOne) SetStripeProductID(s string) *GenerationUpdateOne {
	guo.mutation.SetStripeProductID(s)
	return guo
}

// SetNillableStripeProductID sets the "stripe_product_id" field if the given value is not nil.
func (guo *GenerationUpdateOne) SetNillableStripeProductID(s *string) *GenerationUpdateOne {
	if s != nil {
		guo.SetStripeProductID(*s)
	}
	return guo
}

// ClearStripeProductID clears the value of the "stripe_product_id" field.
func (guo *GenerationUpdateOne) ClearStripeProductID() *GenerationUpdateOne {
	guo.mutation.ClearStripeProductID()
	return guo
}

// SetSourceType sets the "source_type" field.
func (guo *GenerationUpdateOne) SetSourceType(et enttypes.SourceType) *GenerationUpdateOne {
	guo.mutation.SetSourceType(et)
	return guo
}

// SetNillableSourceType sets the "source_type" field if the given value is not nil.
func (guo *GenerationUpdateOne) SetNillableSourceType(et *enttypes.SourceType) *GenerationUpdateOne {
	if et != nil {
		guo.SetSourceType(*et)
	}
	return guo
}

// SetWebhookToken sets the "webhook_token" field.
func (guo *GenerationUpdateOne) SetWebhookToken(u uuid.UUID) *GenerationUpdateOne {
	guo.mutation.SetWebhookToken(u)
	return guo
}

// SetNillableWebhookToken sets the "webhook_token" field if the given value is not nil.
func (guo *GenerationUpdateOne) SetNillableWebhookToken(u *uuid.UUID) *GenerationUpdateOne {
	if u != nil {
		guo.SetWebhookToken(*u)
	}
	return guo
}

// SetPromptID sets the "prompt_id" field.
func (guo *GenerationUpdateOne) SetPromptID(u uuid.UUID) *GenerationUpdateOne {
	guo.mutation.SetPromptID(u)
	return guo
}

// SetNillablePromptID sets the "prompt_id" field if the given value is not nil.
func (guo *GenerationUpdateOne) SetNillablePromptID(u *uuid.UUID) *GenerationUpdateOne {
	if u != nil {
		guo.SetPromptID(*u)
	}
	return guo
}

// ClearPromptID clears the value of the "prompt_id" field.
func (guo *GenerationUpdateOne) ClearPromptID() *GenerationUpdateOne {
	guo.mutation.ClearPromptID()
	return guo
}

// SetNegativePromptID sets the "negative_prompt_id" field.
func (guo *GenerationUpdateOne) SetNegativePromptID(u uuid.UUID) *GenerationUpdateOne {
	guo.mutation.SetNegativePromptID(u)
	return guo
}

// SetNillableNegativePromptID sets the "negative_prompt_id" field if the given value is not nil.
func (guo *GenerationUpdateOne) SetNillableNegativePromptID(u *uuid.UUID) *GenerationUpdateOne {
	if u != nil {
		guo.SetNegativePromptID(*u)
	}
	return guo
}

// ClearNegativePromptID clears the value of the "negative_prompt_id" field.
func (guo *GenerationUpdateOne) ClearNegativePromptID() *GenerationUpdateOne {
	guo.mutation.ClearNegativePromptID()
	return guo
}

// SetModelID sets the "model_id" field.
func (guo *GenerationUpdateOne) SetModelID(u uuid.UUID) *GenerationUpdateOne {
	guo.mutation.SetModelID(u)
	return guo
}

// SetSchedulerID sets the "scheduler_id" field.
func (guo *GenerationUpdateOne) SetSchedulerID(u uuid.UUID) *GenerationUpdateOne {
	guo.mutation.SetSchedulerID(u)
	return guo
}

// SetUserID sets the "user_id" field.
func (guo *GenerationUpdateOne) SetUserID(u uuid.UUID) *GenerationUpdateOne {
	guo.mutation.SetUserID(u)
	return guo
}

// SetDeviceInfoID sets the "device_info_id" field.
func (guo *GenerationUpdateOne) SetDeviceInfoID(u uuid.UUID) *GenerationUpdateOne {
	guo.mutation.SetDeviceInfoID(u)
	return guo
}

// SetAPITokenID sets the "api_token_id" field.
func (guo *GenerationUpdateOne) SetAPITokenID(u uuid.UUID) *GenerationUpdateOne {
	guo.mutation.SetAPITokenID(u)
	return guo
}

// SetNillableAPITokenID sets the "api_token_id" field if the given value is not nil.
func (guo *GenerationUpdateOne) SetNillableAPITokenID(u *uuid.UUID) *GenerationUpdateOne {
	if u != nil {
		guo.SetAPITokenID(*u)
	}
	return guo
}

// ClearAPITokenID clears the value of the "api_token_id" field.
func (guo *GenerationUpdateOne) ClearAPITokenID() *GenerationUpdateOne {
	guo.mutation.ClearAPITokenID()
	return guo
}

// SetStartedAt sets the "started_at" field.
func (guo *GenerationUpdateOne) SetStartedAt(t time.Time) *GenerationUpdateOne {
	guo.mutation.SetStartedAt(t)
	return guo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (guo *GenerationUpdateOne) SetNillableStartedAt(t *time.Time) *GenerationUpdateOne {
	if t != nil {
		guo.SetStartedAt(*t)
	}
	return guo
}

// ClearStartedAt clears the value of the "started_at" field.
func (guo *GenerationUpdateOne) ClearStartedAt() *GenerationUpdateOne {
	guo.mutation.ClearStartedAt()
	return guo
}

// SetCompletedAt sets the "completed_at" field.
func (guo *GenerationUpdateOne) SetCompletedAt(t time.Time) *GenerationUpdateOne {
	guo.mutation.SetCompletedAt(t)
	return guo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (guo *GenerationUpdateOne) SetNillableCompletedAt(t *time.Time) *GenerationUpdateOne {
	if t != nil {
		guo.SetCompletedAt(*t)
	}
	return guo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (guo *GenerationUpdateOne) ClearCompletedAt() *GenerationUpdateOne {
	guo.mutation.ClearCompletedAt()
	return guo
}

// SetUpdatedAt sets the "updated_at" field.
func (guo *GenerationUpdateOne) SetUpdatedAt(t time.Time) *GenerationUpdateOne {
	guo.mutation.SetUpdatedAt(t)
	return guo
}

// SetDeviceInfo sets the "device_info" edge to the DeviceInfo entity.
func (guo *GenerationUpdateOne) SetDeviceInfo(d *DeviceInfo) *GenerationUpdateOne {
	return guo.SetDeviceInfoID(d.ID)
}

// SetScheduler sets the "scheduler" edge to the Scheduler entity.
func (guo *GenerationUpdateOne) SetScheduler(s *Scheduler) *GenerationUpdateOne {
	return guo.SetSchedulerID(s.ID)
}

// SetPrompt sets the "prompt" edge to the Prompt entity.
func (guo *GenerationUpdateOne) SetPrompt(p *Prompt) *GenerationUpdateOne {
	return guo.SetPromptID(p.ID)
}

// SetNegativePrompt sets the "negative_prompt" edge to the NegativePrompt entity.
func (guo *GenerationUpdateOne) SetNegativePrompt(n *NegativePrompt) *GenerationUpdateOne {
	return guo.SetNegativePromptID(n.ID)
}

// SetGenerationModelID sets the "generation_model" edge to the GenerationModel entity by ID.
func (guo *GenerationUpdateOne) SetGenerationModelID(id uuid.UUID) *GenerationUpdateOne {
	guo.mutation.SetGenerationModelID(id)
	return guo
}

// SetGenerationModel sets the "generation_model" edge to the GenerationModel entity.
func (guo *GenerationUpdateOne) SetGenerationModel(g *GenerationModel) *GenerationUpdateOne {
	return guo.SetGenerationModelID(g.ID)
}

// SetUser sets the "user" edge to the User entity.
func (guo *GenerationUpdateOne) SetUser(u *User) *GenerationUpdateOne {
	return guo.SetUserID(u.ID)
}

// SetAPITokensID sets the "api_tokens" edge to the ApiToken entity by ID.
func (guo *GenerationUpdateOne) SetAPITokensID(id uuid.UUID) *GenerationUpdateOne {
	guo.mutation.SetAPITokensID(id)
	return guo
}

// SetNillableAPITokensID sets the "api_tokens" edge to the ApiToken entity by ID if the given value is not nil.
func (guo *GenerationUpdateOne) SetNillableAPITokensID(id *uuid.UUID) *GenerationUpdateOne {
	if id != nil {
		guo = guo.SetAPITokensID(*id)
	}
	return guo
}

// SetAPITokens sets the "api_tokens" edge to the ApiToken entity.
func (guo *GenerationUpdateOne) SetAPITokens(a *ApiToken) *GenerationUpdateOne {
	return guo.SetAPITokensID(a.ID)
}

// AddGenerationOutputIDs adds the "generation_outputs" edge to the GenerationOutput entity by IDs.
func (guo *GenerationUpdateOne) AddGenerationOutputIDs(ids ...uuid.UUID) *GenerationUpdateOne {
	guo.mutation.AddGenerationOutputIDs(ids...)
	return guo
}

// AddGenerationOutputs adds the "generation_outputs" edges to the GenerationOutput entity.
func (guo *GenerationUpdateOne) AddGenerationOutputs(g ...*GenerationOutput) *GenerationUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.AddGenerationOutputIDs(ids...)
}

// Mutation returns the GenerationMutation object of the builder.
func (guo *GenerationUpdateOne) Mutation() *GenerationMutation {
	return guo.mutation
}

// ClearDeviceInfo clears the "device_info" edge to the DeviceInfo entity.
func (guo *GenerationUpdateOne) ClearDeviceInfo() *GenerationUpdateOne {
	guo.mutation.ClearDeviceInfo()
	return guo
}

// ClearScheduler clears the "scheduler" edge to the Scheduler entity.
func (guo *GenerationUpdateOne) ClearScheduler() *GenerationUpdateOne {
	guo.mutation.ClearScheduler()
	return guo
}

// ClearPrompt clears the "prompt" edge to the Prompt entity.
func (guo *GenerationUpdateOne) ClearPrompt() *GenerationUpdateOne {
	guo.mutation.ClearPrompt()
	return guo
}

// ClearNegativePrompt clears the "negative_prompt" edge to the NegativePrompt entity.
func (guo *GenerationUpdateOne) ClearNegativePrompt() *GenerationUpdateOne {
	guo.mutation.ClearNegativePrompt()
	return guo
}

// ClearGenerationModel clears the "generation_model" edge to the GenerationModel entity.
func (guo *GenerationUpdateOne) ClearGenerationModel() *GenerationUpdateOne {
	guo.mutation.ClearGenerationModel()
	return guo
}

// ClearUser clears the "user" edge to the User entity.
func (guo *GenerationUpdateOne) ClearUser() *GenerationUpdateOne {
	guo.mutation.ClearUser()
	return guo
}

// ClearAPITokens clears the "api_tokens" edge to the ApiToken entity.
func (guo *GenerationUpdateOne) ClearAPITokens() *GenerationUpdateOne {
	guo.mutation.ClearAPITokens()
	return guo
}

// ClearGenerationOutputs clears all "generation_outputs" edges to the GenerationOutput entity.
func (guo *GenerationUpdateOne) ClearGenerationOutputs() *GenerationUpdateOne {
	guo.mutation.ClearGenerationOutputs()
	return guo
}

// RemoveGenerationOutputIDs removes the "generation_outputs" edge to GenerationOutput entities by IDs.
func (guo *GenerationUpdateOne) RemoveGenerationOutputIDs(ids ...uuid.UUID) *GenerationUpdateOne {
	guo.mutation.RemoveGenerationOutputIDs(ids...)
	return guo
}

// RemoveGenerationOutputs removes "generation_outputs" edges to GenerationOutput entities.
func (guo *GenerationUpdateOne) RemoveGenerationOutputs(g ...*GenerationOutput) *GenerationUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.RemoveGenerationOutputIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GenerationUpdateOne) Select(field string, fields ...string) *GenerationUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Generation entity.
func (guo *GenerationUpdateOne) Save(ctx context.Context) (*Generation, error) {
	guo.defaults()
	return withHooks[*Generation, GenerationMutation](ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GenerationUpdateOne) SaveX(ctx context.Context) *Generation {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GenerationUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GenerationUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guo *GenerationUpdateOne) defaults() {
	if _, ok := guo.mutation.UpdatedAt(); !ok {
		v := generation.UpdateDefaultUpdatedAt()
		guo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guo *GenerationUpdateOne) check() error {
	if v, ok := guo.mutation.Status(); ok {
		if err := generation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Generation.status": %w`, err)}
		}
	}
	if v, ok := guo.mutation.SourceType(); ok {
		if err := generation.SourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "source_type", err: fmt.Errorf(`ent: validator failed for field "Generation.source_type": %w`, err)}
		}
	}
	if _, ok := guo.mutation.DeviceInfoID(); guo.mutation.DeviceInfoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Generation.device_info"`)
	}
	if _, ok := guo.mutation.SchedulerID(); guo.mutation.SchedulerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Generation.scheduler"`)
	}
	if _, ok := guo.mutation.GenerationModelID(); guo.mutation.GenerationModelCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Generation.generation_model"`)
	}
	if _, ok := guo.mutation.UserID(); guo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Generation.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (guo *GenerationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GenerationUpdateOne {
	guo.modifiers = append(guo.modifiers, modifiers...)
	return guo
}

func (guo *GenerationUpdateOne) sqlSave(ctx context.Context) (_node *Generation, err error) {
	if err := guo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   generation.Table,
			Columns: generation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: generation.FieldID,
			},
		},
	}
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Generation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, generation.FieldID)
		for _, f := range fields {
			if !generation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != generation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Width(); ok {
		_spec.SetField(generation.FieldWidth, field.TypeInt32, value)
	}
	if value, ok := guo.mutation.AddedWidth(); ok {
		_spec.AddField(generation.FieldWidth, field.TypeInt32, value)
	}
	if value, ok := guo.mutation.Height(); ok {
		_spec.SetField(generation.FieldHeight, field.TypeInt32, value)
	}
	if value, ok := guo.mutation.AddedHeight(); ok {
		_spec.AddField(generation.FieldHeight, field.TypeInt32, value)
	}
	if value, ok := guo.mutation.InferenceSteps(); ok {
		_spec.SetField(generation.FieldInferenceSteps, field.TypeInt32, value)
	}
	if value, ok := guo.mutation.AddedInferenceSteps(); ok {
		_spec.AddField(generation.FieldInferenceSteps, field.TypeInt32, value)
	}
	if value, ok := guo.mutation.GuidanceScale(); ok {
		_spec.SetField(generation.FieldGuidanceScale, field.TypeFloat32, value)
	}
	if value, ok := guo.mutation.AddedGuidanceScale(); ok {
		_spec.AddField(generation.FieldGuidanceScale, field.TypeFloat32, value)
	}
	if value, ok := guo.mutation.NumOutputs(); ok {
		_spec.SetField(generation.FieldNumOutputs, field.TypeInt32, value)
	}
	if value, ok := guo.mutation.AddedNumOutputs(); ok {
		_spec.AddField(generation.FieldNumOutputs, field.TypeInt32, value)
	}
	if value, ok := guo.mutation.NsfwCount(); ok {
		_spec.SetField(generation.FieldNsfwCount, field.TypeInt32, value)
	}
	if value, ok := guo.mutation.AddedNsfwCount(); ok {
		_spec.AddField(generation.FieldNsfwCount, field.TypeInt32, value)
	}
	if value, ok := guo.mutation.Seed(); ok {
		_spec.SetField(generation.FieldSeed, field.TypeInt, value)
	}
	if value, ok := guo.mutation.AddedSeed(); ok {
		_spec.AddField(generation.FieldSeed, field.TypeInt, value)
	}
	if value, ok := guo.mutation.Status(); ok {
		_spec.SetField(generation.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := guo.mutation.FailureReason(); ok {
		_spec.SetField(generation.FieldFailureReason, field.TypeString, value)
	}
	if guo.mutation.FailureReasonCleared() {
		_spec.ClearField(generation.FieldFailureReason, field.TypeString)
	}
	if value, ok := guo.mutation.CountryCode(); ok {
		_spec.SetField(generation.FieldCountryCode, field.TypeString, value)
	}
	if guo.mutation.CountryCodeCleared() {
		_spec.ClearField(generation.FieldCountryCode, field.TypeString)
	}
	if value, ok := guo.mutation.InitImageURL(); ok {
		_spec.SetField(generation.FieldInitImageURL, field.TypeString, value)
	}
	if guo.mutation.InitImageURLCleared() {
		_spec.ClearField(generation.FieldInitImageURL, field.TypeString)
	}
	if value, ok := guo.mutation.MaskImageURL(); ok {
		_spec.SetField(generation.FieldMaskImageURL, field.TypeString, value)
	}
	if guo.mutation.MaskImageURLCleared() {
		_spec.ClearField(generation.FieldMaskImageURL, field.TypeString)
	}
	if value, ok := guo.mutation.PromptStrength(); ok {
		_spec.SetField(generation.FieldPromptStrength, field.TypeFloat32, value)
	}
	if value, ok := guo.mutation.AddedPromptStrength(); ok {
		_spec.AddField(generation.FieldPromptStrength, field.TypeFloat32, value)
	}
	if guo.mutation.PromptStrengthCleared() {
		_spec.ClearField(generation.FieldPromptStrength, field.TypeFloat32)
	}
	if value, ok := guo.mutation.WasAutoSubmitted(); ok {
		_spec.SetField(generation.FieldWasAutoSubmitted, field.TypeBool, value)
	}
	if value, ok := guo.mutation.StripeProductID(); ok {
		_spec.SetField(generation.FieldStripeProductID, field.TypeString, value)
	}
	if guo.mutation.StripeProductIDCleared() {
		_spec.ClearField(generation.FieldStripeProductID, field.TypeString)
	}
	if value, ok := guo.mutation.SourceType(); ok {
		_spec.SetField(generation.FieldSourceType, field.TypeEnum, value)
	}
	if value, ok := guo.mutation.WebhookToken(); ok {
		_spec.SetField(generation.FieldWebhookToken, field.TypeUUID, value)
	}
	if value, ok := guo.mutation.StartedAt(); ok {
		_spec.SetField(generation.FieldStartedAt, field.TypeTime, value)
	}
	if guo.mutation.StartedAtCleared() {
		_spec.ClearField(generation.FieldStartedAt, field.TypeTime)
	}
	if value, ok := guo.mutation.CompletedAt(); ok {
		_spec.SetField(generation.FieldCompletedAt, field.TypeTime, value)
	}
	if guo.mutation.CompletedAtCleared() {
		_spec.ClearField(generation.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := guo.mutation.UpdatedAt(); ok {
		_spec.SetField(generation.FieldUpdatedAt, field.TypeTime, value)
	}
	if guo.mutation.DeviceInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.DeviceInfoTable,
			Columns: []string{generation.DeviceInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deviceinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.DeviceInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.DeviceInfoTable,
			Columns: []string{generation.DeviceInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deviceinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.SchedulerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.SchedulerTable,
			Columns: []string{generation.SchedulerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scheduler.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.SchedulerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.SchedulerTable,
			Columns: []string{generation.SchedulerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scheduler.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.PromptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.PromptTable,
			Columns: []string{generation.PromptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: prompt.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.PromptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.PromptTable,
			Columns: []string{generation.PromptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: prompt.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.NegativePromptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.NegativePromptTable,
			Columns: []string{generation.NegativePromptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: negativeprompt.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.NegativePromptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.NegativePromptTable,
			Columns: []string{generation.NegativePromptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: negativeprompt.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.GenerationModelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.GenerationModelTable,
			Columns: []string{generation.GenerationModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generationmodel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.GenerationModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.GenerationModelTable,
			Columns: []string{generation.GenerationModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generationmodel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.UserTable,
			Columns: []string{generation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.UserTable,
			Columns: []string{generation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.APITokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.APITokensTable,
			Columns: []string{generation.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: apitoken.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.APITokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.APITokensTable,
			Columns: []string{generation.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: apitoken.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.GenerationOutputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   generation.GenerationOutputsTable,
			Columns: []string{generation.GenerationOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generationoutput.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedGenerationOutputsIDs(); len(nodes) > 0 && !guo.mutation.GenerationOutputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   generation.GenerationOutputsTable,
			Columns: []string{generation.GenerationOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generationoutput.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.GenerationOutputsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   generation.GenerationOutputsTable,
			Columns: []string{generation.GenerationOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generationoutput.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(guo.modifiers...)
	_node = &Generation{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{generation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
