// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stablecog/sc-go/database/ent/predicate"
	"github.com/stablecog/sc-go/database/ent/usernameblacklist"
)

// UsernameBlacklistDelete is the builder for deleting a UsernameBlacklist entity.
type UsernameBlacklistDelete struct {
	config
	hooks    []Hook
	mutation *UsernameBlacklistMutation
}

// Where appends a list predicates to the UsernameBlacklistDelete builder.
func (ubd *UsernameBlacklistDelete) Where(ps ...predicate.UsernameBlacklist) *UsernameBlacklistDelete {
	ubd.mutation.Where(ps...)
	return ubd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ubd *UsernameBlacklistDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ubd.sqlExec, ubd.mutation, ubd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ubd *UsernameBlacklistDelete) ExecX(ctx context.Context) int {
	n, err := ubd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ubd *UsernameBlacklistDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(usernameblacklist.Table, sqlgraph.NewFieldSpec(usernameblacklist.FieldID, field.TypeUUID))
	if ps := ubd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ubd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ubd.mutation.done = true
	return affected, err
}

// UsernameBlacklistDeleteOne is the builder for deleting a single UsernameBlacklist entity.
type UsernameBlacklistDeleteOne struct {
	ubd *UsernameBlacklistDelete
}

// Where appends a list predicates to the UsernameBlacklistDelete builder.
func (ubdo *UsernameBlacklistDeleteOne) Where(ps ...predicate.UsernameBlacklist) *UsernameBlacklistDeleteOne {
	ubdo.ubd.mutation.Where(ps...)
	return ubdo
}

// Exec executes the deletion query.
func (ubdo *UsernameBlacklistDeleteOne) Exec(ctx context.Context) error {
	n, err := ubdo.ubd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{usernameblacklist.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ubdo *UsernameBlacklistDeleteOne) ExecX(ctx context.Context) {
	if err := ubdo.Exec(ctx); err != nil {
		panic(err)
	}
}
