// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/generation"
	"github.com/stablecog/sc-go/database/ent/generationoutput"
	"github.com/stablecog/sc-go/database/ent/generationoutputlike"
	"github.com/stablecog/sc-go/database/ent/predicate"
	"github.com/stablecog/sc-go/database/ent/upscaleoutput"
)

// GenerationOutputQuery is the builder for querying GenerationOutput entities.
type GenerationOutputQuery struct {
	config
	ctx                       *QueryContext
	order                     []generationoutput.OrderOption
	inters                    []Interceptor
	predicates                []predicate.GenerationOutput
	withGenerations           *GenerationQuery
	withUpscaleOutputs        *UpscaleOutputQuery
	withGenerationOutputLikes *GenerationOutputLikeQuery
	modifiers                 []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GenerationOutputQuery builder.
func (goq *GenerationOutputQuery) Where(ps ...predicate.GenerationOutput) *GenerationOutputQuery {
	goq.predicates = append(goq.predicates, ps...)
	return goq
}

// Limit the number of records to be returned by this query.
func (goq *GenerationOutputQuery) Limit(limit int) *GenerationOutputQuery {
	goq.ctx.Limit = &limit
	return goq
}

// Offset to start from.
func (goq *GenerationOutputQuery) Offset(offset int) *GenerationOutputQuery {
	goq.ctx.Offset = &offset
	return goq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (goq *GenerationOutputQuery) Unique(unique bool) *GenerationOutputQuery {
	goq.ctx.Unique = &unique
	return goq
}

// Order specifies how the records should be ordered.
func (goq *GenerationOutputQuery) Order(o ...generationoutput.OrderOption) *GenerationOutputQuery {
	goq.order = append(goq.order, o...)
	return goq
}

// QueryGenerations chains the current query on the "generations" edge.
func (goq *GenerationOutputQuery) QueryGenerations() *GenerationQuery {
	query := (&GenerationClient{config: goq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := goq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := goq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(generationoutput.Table, generationoutput.FieldID, selector),
			sqlgraph.To(generation.Table, generation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, generationoutput.GenerationsTable, generationoutput.GenerationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(goq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUpscaleOutputs chains the current query on the "upscale_outputs" edge.
func (goq *GenerationOutputQuery) QueryUpscaleOutputs() *UpscaleOutputQuery {
	query := (&UpscaleOutputClient{config: goq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := goq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := goq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(generationoutput.Table, generationoutput.FieldID, selector),
			sqlgraph.To(upscaleoutput.Table, upscaleoutput.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, generationoutput.UpscaleOutputsTable, generationoutput.UpscaleOutputsColumn),
		)
		fromU = sqlgraph.SetNeighbors(goq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGenerationOutputLikes chains the current query on the "generation_output_likes" edge.
func (goq *GenerationOutputQuery) QueryGenerationOutputLikes() *GenerationOutputLikeQuery {
	query := (&GenerationOutputLikeClient{config: goq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := goq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := goq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(generationoutput.Table, generationoutput.FieldID, selector),
			sqlgraph.To(generationoutputlike.Table, generationoutputlike.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, generationoutput.GenerationOutputLikesTable, generationoutput.GenerationOutputLikesColumn),
		)
		fromU = sqlgraph.SetNeighbors(goq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GenerationOutput entity from the query.
// Returns a *NotFoundError when no GenerationOutput was found.
func (goq *GenerationOutputQuery) First(ctx context.Context) (*GenerationOutput, error) {
	nodes, err := goq.Limit(1).All(setContextOp(ctx, goq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{generationoutput.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (goq *GenerationOutputQuery) FirstX(ctx context.Context) *GenerationOutput {
	node, err := goq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GenerationOutput ID from the query.
// Returns a *NotFoundError when no GenerationOutput ID was found.
func (goq *GenerationOutputQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = goq.Limit(1).IDs(setContextOp(ctx, goq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{generationoutput.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (goq *GenerationOutputQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := goq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GenerationOutput entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GenerationOutput entity is found.
// Returns a *NotFoundError when no GenerationOutput entities are found.
func (goq *GenerationOutputQuery) Only(ctx context.Context) (*GenerationOutput, error) {
	nodes, err := goq.Limit(2).All(setContextOp(ctx, goq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{generationoutput.Label}
	default:
		return nil, &NotSingularError{generationoutput.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (goq *GenerationOutputQuery) OnlyX(ctx context.Context) *GenerationOutput {
	node, err := goq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GenerationOutput ID in the query.
// Returns a *NotSingularError when more than one GenerationOutput ID is found.
// Returns a *NotFoundError when no entities are found.
func (goq *GenerationOutputQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = goq.Limit(2).IDs(setContextOp(ctx, goq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{generationoutput.Label}
	default:
		err = &NotSingularError{generationoutput.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (goq *GenerationOutputQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := goq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GenerationOutputs.
func (goq *GenerationOutputQuery) All(ctx context.Context) ([]*GenerationOutput, error) {
	ctx = setContextOp(ctx, goq.ctx, ent.OpQueryAll)
	if err := goq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*GenerationOutput, *GenerationOutputQuery]()
	return withInterceptors[[]*GenerationOutput](ctx, goq, qr, goq.inters)
}

// AllX is like All, but panics if an error occurs.
func (goq *GenerationOutputQuery) AllX(ctx context.Context) []*GenerationOutput {
	nodes, err := goq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GenerationOutput IDs.
func (goq *GenerationOutputQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if goq.ctx.Unique == nil && goq.path != nil {
		goq.Unique(true)
	}
	ctx = setContextOp(ctx, goq.ctx, ent.OpQueryIDs)
	if err = goq.Select(generationoutput.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (goq *GenerationOutputQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := goq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (goq *GenerationOutputQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, goq.ctx, ent.OpQueryCount)
	if err := goq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, goq, querierCount[*GenerationOutputQuery](), goq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (goq *GenerationOutputQuery) CountX(ctx context.Context) int {
	count, err := goq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (goq *GenerationOutputQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, goq.ctx, ent.OpQueryExist)
	switch _, err := goq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (goq *GenerationOutputQuery) ExistX(ctx context.Context) bool {
	exist, err := goq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GenerationOutputQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (goq *GenerationOutputQuery) Clone() *GenerationOutputQuery {
	if goq == nil {
		return nil
	}
	return &GenerationOutputQuery{
		config:                    goq.config,
		ctx:                       goq.ctx.Clone(),
		order:                     append([]generationoutput.OrderOption{}, goq.order...),
		inters:                    append([]Interceptor{}, goq.inters...),
		predicates:                append([]predicate.GenerationOutput{}, goq.predicates...),
		withGenerations:           goq.withGenerations.Clone(),
		withUpscaleOutputs:        goq.withUpscaleOutputs.Clone(),
		withGenerationOutputLikes: goq.withGenerationOutputLikes.Clone(),
		// clone intermediate query.
		sql:  goq.sql.Clone(),
		path: goq.path,
	}
}

// WithGenerations tells the query-builder to eager-load the nodes that are connected to
// the "generations" edge. The optional arguments are used to configure the query builder of the edge.
func (goq *GenerationOutputQuery) WithGenerations(opts ...func(*GenerationQuery)) *GenerationOutputQuery {
	query := (&GenerationClient{config: goq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	goq.withGenerations = query
	return goq
}

// WithUpscaleOutputs tells the query-builder to eager-load the nodes that are connected to
// the "upscale_outputs" edge. The optional arguments are used to configure the query builder of the edge.
func (goq *GenerationOutputQuery) WithUpscaleOutputs(opts ...func(*UpscaleOutputQuery)) *GenerationOutputQuery {
	query := (&UpscaleOutputClient{config: goq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	goq.withUpscaleOutputs = query
	return goq
}

// WithGenerationOutputLikes tells the query-builder to eager-load the nodes that are connected to
// the "generation_output_likes" edge. The optional arguments are used to configure the query builder of the edge.
func (goq *GenerationOutputQuery) WithGenerationOutputLikes(opts ...func(*GenerationOutputLikeQuery)) *GenerationOutputQuery {
	query := (&GenerationOutputLikeClient{config: goq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	goq.withGenerationOutputLikes = query
	return goq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ImagePath string `json:"image_path,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GenerationOutput.Query().
//		GroupBy(generationoutput.FieldImagePath).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (goq *GenerationOutputQuery) GroupBy(field string, fields ...string) *GenerationOutputGroupBy {
	goq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GenerationOutputGroupBy{build: goq}
	grbuild.flds = &goq.ctx.Fields
	grbuild.label = generationoutput.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ImagePath string `json:"image_path,omitempty"`
//	}
//
//	client.GenerationOutput.Query().
//		Select(generationoutput.FieldImagePath).
//		Scan(ctx, &v)
func (goq *GenerationOutputQuery) Select(fields ...string) *GenerationOutputSelect {
	goq.ctx.Fields = append(goq.ctx.Fields, fields...)
	sbuild := &GenerationOutputSelect{GenerationOutputQuery: goq}
	sbuild.label = generationoutput.Label
	sbuild.flds, sbuild.scan = &goq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GenerationOutputSelect configured with the given aggregations.
func (goq *GenerationOutputQuery) Aggregate(fns ...AggregateFunc) *GenerationOutputSelect {
	return goq.Select().Aggregate(fns...)
}

func (goq *GenerationOutputQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range goq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, goq); err != nil {
				return err
			}
		}
	}
	for _, f := range goq.ctx.Fields {
		if !generationoutput.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if goq.path != nil {
		prev, err := goq.path(ctx)
		if err != nil {
			return err
		}
		goq.sql = prev
	}
	return nil
}

func (goq *GenerationOutputQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GenerationOutput, error) {
	var (
		nodes       = []*GenerationOutput{}
		_spec       = goq.querySpec()
		loadedTypes = [3]bool{
			goq.withGenerations != nil,
			goq.withUpscaleOutputs != nil,
			goq.withGenerationOutputLikes != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GenerationOutput).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GenerationOutput{config: goq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(goq.modifiers) > 0 {
		_spec.Modifiers = goq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, goq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := goq.withGenerations; query != nil {
		if err := goq.loadGenerations(ctx, query, nodes, nil,
			func(n *GenerationOutput, e *Generation) { n.Edges.Generations = e }); err != nil {
			return nil, err
		}
	}
	if query := goq.withUpscaleOutputs; query != nil {
		if err := goq.loadUpscaleOutputs(ctx, query, nodes, nil,
			func(n *GenerationOutput, e *UpscaleOutput) { n.Edges.UpscaleOutputs = e }); err != nil {
			return nil, err
		}
	}
	if query := goq.withGenerationOutputLikes; query != nil {
		if err := goq.loadGenerationOutputLikes(ctx, query, nodes,
			func(n *GenerationOutput) { n.Edges.GenerationOutputLikes = []*GenerationOutputLike{} },
			func(n *GenerationOutput, e *GenerationOutputLike) {
				n.Edges.GenerationOutputLikes = append(n.Edges.GenerationOutputLikes, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (goq *GenerationOutputQuery) loadGenerations(ctx context.Context, query *GenerationQuery, nodes []*GenerationOutput, init func(*GenerationOutput), assign func(*GenerationOutput, *Generation)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*GenerationOutput)
	for i := range nodes {
		fk := nodes[i].GenerationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(generation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "generation_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (goq *GenerationOutputQuery) loadUpscaleOutputs(ctx context.Context, query *UpscaleOutputQuery, nodes []*GenerationOutput, init func(*GenerationOutput), assign func(*GenerationOutput, *UpscaleOutput)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*GenerationOutput)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(upscaleoutput.FieldGenerationOutputID)
	}
	query.Where(predicate.UpscaleOutput(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(generationoutput.UpscaleOutputsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.GenerationOutputID
		if fk == nil {
			return fmt.Errorf(`foreign-key "generation_output_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "generation_output_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (goq *GenerationOutputQuery) loadGenerationOutputLikes(ctx context.Context, query *GenerationOutputLikeQuery, nodes []*GenerationOutput, init func(*GenerationOutput), assign func(*GenerationOutput, *GenerationOutputLike)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*GenerationOutput)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(generationoutputlike.FieldOutputID)
	}
	query.Where(predicate.GenerationOutputLike(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(generationoutput.GenerationOutputLikesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OutputID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "output_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (goq *GenerationOutputQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := goq.querySpec()
	if len(goq.modifiers) > 0 {
		_spec.Modifiers = goq.modifiers
	}
	_spec.Node.Columns = goq.ctx.Fields
	if len(goq.ctx.Fields) > 0 {
		_spec.Unique = goq.ctx.Unique != nil && *goq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, goq.driver, _spec)
}

func (goq *GenerationOutputQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(generationoutput.Table, generationoutput.Columns, sqlgraph.NewFieldSpec(generationoutput.FieldID, field.TypeUUID))
	_spec.From = goq.sql
	if unique := goq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if goq.path != nil {
		_spec.Unique = true
	}
	if fields := goq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, generationoutput.FieldID)
		for i := range fields {
			if fields[i] != generationoutput.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if goq.withGenerations != nil {
			_spec.Node.AddColumnOnce(generationoutput.FieldGenerationID)
		}
	}
	if ps := goq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := goq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := goq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := goq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (goq *GenerationOutputQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(goq.driver.Dialect())
	t1 := builder.Table(generationoutput.Table)
	columns := goq.ctx.Fields
	if len(columns) == 0 {
		columns = generationoutput.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if goq.sql != nil {
		selector = goq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if goq.ctx.Unique != nil && *goq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range goq.modifiers {
		m(selector)
	}
	for _, p := range goq.predicates {
		p(selector)
	}
	for _, p := range goq.order {
		p(selector)
	}
	if offset := goq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := goq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (goq *GenerationOutputQuery) Modify(modifiers ...func(s *sql.Selector)) *GenerationOutputSelect {
	goq.modifiers = append(goq.modifiers, modifiers...)
	return goq.Select()
}

// GenerationOutputGroupBy is the group-by builder for GenerationOutput entities.
type GenerationOutputGroupBy struct {
	selector
	build *GenerationOutputQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gogb *GenerationOutputGroupBy) Aggregate(fns ...AggregateFunc) *GenerationOutputGroupBy {
	gogb.fns = append(gogb.fns, fns...)
	return gogb
}

// Scan applies the selector query and scans the result into the given value.
func (gogb *GenerationOutputGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gogb.build.ctx, ent.OpQueryGroupBy)
	if err := gogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GenerationOutputQuery, *GenerationOutputGroupBy](ctx, gogb.build, gogb, gogb.build.inters, v)
}

func (gogb *GenerationOutputGroupBy) sqlScan(ctx context.Context, root *GenerationOutputQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(gogb.fns))
	for _, fn := range gogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*gogb.flds)+len(gogb.fns))
		for _, f := range *gogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*gogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GenerationOutputSelect is the builder for selecting fields of GenerationOutput entities.
type GenerationOutputSelect struct {
	*GenerationOutputQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gos *GenerationOutputSelect) Aggregate(fns ...AggregateFunc) *GenerationOutputSelect {
	gos.fns = append(gos.fns, fns...)
	return gos
}

// Scan applies the selector query and scans the result into the given value.
func (gos *GenerationOutputSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gos.ctx, ent.OpQuerySelect)
	if err := gos.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GenerationOutputQuery, *GenerationOutputSelect](ctx, gos.GenerationOutputQuery, gos, gos.inters, v)
}

func (gos *GenerationOutputSelect) sqlScan(ctx context.Context, root *GenerationOutputQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(gos.fns))
	for _, fn := range gos.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*gos.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (gos *GenerationOutputSelect) Modify(modifiers ...func(s *sql.Selector)) *GenerationOutputSelect {
	gos.modifiers = append(gos.modifiers, modifiers...)
	return gos
}
