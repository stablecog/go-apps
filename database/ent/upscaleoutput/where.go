// Code generated by ent, DO NOT EDIT.

package upscaleoutput

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldLTE(FieldID, id))
}

// ImagePath applies equality check predicate on the "image_path" field. It's identical to ImagePathEQ.
func ImagePath(v string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldEQ(FieldImagePath, v))
}

// InputImageURL applies equality check predicate on the "input_image_url" field. It's identical to InputImageURLEQ.
func InputImageURL(v string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldEQ(FieldInputImageURL, v))
}

// UpscaleID applies equality check predicate on the "upscale_id" field. It's identical to UpscaleIDEQ.
func UpscaleID(v uuid.UUID) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldEQ(FieldUpscaleID, v))
}

// GenerationOutputID applies equality check predicate on the "generation_output_id" field. It's identical to GenerationOutputIDEQ.
func GenerationOutputID(v uuid.UUID) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldEQ(FieldGenerationOutputID, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldEQ(FieldDeletedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldEQ(FieldUpdatedAt, v))
}

// ImagePathEQ applies the EQ predicate on the "image_path" field.
func ImagePathEQ(v string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldEQ(FieldImagePath, v))
}

// ImagePathNEQ applies the NEQ predicate on the "image_path" field.
func ImagePathNEQ(v string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldNEQ(FieldImagePath, v))
}

// ImagePathIn applies the In predicate on the "image_path" field.
func ImagePathIn(vs ...string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldIn(FieldImagePath, vs...))
}

// ImagePathNotIn applies the NotIn predicate on the "image_path" field.
func ImagePathNotIn(vs ...string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldNotIn(FieldImagePath, vs...))
}

// ImagePathGT applies the GT predicate on the "image_path" field.
func ImagePathGT(v string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldGT(FieldImagePath, v))
}

// ImagePathGTE applies the GTE predicate on the "image_path" field.
func ImagePathGTE(v string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldGTE(FieldImagePath, v))
}

// ImagePathLT applies the LT predicate on the "image_path" field.
func ImagePathLT(v string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldLT(FieldImagePath, v))
}

// ImagePathLTE applies the LTE predicate on the "image_path" field.
func ImagePathLTE(v string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldLTE(FieldImagePath, v))
}

// ImagePathContains applies the Contains predicate on the "image_path" field.
func ImagePathContains(v string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldContains(FieldImagePath, v))
}

// ImagePathHasPrefix applies the HasPrefix predicate on the "image_path" field.
func ImagePathHasPrefix(v string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldHasPrefix(FieldImagePath, v))
}

// ImagePathHasSuffix applies the HasSuffix predicate on the "image_path" field.
func ImagePathHasSuffix(v string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldHasSuffix(FieldImagePath, v))
}

// ImagePathEqualFold applies the EqualFold predicate on the "image_path" field.
func ImagePathEqualFold(v string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldEqualFold(FieldImagePath, v))
}

// ImagePathContainsFold applies the ContainsFold predicate on the "image_path" field.
func ImagePathContainsFold(v string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldContainsFold(FieldImagePath, v))
}

// InputImageURLEQ applies the EQ predicate on the "input_image_url" field.
func InputImageURLEQ(v string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldEQ(FieldInputImageURL, v))
}

// InputImageURLNEQ applies the NEQ predicate on the "input_image_url" field.
func InputImageURLNEQ(v string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldNEQ(FieldInputImageURL, v))
}

// InputImageURLIn applies the In predicate on the "input_image_url" field.
func InputImageURLIn(vs ...string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldIn(FieldInputImageURL, vs...))
}

// InputImageURLNotIn applies the NotIn predicate on the "input_image_url" field.
func InputImageURLNotIn(vs ...string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldNotIn(FieldInputImageURL, vs...))
}

// InputImageURLGT applies the GT predicate on the "input_image_url" field.
func InputImageURLGT(v string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldGT(FieldInputImageURL, v))
}

// InputImageURLGTE applies the GTE predicate on the "input_image_url" field.
func InputImageURLGTE(v string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldGTE(FieldInputImageURL, v))
}

// InputImageURLLT applies the LT predicate on the "input_image_url" field.
func InputImageURLLT(v string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldLT(FieldInputImageURL, v))
}

// InputImageURLLTE applies the LTE predicate on the "input_image_url" field.
func InputImageURLLTE(v string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldLTE(FieldInputImageURL, v))
}

// InputImageURLContains applies the Contains predicate on the "input_image_url" field.
func InputImageURLContains(v string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldContains(FieldInputImageURL, v))
}

// InputImageURLHasPrefix applies the HasPrefix predicate on the "input_image_url" field.
func InputImageURLHasPrefix(v string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldHasPrefix(FieldInputImageURL, v))
}

// InputImageURLHasSuffix applies the HasSuffix predicate on the "input_image_url" field.
func InputImageURLHasSuffix(v string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldHasSuffix(FieldInputImageURL, v))
}

// InputImageURLIsNil applies the IsNil predicate on the "input_image_url" field.
func InputImageURLIsNil() predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldIsNull(FieldInputImageURL))
}

// InputImageURLNotNil applies the NotNil predicate on the "input_image_url" field.
func InputImageURLNotNil() predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldNotNull(FieldInputImageURL))
}

// InputImageURLEqualFold applies the EqualFold predicate on the "input_image_url" field.
func InputImageURLEqualFold(v string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldEqualFold(FieldInputImageURL, v))
}

// InputImageURLContainsFold applies the ContainsFold predicate on the "input_image_url" field.
func InputImageURLContainsFold(v string) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldContainsFold(FieldInputImageURL, v))
}

// UpscaleIDEQ applies the EQ predicate on the "upscale_id" field.
func UpscaleIDEQ(v uuid.UUID) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldEQ(FieldUpscaleID, v))
}

// UpscaleIDNEQ applies the NEQ predicate on the "upscale_id" field.
func UpscaleIDNEQ(v uuid.UUID) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldNEQ(FieldUpscaleID, v))
}

// UpscaleIDIn applies the In predicate on the "upscale_id" field.
func UpscaleIDIn(vs ...uuid.UUID) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldIn(FieldUpscaleID, vs...))
}

// UpscaleIDNotIn applies the NotIn predicate on the "upscale_id" field.
func UpscaleIDNotIn(vs ...uuid.UUID) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldNotIn(FieldUpscaleID, vs...))
}

// GenerationOutputIDEQ applies the EQ predicate on the "generation_output_id" field.
func GenerationOutputIDEQ(v uuid.UUID) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldEQ(FieldGenerationOutputID, v))
}

// GenerationOutputIDNEQ applies the NEQ predicate on the "generation_output_id" field.
func GenerationOutputIDNEQ(v uuid.UUID) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldNEQ(FieldGenerationOutputID, v))
}

// GenerationOutputIDIn applies the In predicate on the "generation_output_id" field.
func GenerationOutputIDIn(vs ...uuid.UUID) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldIn(FieldGenerationOutputID, vs...))
}

// GenerationOutputIDNotIn applies the NotIn predicate on the "generation_output_id" field.
func GenerationOutputIDNotIn(vs ...uuid.UUID) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldNotIn(FieldGenerationOutputID, vs...))
}

// GenerationOutputIDIsNil applies the IsNil predicate on the "generation_output_id" field.
func GenerationOutputIDIsNil() predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldIsNull(FieldGenerationOutputID))
}

// GenerationOutputIDNotNil applies the NotNil predicate on the "generation_output_id" field.
func GenerationOutputIDNotNil() predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldNotNull(FieldGenerationOutputID))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldNotNull(FieldDeletedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUpscales applies the HasEdge predicate on the "upscales" edge.
func HasUpscales() predicate.UpscaleOutput {
	return predicate.UpscaleOutput(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UpscalesTable, UpscalesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUpscalesWith applies the HasEdge predicate on the "upscales" edge with a given conditions (other predicates).
func HasUpscalesWith(preds ...predicate.Upscale) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(func(s *sql.Selector) {
		step := newUpscalesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGenerationOutput applies the HasEdge predicate on the "generation_output" edge.
func HasGenerationOutput() predicate.UpscaleOutput {
	return predicate.UpscaleOutput(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, GenerationOutputTable, GenerationOutputColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGenerationOutputWith applies the HasEdge predicate on the "generation_output" edge with a given conditions (other predicates).
func HasGenerationOutputWith(preds ...predicate.GenerationOutput) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(func(s *sql.Selector) {
		step := newGenerationOutputStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UpscaleOutput) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UpscaleOutput) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UpscaleOutput) predicate.UpscaleOutput {
	return predicate.UpscaleOutput(sql.NotPredicates(p))
}
