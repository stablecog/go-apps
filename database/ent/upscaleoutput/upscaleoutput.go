// Code generated by ent, DO NOT EDIT.

package upscaleoutput

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the upscaleoutput type in the database.
	Label = "upscale_output"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldImagePath holds the string denoting the image_path field in the database.
	FieldImagePath = "image_path"
	// FieldInputImageURL holds the string denoting the input_image_url field in the database.
	FieldInputImageURL = "input_image_url"
	// FieldUpscaleID holds the string denoting the upscale_id field in the database.
	FieldUpscaleID = "upscale_id"
	// FieldGenerationOutputID holds the string denoting the generation_output_id field in the database.
	FieldGenerationOutputID = "generation_output_id"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUpscales holds the string denoting the upscales edge name in mutations.
	EdgeUpscales = "upscales"
	// EdgeGenerationOutput holds the string denoting the generation_output edge name in mutations.
	EdgeGenerationOutput = "generation_output"
	// Table holds the table name of the upscaleoutput in the database.
	Table = "upscale_outputs"
	// UpscalesTable is the table that holds the upscales relation/edge.
	UpscalesTable = "upscale_outputs"
	// UpscalesInverseTable is the table name for the Upscale entity.
	// It exists in this package in order to avoid circular dependency with the "upscale" package.
	UpscalesInverseTable = "upscales"
	// UpscalesColumn is the table column denoting the upscales relation/edge.
	UpscalesColumn = "upscale_id"
	// GenerationOutputTable is the table that holds the generation_output relation/edge.
	GenerationOutputTable = "upscale_outputs"
	// GenerationOutputInverseTable is the table name for the GenerationOutput entity.
	// It exists in this package in order to avoid circular dependency with the "generationoutput" package.
	GenerationOutputInverseTable = "generation_outputs"
	// GenerationOutputColumn is the table column denoting the generation_output relation/edge.
	GenerationOutputColumn = "generation_output_id"
)

// Columns holds all SQL columns for upscaleoutput fields.
var Columns = []string{
	FieldID,
	FieldImagePath,
	FieldInputImageURL,
	FieldUpscaleID,
	FieldGenerationOutputID,
	FieldDeletedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the UpscaleOutput queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByImagePath orders the results by the image_path field.
func ByImagePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImagePath, opts...).ToFunc()
}

// ByInputImageURL orders the results by the input_image_url field.
func ByInputImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInputImageURL, opts...).ToFunc()
}

// ByUpscaleID orders the results by the upscale_id field.
func ByUpscaleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpscaleID, opts...).ToFunc()
}

// ByGenerationOutputID orders the results by the generation_output_id field.
func ByGenerationOutputID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGenerationOutputID, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUpscalesField orders the results by upscales field.
func ByUpscalesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUpscalesStep(), sql.OrderByField(field, opts...))
	}
}

// ByGenerationOutputField orders the results by generation_output field.
func ByGenerationOutputField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGenerationOutputStep(), sql.OrderByField(field, opts...))
	}
}
func newUpscalesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UpscalesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UpscalesTable, UpscalesColumn),
	)
}
func newGenerationOutputStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GenerationOutputInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, GenerationOutputTable, GenerationOutputColumn),
	)
}
