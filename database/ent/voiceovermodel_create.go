// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/voiceover"
	"github.com/stablecog/sc-go/database/ent/voiceovermodel"
	"github.com/stablecog/sc-go/database/ent/voiceoverspeaker"
)

// VoiceoverModelCreate is the builder for creating a VoiceoverModel entity.
type VoiceoverModelCreate struct {
	config
	mutation *VoiceoverModelMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNameInWorker sets the "name_in_worker" field.
func (vmc *VoiceoverModelCreate) SetNameInWorker(s string) *VoiceoverModelCreate {
	vmc.mutation.SetNameInWorker(s)
	return vmc
}

// SetIsActive sets the "is_active" field.
func (vmc *VoiceoverModelCreate) SetIsActive(b bool) *VoiceoverModelCreate {
	vmc.mutation.SetIsActive(b)
	return vmc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (vmc *VoiceoverModelCreate) SetNillableIsActive(b *bool) *VoiceoverModelCreate {
	if b != nil {
		vmc.SetIsActive(*b)
	}
	return vmc
}

// SetIsDefault sets the "is_default" field.
func (vmc *VoiceoverModelCreate) SetIsDefault(b bool) *VoiceoverModelCreate {
	vmc.mutation.SetIsDefault(b)
	return vmc
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (vmc *VoiceoverModelCreate) SetNillableIsDefault(b *bool) *VoiceoverModelCreate {
	if b != nil {
		vmc.SetIsDefault(*b)
	}
	return vmc
}

// SetIsHidden sets the "is_hidden" field.
func (vmc *VoiceoverModelCreate) SetIsHidden(b bool) *VoiceoverModelCreate {
	vmc.mutation.SetIsHidden(b)
	return vmc
}

// SetNillableIsHidden sets the "is_hidden" field if the given value is not nil.
func (vmc *VoiceoverModelCreate) SetNillableIsHidden(b *bool) *VoiceoverModelCreate {
	if b != nil {
		vmc.SetIsHidden(*b)
	}
	return vmc
}

// SetCreatedAt sets the "created_at" field.
func (vmc *VoiceoverModelCreate) SetCreatedAt(t time.Time) *VoiceoverModelCreate {
	vmc.mutation.SetCreatedAt(t)
	return vmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vmc *VoiceoverModelCreate) SetNillableCreatedAt(t *time.Time) *VoiceoverModelCreate {
	if t != nil {
		vmc.SetCreatedAt(*t)
	}
	return vmc
}

// SetUpdatedAt sets the "updated_at" field.
func (vmc *VoiceoverModelCreate) SetUpdatedAt(t time.Time) *VoiceoverModelCreate {
	vmc.mutation.SetUpdatedAt(t)
	return vmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vmc *VoiceoverModelCreate) SetNillableUpdatedAt(t *time.Time) *VoiceoverModelCreate {
	if t != nil {
		vmc.SetUpdatedAt(*t)
	}
	return vmc
}

// SetID sets the "id" field.
func (vmc *VoiceoverModelCreate) SetID(u uuid.UUID) *VoiceoverModelCreate {
	vmc.mutation.SetID(u)
	return vmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vmc *VoiceoverModelCreate) SetNillableID(u *uuid.UUID) *VoiceoverModelCreate {
	if u != nil {
		vmc.SetID(*u)
	}
	return vmc
}

// AddVoiceoverIDs adds the "voiceovers" edge to the Voiceover entity by IDs.
func (vmc *VoiceoverModelCreate) AddVoiceoverIDs(ids ...uuid.UUID) *VoiceoverModelCreate {
	vmc.mutation.AddVoiceoverIDs(ids...)
	return vmc
}

// AddVoiceovers adds the "voiceovers" edges to the Voiceover entity.
func (vmc *VoiceoverModelCreate) AddVoiceovers(v ...*Voiceover) *VoiceoverModelCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vmc.AddVoiceoverIDs(ids...)
}

// AddVoiceoverSpeakerIDs adds the "voiceover_speakers" edge to the VoiceoverSpeaker entity by IDs.
func (vmc *VoiceoverModelCreate) AddVoiceoverSpeakerIDs(ids ...uuid.UUID) *VoiceoverModelCreate {
	vmc.mutation.AddVoiceoverSpeakerIDs(ids...)
	return vmc
}

// AddVoiceoverSpeakers adds the "voiceover_speakers" edges to the VoiceoverSpeaker entity.
func (vmc *VoiceoverModelCreate) AddVoiceoverSpeakers(v ...*VoiceoverSpeaker) *VoiceoverModelCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vmc.AddVoiceoverSpeakerIDs(ids...)
}

// Mutation returns the VoiceoverModelMutation object of the builder.
func (vmc *VoiceoverModelCreate) Mutation() *VoiceoverModelMutation {
	return vmc.mutation
}

// Save creates the VoiceoverModel in the database.
func (vmc *VoiceoverModelCreate) Save(ctx context.Context) (*VoiceoverModel, error) {
	vmc.defaults()
	return withHooks(ctx, vmc.sqlSave, vmc.mutation, vmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vmc *VoiceoverModelCreate) SaveX(ctx context.Context) *VoiceoverModel {
	v, err := vmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vmc *VoiceoverModelCreate) Exec(ctx context.Context) error {
	_, err := vmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmc *VoiceoverModelCreate) ExecX(ctx context.Context) {
	if err := vmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vmc *VoiceoverModelCreate) defaults() {
	if _, ok := vmc.mutation.IsActive(); !ok {
		v := voiceovermodel.DefaultIsActive
		vmc.mutation.SetIsActive(v)
	}
	if _, ok := vmc.mutation.IsDefault(); !ok {
		v := voiceovermodel.DefaultIsDefault
		vmc.mutation.SetIsDefault(v)
	}
	if _, ok := vmc.mutation.IsHidden(); !ok {
		v := voiceovermodel.DefaultIsHidden
		vmc.mutation.SetIsHidden(v)
	}
	if _, ok := vmc.mutation.CreatedAt(); !ok {
		v := voiceovermodel.DefaultCreatedAt()
		vmc.mutation.SetCreatedAt(v)
	}
	if _, ok := vmc.mutation.UpdatedAt(); !ok {
		v := voiceovermodel.DefaultUpdatedAt()
		vmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vmc.mutation.ID(); !ok {
		v := voiceovermodel.DefaultID()
		vmc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vmc *VoiceoverModelCreate) check() error {
	if _, ok := vmc.mutation.NameInWorker(); !ok {
		return &ValidationError{Name: "name_in_worker", err: errors.New(`ent: missing required field "VoiceoverModel.name_in_worker"`)}
	}
	if _, ok := vmc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "VoiceoverModel.is_active"`)}
	}
	if _, ok := vmc.mutation.IsDefault(); !ok {
		return &ValidationError{Name: "is_default", err: errors.New(`ent: missing required field "VoiceoverModel.is_default"`)}
	}
	if _, ok := vmc.mutation.IsHidden(); !ok {
		return &ValidationError{Name: "is_hidden", err: errors.New(`ent: missing required field "VoiceoverModel.is_hidden"`)}
	}
	if _, ok := vmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "VoiceoverModel.created_at"`)}
	}
	if _, ok := vmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "VoiceoverModel.updated_at"`)}
	}
	return nil
}

func (vmc *VoiceoverModelCreate) sqlSave(ctx context.Context) (*VoiceoverModel, error) {
	if err := vmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	vmc.mutation.id = &_node.ID
	vmc.mutation.done = true
	return _node, nil
}

func (vmc *VoiceoverModelCreate) createSpec() (*VoiceoverModel, *sqlgraph.CreateSpec) {
	var (
		_node = &VoiceoverModel{config: vmc.config}
		_spec = sqlgraph.NewCreateSpec(voiceovermodel.Table, sqlgraph.NewFieldSpec(voiceovermodel.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = vmc.conflict
	if id, ok := vmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := vmc.mutation.NameInWorker(); ok {
		_spec.SetField(voiceovermodel.FieldNameInWorker, field.TypeString, value)
		_node.NameInWorker = value
	}
	if value, ok := vmc.mutation.IsActive(); ok {
		_spec.SetField(voiceovermodel.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := vmc.mutation.IsDefault(); ok {
		_spec.SetField(voiceovermodel.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = value
	}
	if value, ok := vmc.mutation.IsHidden(); ok {
		_spec.SetField(voiceovermodel.FieldIsHidden, field.TypeBool, value)
		_node.IsHidden = value
	}
	if value, ok := vmc.mutation.CreatedAt(); ok {
		_spec.SetField(voiceovermodel.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vmc.mutation.UpdatedAt(); ok {
		_spec.SetField(voiceovermodel.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := vmc.mutation.VoiceoversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voiceovermodel.VoiceoversTable,
			Columns: []string{voiceovermodel.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vmc.mutation.VoiceoverSpeakersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voiceovermodel.VoiceoverSpeakersTable,
			Columns: []string{voiceovermodel.VoiceoverSpeakersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceoverspeaker.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VoiceoverModel.Create().
//		SetNameInWorker(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VoiceoverModelUpsert) {
//			SetNameInWorker(v+v).
//		}).
//		Exec(ctx)
func (vmc *VoiceoverModelCreate) OnConflict(opts ...sql.ConflictOption) *VoiceoverModelUpsertOne {
	vmc.conflict = opts
	return &VoiceoverModelUpsertOne{
		create: vmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VoiceoverModel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vmc *VoiceoverModelCreate) OnConflictColumns(columns ...string) *VoiceoverModelUpsertOne {
	vmc.conflict = append(vmc.conflict, sql.ConflictColumns(columns...))
	return &VoiceoverModelUpsertOne{
		create: vmc,
	}
}

type (
	// VoiceoverModelUpsertOne is the builder for "upsert"-ing
	//  one VoiceoverModel node.
	VoiceoverModelUpsertOne struct {
		create *VoiceoverModelCreate
	}

	// VoiceoverModelUpsert is the "OnConflict" setter.
	VoiceoverModelUpsert struct {
		*sql.UpdateSet
	}
)

// SetNameInWorker sets the "name_in_worker" field.
func (u *VoiceoverModelUpsert) SetNameInWorker(v string) *VoiceoverModelUpsert {
	u.Set(voiceovermodel.FieldNameInWorker, v)
	return u
}

// UpdateNameInWorker sets the "name_in_worker" field to the value that was provided on create.
func (u *VoiceoverModelUpsert) UpdateNameInWorker() *VoiceoverModelUpsert {
	u.SetExcluded(voiceovermodel.FieldNameInWorker)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *VoiceoverModelUpsert) SetIsActive(v bool) *VoiceoverModelUpsert {
	u.Set(voiceovermodel.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *VoiceoverModelUpsert) UpdateIsActive() *VoiceoverModelUpsert {
	u.SetExcluded(voiceovermodel.FieldIsActive)
	return u
}

// SetIsDefault sets the "is_default" field.
func (u *VoiceoverModelUpsert) SetIsDefault(v bool) *VoiceoverModelUpsert {
	u.Set(voiceovermodel.FieldIsDefault, v)
	return u
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *VoiceoverModelUpsert) UpdateIsDefault() *VoiceoverModelUpsert {
	u.SetExcluded(voiceovermodel.FieldIsDefault)
	return u
}

// SetIsHidden sets the "is_hidden" field.
func (u *VoiceoverModelUpsert) SetIsHidden(v bool) *VoiceoverModelUpsert {
	u.Set(voiceovermodel.FieldIsHidden, v)
	return u
}

// UpdateIsHidden sets the "is_hidden" field to the value that was provided on create.
func (u *VoiceoverModelUpsert) UpdateIsHidden() *VoiceoverModelUpsert {
	u.SetExcluded(voiceovermodel.FieldIsHidden)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VoiceoverModelUpsert) SetUpdatedAt(v time.Time) *VoiceoverModelUpsert {
	u.Set(voiceovermodel.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VoiceoverModelUpsert) UpdateUpdatedAt() *VoiceoverModelUpsert {
	u.SetExcluded(voiceovermodel.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.VoiceoverModel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(voiceovermodel.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *VoiceoverModelUpsertOne) UpdateNewValues() *VoiceoverModelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(voiceovermodel.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(voiceovermodel.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VoiceoverModel.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VoiceoverModelUpsertOne) Ignore() *VoiceoverModelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VoiceoverModelUpsertOne) DoNothing() *VoiceoverModelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VoiceoverModelCreate.OnConflict
// documentation for more info.
func (u *VoiceoverModelUpsertOne) Update(set func(*VoiceoverModelUpsert)) *VoiceoverModelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VoiceoverModelUpsert{UpdateSet: update})
	}))
	return u
}

// SetNameInWorker sets the "name_in_worker" field.
func (u *VoiceoverModelUpsertOne) SetNameInWorker(v string) *VoiceoverModelUpsertOne {
	return u.Update(func(s *VoiceoverModelUpsert) {
		s.SetNameInWorker(v)
	})
}

// UpdateNameInWorker sets the "name_in_worker" field to the value that was provided on create.
func (u *VoiceoverModelUpsertOne) UpdateNameInWorker() *VoiceoverModelUpsertOne {
	return u.Update(func(s *VoiceoverModelUpsert) {
		s.UpdateNameInWorker()
	})
}

// SetIsActive sets the "is_active" field.
func (u *VoiceoverModelUpsertOne) SetIsActive(v bool) *VoiceoverModelUpsertOne {
	return u.Update(func(s *VoiceoverModelUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *VoiceoverModelUpsertOne) UpdateIsActive() *VoiceoverModelUpsertOne {
	return u.Update(func(s *VoiceoverModelUpsert) {
		s.UpdateIsActive()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *VoiceoverModelUpsertOne) SetIsDefault(v bool) *VoiceoverModelUpsertOne {
	return u.Update(func(s *VoiceoverModelUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *VoiceoverModelUpsertOne) UpdateIsDefault() *VoiceoverModelUpsertOne {
	return u.Update(func(s *VoiceoverModelUpsert) {
		s.UpdateIsDefault()
	})
}

// SetIsHidden sets the "is_hidden" field.
func (u *VoiceoverModelUpsertOne) SetIsHidden(v bool) *VoiceoverModelUpsertOne {
	return u.Update(func(s *VoiceoverModelUpsert) {
		s.SetIsHidden(v)
	})
}

// UpdateIsHidden sets the "is_hidden" field to the value that was provided on create.
func (u *VoiceoverModelUpsertOne) UpdateIsHidden() *VoiceoverModelUpsertOne {
	return u.Update(func(s *VoiceoverModelUpsert) {
		s.UpdateIsHidden()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VoiceoverModelUpsertOne) SetUpdatedAt(v time.Time) *VoiceoverModelUpsertOne {
	return u.Update(func(s *VoiceoverModelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VoiceoverModelUpsertOne) UpdateUpdatedAt() *VoiceoverModelUpsertOne {
	return u.Update(func(s *VoiceoverModelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *VoiceoverModelUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VoiceoverModelCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VoiceoverModelUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VoiceoverModelUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: VoiceoverModelUpsertOne.ID is not supported by MySQL driver. Use VoiceoverModelUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VoiceoverModelUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VoiceoverModelCreateBulk is the builder for creating many VoiceoverModel entities in bulk.
type VoiceoverModelCreateBulk struct {
	config
	err      error
	builders []*VoiceoverModelCreate
	conflict []sql.ConflictOption
}

// Save creates the VoiceoverModel entities in the database.
func (vmcb *VoiceoverModelCreateBulk) Save(ctx context.Context) ([]*VoiceoverModel, error) {
	if vmcb.err != nil {
		return nil, vmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vmcb.builders))
	nodes := make([]*VoiceoverModel, len(vmcb.builders))
	mutators := make([]Mutator, len(vmcb.builders))
	for i := range vmcb.builders {
		func(i int, root context.Context) {
			builder := vmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VoiceoverModelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vmcb *VoiceoverModelCreateBulk) SaveX(ctx context.Context) []*VoiceoverModel {
	v, err := vmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vmcb *VoiceoverModelCreateBulk) Exec(ctx context.Context) error {
	_, err := vmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmcb *VoiceoverModelCreateBulk) ExecX(ctx context.Context) {
	if err := vmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VoiceoverModel.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VoiceoverModelUpsert) {
//			SetNameInWorker(v+v).
//		}).
//		Exec(ctx)
func (vmcb *VoiceoverModelCreateBulk) OnConflict(opts ...sql.ConflictOption) *VoiceoverModelUpsertBulk {
	vmcb.conflict = opts
	return &VoiceoverModelUpsertBulk{
		create: vmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VoiceoverModel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vmcb *VoiceoverModelCreateBulk) OnConflictColumns(columns ...string) *VoiceoverModelUpsertBulk {
	vmcb.conflict = append(vmcb.conflict, sql.ConflictColumns(columns...))
	return &VoiceoverModelUpsertBulk{
		create: vmcb,
	}
}

// VoiceoverModelUpsertBulk is the builder for "upsert"-ing
// a bulk of VoiceoverModel nodes.
type VoiceoverModelUpsertBulk struct {
	create *VoiceoverModelCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.VoiceoverModel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(voiceovermodel.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *VoiceoverModelUpsertBulk) UpdateNewValues() *VoiceoverModelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(voiceovermodel.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(voiceovermodel.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VoiceoverModel.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VoiceoverModelUpsertBulk) Ignore() *VoiceoverModelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VoiceoverModelUpsertBulk) DoNothing() *VoiceoverModelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VoiceoverModelCreateBulk.OnConflict
// documentation for more info.
func (u *VoiceoverModelUpsertBulk) Update(set func(*VoiceoverModelUpsert)) *VoiceoverModelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VoiceoverModelUpsert{UpdateSet: update})
	}))
	return u
}

// SetNameInWorker sets the "name_in_worker" field.
func (u *VoiceoverModelUpsertBulk) SetNameInWorker(v string) *VoiceoverModelUpsertBulk {
	return u.Update(func(s *VoiceoverModelUpsert) {
		s.SetNameInWorker(v)
	})
}

// UpdateNameInWorker sets the "name_in_worker" field to the value that was provided on create.
func (u *VoiceoverModelUpsertBulk) UpdateNameInWorker() *VoiceoverModelUpsertBulk {
	return u.Update(func(s *VoiceoverModelUpsert) {
		s.UpdateNameInWorker()
	})
}

// SetIsActive sets the "is_active" field.
func (u *VoiceoverModelUpsertBulk) SetIsActive(v bool) *VoiceoverModelUpsertBulk {
	return u.Update(func(s *VoiceoverModelUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *VoiceoverModelUpsertBulk) UpdateIsActive() *VoiceoverModelUpsertBulk {
	return u.Update(func(s *VoiceoverModelUpsert) {
		s.UpdateIsActive()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *VoiceoverModelUpsertBulk) SetIsDefault(v bool) *VoiceoverModelUpsertBulk {
	return u.Update(func(s *VoiceoverModelUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *VoiceoverModelUpsertBulk) UpdateIsDefault() *VoiceoverModelUpsertBulk {
	return u.Update(func(s *VoiceoverModelUpsert) {
		s.UpdateIsDefault()
	})
}

// SetIsHidden sets the "is_hidden" field.
func (u *VoiceoverModelUpsertBulk) SetIsHidden(v bool) *VoiceoverModelUpsertBulk {
	return u.Update(func(s *VoiceoverModelUpsert) {
		s.SetIsHidden(v)
	})
}

// UpdateIsHidden sets the "is_hidden" field to the value that was provided on create.
func (u *VoiceoverModelUpsertBulk) UpdateIsHidden() *VoiceoverModelUpsertBulk {
	return u.Update(func(s *VoiceoverModelUpsert) {
		s.UpdateIsHidden()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VoiceoverModelUpsertBulk) SetUpdatedAt(v time.Time) *VoiceoverModelUpsertBulk {
	return u.Update(func(s *VoiceoverModelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VoiceoverModelUpsertBulk) UpdateUpdatedAt() *VoiceoverModelUpsertBulk {
	return u.Update(func(s *VoiceoverModelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *VoiceoverModelUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VoiceoverModelCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VoiceoverModelCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VoiceoverModelUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
