// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/apitoken"
	"github.com/stablecog/sc-go/database/ent/deviceinfo"
	"github.com/stablecog/sc-go/database/ent/upscale"
	"github.com/stablecog/sc-go/database/ent/upscalemodel"
	"github.com/stablecog/sc-go/database/ent/upscaleoutput"
	"github.com/stablecog/sc-go/database/ent/user"
	"github.com/stablecog/sc-go/database/enttypes"
)

// UpscaleCreate is the builder for creating a Upscale entity.
type UpscaleCreate struct {
	config
	mutation *UpscaleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetWidth sets the "width" field.
func (uc *UpscaleCreate) SetWidth(i int32) *UpscaleCreate {
	uc.mutation.SetWidth(i)
	return uc
}

// SetHeight sets the "height" field.
func (uc *UpscaleCreate) SetHeight(i int32) *UpscaleCreate {
	uc.mutation.SetHeight(i)
	return uc
}

// SetScale sets the "scale" field.
func (uc *UpscaleCreate) SetScale(i int32) *UpscaleCreate {
	uc.mutation.SetScale(i)
	return uc
}

// SetCountryCode sets the "country_code" field.
func (uc *UpscaleCreate) SetCountryCode(s string) *UpscaleCreate {
	uc.mutation.SetCountryCode(s)
	return uc
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (uc *UpscaleCreate) SetNillableCountryCode(s *string) *UpscaleCreate {
	if s != nil {
		uc.SetCountryCode(*s)
	}
	return uc
}

// SetStatus sets the "status" field.
func (uc *UpscaleCreate) SetStatus(u upscale.Status) *UpscaleCreate {
	uc.mutation.SetStatus(u)
	return uc
}

// SetFailureReason sets the "failure_reason" field.
func (uc *UpscaleCreate) SetFailureReason(s string) *UpscaleCreate {
	uc.mutation.SetFailureReason(s)
	return uc
}

// SetNillableFailureReason sets the "failure_reason" field if the given value is not nil.
func (uc *UpscaleCreate) SetNillableFailureReason(s *string) *UpscaleCreate {
	if s != nil {
		uc.SetFailureReason(*s)
	}
	return uc
}

// SetStripeProductID sets the "stripe_product_id" field.
func (uc *UpscaleCreate) SetStripeProductID(s string) *UpscaleCreate {
	uc.mutation.SetStripeProductID(s)
	return uc
}

// SetNillableStripeProductID sets the "stripe_product_id" field if the given value is not nil.
func (uc *UpscaleCreate) SetNillableStripeProductID(s *string) *UpscaleCreate {
	if s != nil {
		uc.SetStripeProductID(*s)
	}
	return uc
}

// SetSystemGenerated sets the "system_generated" field.
func (uc *UpscaleCreate) SetSystemGenerated(b bool) *UpscaleCreate {
	uc.mutation.SetSystemGenerated(b)
	return uc
}

// SetNillableSystemGenerated sets the "system_generated" field if the given value is not nil.
func (uc *UpscaleCreate) SetNillableSystemGenerated(b *bool) *UpscaleCreate {
	if b != nil {
		uc.SetSystemGenerated(*b)
	}
	return uc
}

// SetSourceType sets the "source_type" field.
func (uc *UpscaleCreate) SetSourceType(et enttypes.SourceType) *UpscaleCreate {
	uc.mutation.SetSourceType(et)
	return uc
}

// SetNillableSourceType sets the "source_type" field if the given value is not nil.
func (uc *UpscaleCreate) SetNillableSourceType(et *enttypes.SourceType) *UpscaleCreate {
	if et != nil {
		uc.SetSourceType(*et)
	}
	return uc
}

// SetWebhookToken sets the "webhook_token" field.
func (uc *UpscaleCreate) SetWebhookToken(u uuid.UUID) *UpscaleCreate {
	uc.mutation.SetWebhookToken(u)
	return uc
}

// SetNillableWebhookToken sets the "webhook_token" field if the given value is not nil.
func (uc *UpscaleCreate) SetNillableWebhookToken(u *uuid.UUID) *UpscaleCreate {
	if u != nil {
		uc.SetWebhookToken(*u)
	}
	return uc
}

// SetUserID sets the "user_id" field.
func (uc *UpscaleCreate) SetUserID(u uuid.UUID) *UpscaleCreate {
	uc.mutation.SetUserID(u)
	return uc
}

// SetDeviceInfoID sets the "device_info_id" field.
func (uc *UpscaleCreate) SetDeviceInfoID(u uuid.UUID) *UpscaleCreate {
	uc.mutation.SetDeviceInfoID(u)
	return uc
}

// SetModelID sets the "model_id" field.
func (uc *UpscaleCreate) SetModelID(u uuid.UUID) *UpscaleCreate {
	uc.mutation.SetModelID(u)
	return uc
}

// SetAPITokenID sets the "api_token_id" field.
func (uc *UpscaleCreate) SetAPITokenID(u uuid.UUID) *UpscaleCreate {
	uc.mutation.SetAPITokenID(u)
	return uc
}

// SetNillableAPITokenID sets the "api_token_id" field if the given value is not nil.
func (uc *UpscaleCreate) SetNillableAPITokenID(u *uuid.UUID) *UpscaleCreate {
	if u != nil {
		uc.SetAPITokenID(*u)
	}
	return uc
}

// SetStartedAt sets the "started_at" field.
func (uc *UpscaleCreate) SetStartedAt(t time.Time) *UpscaleCreate {
	uc.mutation.SetStartedAt(t)
	return uc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (uc *UpscaleCreate) SetNillableStartedAt(t *time.Time) *UpscaleCreate {
	if t != nil {
		uc.SetStartedAt(*t)
	}
	return uc
}

// SetCompletedAt sets the "completed_at" field.
func (uc *UpscaleCreate) SetCompletedAt(t time.Time) *UpscaleCreate {
	uc.mutation.SetCompletedAt(t)
	return uc
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (uc *UpscaleCreate) SetNillableCompletedAt(t *time.Time) *UpscaleCreate {
	if t != nil {
		uc.SetCompletedAt(*t)
	}
	return uc
}

// SetCreatedAt sets the "created_at" field.
func (uc *UpscaleCreate) SetCreatedAt(t time.Time) *UpscaleCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UpscaleCreate) SetNillableCreatedAt(t *time.Time) *UpscaleCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UpscaleCreate) SetUpdatedAt(t time.Time) *UpscaleCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UpscaleCreate) SetNillableUpdatedAt(t *time.Time) *UpscaleCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UpscaleCreate) SetID(u uuid.UUID) *UpscaleCreate {
	uc.mutation.SetID(u)
	return uc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uc *UpscaleCreate) SetNillableID(u *uuid.UUID) *UpscaleCreate {
	if u != nil {
		uc.SetID(*u)
	}
	return uc
}

// SetUser sets the "user" edge to the User entity.
func (uc *UpscaleCreate) SetUser(u *User) *UpscaleCreate {
	return uc.SetUserID(u.ID)
}

// SetDeviceInfo sets the "device_info" edge to the DeviceInfo entity.
func (uc *UpscaleCreate) SetDeviceInfo(d *DeviceInfo) *UpscaleCreate {
	return uc.SetDeviceInfoID(d.ID)
}

// SetUpscaleModelsID sets the "upscale_models" edge to the UpscaleModel entity by ID.
func (uc *UpscaleCreate) SetUpscaleModelsID(id uuid.UUID) *UpscaleCreate {
	uc.mutation.SetUpscaleModelsID(id)
	return uc
}

// SetUpscaleModels sets the "upscale_models" edge to the UpscaleModel entity.
func (uc *UpscaleCreate) SetUpscaleModels(u *UpscaleModel) *UpscaleCreate {
	return uc.SetUpscaleModelsID(u.ID)
}

// SetAPITokensID sets the "api_tokens" edge to the ApiToken entity by ID.
func (uc *UpscaleCreate) SetAPITokensID(id uuid.UUID) *UpscaleCreate {
	uc.mutation.SetAPITokensID(id)
	return uc
}

// SetNillableAPITokensID sets the "api_tokens" edge to the ApiToken entity by ID if the given value is not nil.
func (uc *UpscaleCreate) SetNillableAPITokensID(id *uuid.UUID) *UpscaleCreate {
	if id != nil {
		uc = uc.SetAPITokensID(*id)
	}
	return uc
}

// SetAPITokens sets the "api_tokens" edge to the ApiToken entity.
func (uc *UpscaleCreate) SetAPITokens(a *ApiToken) *UpscaleCreate {
	return uc.SetAPITokensID(a.ID)
}

// AddUpscaleOutputIDs adds the "upscale_outputs" edge to the UpscaleOutput entity by IDs.
func (uc *UpscaleCreate) AddUpscaleOutputIDs(ids ...uuid.UUID) *UpscaleCreate {
	uc.mutation.AddUpscaleOutputIDs(ids...)
	return uc
}

// AddUpscaleOutputs adds the "upscale_outputs" edges to the UpscaleOutput entity.
func (uc *UpscaleCreate) AddUpscaleOutputs(u ...*UpscaleOutput) *UpscaleCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddUpscaleOutputIDs(ids...)
}

// Mutation returns the UpscaleMutation object of the builder.
func (uc *UpscaleCreate) Mutation() *UpscaleMutation {
	return uc.mutation
}

// Save creates the Upscale in the database.
func (uc *UpscaleCreate) Save(ctx context.Context) (*Upscale, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UpscaleCreate) SaveX(ctx context.Context) *Upscale {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UpscaleCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UpscaleCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UpscaleCreate) defaults() {
	if _, ok := uc.mutation.SystemGenerated(); !ok {
		v := upscale.DefaultSystemGenerated
		uc.mutation.SetSystemGenerated(v)
	}
	if _, ok := uc.mutation.SourceType(); !ok {
		v := upscale.DefaultSourceType
		uc.mutation.SetSourceType(v)
	}
	if _, ok := uc.mutation.WebhookToken(); !ok {
		v := upscale.DefaultWebhookToken()
		uc.mutation.SetWebhookToken(v)
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := upscale.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := upscale.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uc.mutation.ID(); !ok {
		v := upscale.DefaultID()
		uc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UpscaleCreate) check() error {
	if _, ok := uc.mutation.Width(); !ok {
		return &ValidationError{Name: "width", err: errors.New(`ent: missing required field "Upscale.width"`)}
	}
	if _, ok := uc.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`ent: missing required field "Upscale.height"`)}
	}
	if _, ok := uc.mutation.Scale(); !ok {
		return &ValidationError{Name: "scale", err: errors.New(`ent: missing required field "Upscale.scale"`)}
	}
	if _, ok := uc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Upscale.status"`)}
	}
	if v, ok := uc.mutation.Status(); ok {
		if err := upscale.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Upscale.status": %w`, err)}
		}
	}
	if _, ok := uc.mutation.SystemGenerated(); !ok {
		return &ValidationError{Name: "system_generated", err: errors.New(`ent: missing required field "Upscale.system_generated"`)}
	}
	if _, ok := uc.mutation.SourceType(); !ok {
		return &ValidationError{Name: "source_type", err: errors.New(`ent: missing required field "Upscale.source_type"`)}
	}
	if v, ok := uc.mutation.SourceType(); ok {
		if err := upscale.SourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "source_type", err: fmt.Errorf(`ent: validator failed for field "Upscale.source_type": %w`, err)}
		}
	}
	if _, ok := uc.mutation.WebhookToken(); !ok {
		return &ValidationError{Name: "webhook_token", err: errors.New(`ent: missing required field "Upscale.webhook_token"`)}
	}
	if _, ok := uc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Upscale.user_id"`)}
	}
	if _, ok := uc.mutation.DeviceInfoID(); !ok {
		return &ValidationError{Name: "device_info_id", err: errors.New(`ent: missing required field "Upscale.device_info_id"`)}
	}
	if _, ok := uc.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model_id", err: errors.New(`ent: missing required field "Upscale.model_id"`)}
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Upscale.created_at"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Upscale.updated_at"`)}
	}
	if len(uc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Upscale.user"`)}
	}
	if len(uc.mutation.DeviceInfoIDs()) == 0 {
		return &ValidationError{Name: "device_info", err: errors.New(`ent: missing required edge "Upscale.device_info"`)}
	}
	if len(uc.mutation.UpscaleModelsIDs()) == 0 {
		return &ValidationError{Name: "upscale_models", err: errors.New(`ent: missing required edge "Upscale.upscale_models"`)}
	}
	return nil
}

func (uc *UpscaleCreate) sqlSave(ctx context.Context) (*Upscale, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UpscaleCreate) createSpec() (*Upscale, *sqlgraph.CreateSpec) {
	var (
		_node = &Upscale{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(upscale.Table, sqlgraph.NewFieldSpec(upscale.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = uc.conflict
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uc.mutation.Width(); ok {
		_spec.SetField(upscale.FieldWidth, field.TypeInt32, value)
		_node.Width = value
	}
	if value, ok := uc.mutation.Height(); ok {
		_spec.SetField(upscale.FieldHeight, field.TypeInt32, value)
		_node.Height = value
	}
	if value, ok := uc.mutation.Scale(); ok {
		_spec.SetField(upscale.FieldScale, field.TypeInt32, value)
		_node.Scale = value
	}
	if value, ok := uc.mutation.CountryCode(); ok {
		_spec.SetField(upscale.FieldCountryCode, field.TypeString, value)
		_node.CountryCode = &value
	}
	if value, ok := uc.mutation.Status(); ok {
		_spec.SetField(upscale.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := uc.mutation.FailureReason(); ok {
		_spec.SetField(upscale.FieldFailureReason, field.TypeString, value)
		_node.FailureReason = &value
	}
	if value, ok := uc.mutation.StripeProductID(); ok {
		_spec.SetField(upscale.FieldStripeProductID, field.TypeString, value)
		_node.StripeProductID = &value
	}
	if value, ok := uc.mutation.SystemGenerated(); ok {
		_spec.SetField(upscale.FieldSystemGenerated, field.TypeBool, value)
		_node.SystemGenerated = value
	}
	if value, ok := uc.mutation.SourceType(); ok {
		_spec.SetField(upscale.FieldSourceType, field.TypeEnum, value)
		_node.SourceType = value
	}
	if value, ok := uc.mutation.WebhookToken(); ok {
		_spec.SetField(upscale.FieldWebhookToken, field.TypeUUID, value)
		_node.WebhookToken = value
	}
	if value, ok := uc.mutation.StartedAt(); ok {
		_spec.SetField(upscale.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = &value
	}
	if value, ok := uc.mutation.CompletedAt(); ok {
		_spec.SetField(upscale.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = &value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(upscale.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(upscale.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := uc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   upscale.UserTable,
			Columns: []string{upscale.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.DeviceInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   upscale.DeviceInfoTable,
			Columns: []string{upscale.DeviceInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinfo.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeviceInfoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UpscaleModelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   upscale.UpscaleModelsTable,
			Columns: []string{upscale.UpscaleModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upscalemodel.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ModelID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.APITokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   upscale.APITokensTable,
			Columns: []string{upscale.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.APITokenID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UpscaleOutputsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   upscale.UpscaleOutputsTable,
			Columns: []string{upscale.UpscaleOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upscaleoutput.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Upscale.Create().
//		SetWidth(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UpscaleUpsert) {
//			SetWidth(v+v).
//		}).
//		Exec(ctx)
func (uc *UpscaleCreate) OnConflict(opts ...sql.ConflictOption) *UpscaleUpsertOne {
	uc.conflict = opts
	return &UpscaleUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Upscale.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UpscaleCreate) OnConflictColumns(columns ...string) *UpscaleUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UpscaleUpsertOne{
		create: uc,
	}
}

type (
	// UpscaleUpsertOne is the builder for "upsert"-ing
	//  one Upscale node.
	UpscaleUpsertOne struct {
		create *UpscaleCreate
	}

	// UpscaleUpsert is the "OnConflict" setter.
	UpscaleUpsert struct {
		*sql.UpdateSet
	}
)

// SetWidth sets the "width" field.
func (u *UpscaleUpsert) SetWidth(v int32) *UpscaleUpsert {
	u.Set(upscale.FieldWidth, v)
	return u
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *UpscaleUpsert) UpdateWidth() *UpscaleUpsert {
	u.SetExcluded(upscale.FieldWidth)
	return u
}

// AddWidth adds v to the "width" field.
func (u *UpscaleUpsert) AddWidth(v int32) *UpscaleUpsert {
	u.Add(upscale.FieldWidth, v)
	return u
}

// SetHeight sets the "height" field.
func (u *UpscaleUpsert) SetHeight(v int32) *UpscaleUpsert {
	u.Set(upscale.FieldHeight, v)
	return u
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *UpscaleUpsert) UpdateHeight() *UpscaleUpsert {
	u.SetExcluded(upscale.FieldHeight)
	return u
}

// AddHeight adds v to the "height" field.
func (u *UpscaleUpsert) AddHeight(v int32) *UpscaleUpsert {
	u.Add(upscale.FieldHeight, v)
	return u
}

// SetScale sets the "scale" field.
func (u *UpscaleUpsert) SetScale(v int32) *UpscaleUpsert {
	u.Set(upscale.FieldScale, v)
	return u
}

// UpdateScale sets the "scale" field to the value that was provided on create.
func (u *UpscaleUpsert) UpdateScale() *UpscaleUpsert {
	u.SetExcluded(upscale.FieldScale)
	return u
}

// AddScale adds v to the "scale" field.
func (u *UpscaleUpsert) AddScale(v int32) *UpscaleUpsert {
	u.Add(upscale.FieldScale, v)
	return u
}

// SetCountryCode sets the "country_code" field.
func (u *UpscaleUpsert) SetCountryCode(v string) *UpscaleUpsert {
	u.Set(upscale.FieldCountryCode, v)
	return u
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *UpscaleUpsert) UpdateCountryCode() *UpscaleUpsert {
	u.SetExcluded(upscale.FieldCountryCode)
	return u
}

// ClearCountryCode clears the value of the "country_code" field.
func (u *UpscaleUpsert) ClearCountryCode() *UpscaleUpsert {
	u.SetNull(upscale.FieldCountryCode)
	return u
}

// SetStatus sets the "status" field.
func (u *UpscaleUpsert) SetStatus(v upscale.Status) *UpscaleUpsert {
	u.Set(upscale.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UpscaleUpsert) UpdateStatus() *UpscaleUpsert {
	u.SetExcluded(upscale.FieldStatus)
	return u
}

// SetFailureReason sets the "failure_reason" field.
func (u *UpscaleUpsert) SetFailureReason(v string) *UpscaleUpsert {
	u.Set(upscale.FieldFailureReason, v)
	return u
}

// UpdateFailureReason sets the "failure_reason" field to the value that was provided on create.
func (u *UpscaleUpsert) UpdateFailureReason() *UpscaleUpsert {
	u.SetExcluded(upscale.FieldFailureReason)
	return u
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (u *UpscaleUpsert) ClearFailureReason() *UpscaleUpsert {
	u.SetNull(upscale.FieldFailureReason)
	return u
}

// SetStripeProductID sets the "stripe_product_id" field.
func (u *UpscaleUpsert) SetStripeProductID(v string) *UpscaleUpsert {
	u.Set(upscale.FieldStripeProductID, v)
	return u
}

// UpdateStripeProductID sets the "stripe_product_id" field to the value that was provided on create.
func (u *UpscaleUpsert) UpdateStripeProductID() *UpscaleUpsert {
	u.SetExcluded(upscale.FieldStripeProductID)
	return u
}

// ClearStripeProductID clears the value of the "stripe_product_id" field.
func (u *UpscaleUpsert) ClearStripeProductID() *UpscaleUpsert {
	u.SetNull(upscale.FieldStripeProductID)
	return u
}

// SetSystemGenerated sets the "system_generated" field.
func (u *UpscaleUpsert) SetSystemGenerated(v bool) *UpscaleUpsert {
	u.Set(upscale.FieldSystemGenerated, v)
	return u
}

// UpdateSystemGenerated sets the "system_generated" field to the value that was provided on create.
func (u *UpscaleUpsert) UpdateSystemGenerated() *UpscaleUpsert {
	u.SetExcluded(upscale.FieldSystemGenerated)
	return u
}

// SetSourceType sets the "source_type" field.
func (u *UpscaleUpsert) SetSourceType(v enttypes.SourceType) *UpscaleUpsert {
	u.Set(upscale.FieldSourceType, v)
	return u
}

// UpdateSourceType sets the "source_type" field to the value that was provided on create.
func (u *UpscaleUpsert) UpdateSourceType() *UpscaleUpsert {
	u.SetExcluded(upscale.FieldSourceType)
	return u
}

// SetWebhookToken sets the "webhook_token" field.
func (u *UpscaleUpsert) SetWebhookToken(v uuid.UUID) *UpscaleUpsert {
	u.Set(upscale.FieldWebhookToken, v)
	return u
}

// UpdateWebhookToken sets the "webhook_token" field to the value that was provided on create.
func (u *UpscaleUpsert) UpdateWebhookToken() *UpscaleUpsert {
	u.SetExcluded(upscale.FieldWebhookToken)
	return u
}

// SetUserID sets the "user_id" field.
func (u *UpscaleUpsert) SetUserID(v uuid.UUID) *UpscaleUpsert {
	u.Set(upscale.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UpscaleUpsert) UpdateUserID() *UpscaleUpsert {
	u.SetExcluded(upscale.FieldUserID)
	return u
}

// SetDeviceInfoID sets the "device_info_id" field.
func (u *UpscaleUpsert) SetDeviceInfoID(v uuid.UUID) *UpscaleUpsert {
	u.Set(upscale.FieldDeviceInfoID, v)
	return u
}

// UpdateDeviceInfoID sets the "device_info_id" field to the value that was provided on create.
func (u *UpscaleUpsert) UpdateDeviceInfoID() *UpscaleUpsert {
	u.SetExcluded(upscale.FieldDeviceInfoID)
	return u
}

// SetModelID sets the "model_id" field.
func (u *UpscaleUpsert) SetModelID(v uuid.UUID) *UpscaleUpsert {
	u.Set(upscale.FieldModelID, v)
	return u
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *UpscaleUpsert) UpdateModelID() *UpscaleUpsert {
	u.SetExcluded(upscale.FieldModelID)
	return u
}

// SetAPITokenID sets the "api_token_id" field.
func (u *UpscaleUpsert) SetAPITokenID(v uuid.UUID) *UpscaleUpsert {
	u.Set(upscale.FieldAPITokenID, v)
	return u
}

// UpdateAPITokenID sets the "api_token_id" field to the value that was provided on create.
func (u *UpscaleUpsert) UpdateAPITokenID() *UpscaleUpsert {
	u.SetExcluded(upscale.FieldAPITokenID)
	return u
}

// ClearAPITokenID clears the value of the "api_token_id" field.
func (u *UpscaleUpsert) ClearAPITokenID() *UpscaleUpsert {
	u.SetNull(upscale.FieldAPITokenID)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *UpscaleUpsert) SetStartedAt(v time.Time) *UpscaleUpsert {
	u.Set(upscale.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *UpscaleUpsert) UpdateStartedAt() *UpscaleUpsert {
	u.SetExcluded(upscale.FieldStartedAt)
	return u
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *UpscaleUpsert) ClearStartedAt() *UpscaleUpsert {
	u.SetNull(upscale.FieldStartedAt)
	return u
}

// SetCompletedAt sets the "completed_at" field.
func (u *UpscaleUpsert) SetCompletedAt(v time.Time) *UpscaleUpsert {
	u.Set(upscale.FieldCompletedAt, v)
	return u
}

// UpdateCompletedAt sets the "completed_at" field to the value that was provided on create.
func (u *UpscaleUpsert) UpdateCompletedAt() *UpscaleUpsert {
	u.SetExcluded(upscale.FieldCompletedAt)
	return u
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (u *UpscaleUpsert) ClearCompletedAt() *UpscaleUpsert {
	u.SetNull(upscale.FieldCompletedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UpscaleUpsert) SetUpdatedAt(v time.Time) *UpscaleUpsert {
	u.Set(upscale.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UpscaleUpsert) UpdateUpdatedAt() *UpscaleUpsert {
	u.SetExcluded(upscale.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Upscale.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(upscale.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UpscaleUpsertOne) UpdateNewValues() *UpscaleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(upscale.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(upscale.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Upscale.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UpscaleUpsertOne) Ignore() *UpscaleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UpscaleUpsertOne) DoNothing() *UpscaleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UpscaleCreate.OnConflict
// documentation for more info.
func (u *UpscaleUpsertOne) Update(set func(*UpscaleUpsert)) *UpscaleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UpscaleUpsert{UpdateSet: update})
	}))
	return u
}

// SetWidth sets the "width" field.
func (u *UpscaleUpsertOne) SetWidth(v int32) *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetWidth(v)
	})
}

// AddWidth adds v to the "width" field.
func (u *UpscaleUpsertOne) AddWidth(v int32) *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.AddWidth(v)
	})
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *UpscaleUpsertOne) UpdateWidth() *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateWidth()
	})
}

// SetHeight sets the "height" field.
func (u *UpscaleUpsertOne) SetHeight(v int32) *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetHeight(v)
	})
}

// AddHeight adds v to the "height" field.
func (u *UpscaleUpsertOne) AddHeight(v int32) *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.AddHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *UpscaleUpsertOne) UpdateHeight() *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateHeight()
	})
}

// SetScale sets the "scale" field.
func (u *UpscaleUpsertOne) SetScale(v int32) *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetScale(v)
	})
}

// AddScale adds v to the "scale" field.
func (u *UpscaleUpsertOne) AddScale(v int32) *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.AddScale(v)
	})
}

// UpdateScale sets the "scale" field to the value that was provided on create.
func (u *UpscaleUpsertOne) UpdateScale() *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateScale()
	})
}

// SetCountryCode sets the "country_code" field.
func (u *UpscaleUpsertOne) SetCountryCode(v string) *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetCountryCode(v)
	})
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *UpscaleUpsertOne) UpdateCountryCode() *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateCountryCode()
	})
}

// ClearCountryCode clears the value of the "country_code" field.
func (u *UpscaleUpsertOne) ClearCountryCode() *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.ClearCountryCode()
	})
}

// SetStatus sets the "status" field.
func (u *UpscaleUpsertOne) SetStatus(v upscale.Status) *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UpscaleUpsertOne) UpdateStatus() *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateStatus()
	})
}

// SetFailureReason sets the "failure_reason" field.
func (u *UpscaleUpsertOne) SetFailureReason(v string) *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetFailureReason(v)
	})
}

// UpdateFailureReason sets the "failure_reason" field to the value that was provided on create.
func (u *UpscaleUpsertOne) UpdateFailureReason() *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateFailureReason()
	})
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (u *UpscaleUpsertOne) ClearFailureReason() *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.ClearFailureReason()
	})
}

// SetStripeProductID sets the "stripe_product_id" field.
func (u *UpscaleUpsertOne) SetStripeProductID(v string) *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetStripeProductID(v)
	})
}

// UpdateStripeProductID sets the "stripe_product_id" field to the value that was provided on create.
func (u *UpscaleUpsertOne) UpdateStripeProductID() *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateStripeProductID()
	})
}

// ClearStripeProductID clears the value of the "stripe_product_id" field.
func (u *UpscaleUpsertOne) ClearStripeProductID() *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.ClearStripeProductID()
	})
}

// SetSystemGenerated sets the "system_generated" field.
func (u *UpscaleUpsertOne) SetSystemGenerated(v bool) *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetSystemGenerated(v)
	})
}

// UpdateSystemGenerated sets the "system_generated" field to the value that was provided on create.
func (u *UpscaleUpsertOne) UpdateSystemGenerated() *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateSystemGenerated()
	})
}

// SetSourceType sets the "source_type" field.
func (u *UpscaleUpsertOne) SetSourceType(v enttypes.SourceType) *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetSourceType(v)
	})
}

// UpdateSourceType sets the "source_type" field to the value that was provided on create.
func (u *UpscaleUpsertOne) UpdateSourceType() *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateSourceType()
	})
}

// SetWebhookToken sets the "webhook_token" field.
func (u *UpscaleUpsertOne) SetWebhookToken(v uuid.UUID) *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetWebhookToken(v)
	})
}

// UpdateWebhookToken sets the "webhook_token" field to the value that was provided on create.
func (u *UpscaleUpsertOne) UpdateWebhookToken() *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateWebhookToken()
	})
}

// SetUserID sets the "user_id" field.
func (u *UpscaleUpsertOne) SetUserID(v uuid.UUID) *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UpscaleUpsertOne) UpdateUserID() *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateUserID()
	})
}

// SetDeviceInfoID sets the "device_info_id" field.
func (u *UpscaleUpsertOne) SetDeviceInfoID(v uuid.UUID) *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetDeviceInfoID(v)
	})
}

// UpdateDeviceInfoID sets the "device_info_id" field to the value that was provided on create.
func (u *UpscaleUpsertOne) UpdateDeviceInfoID() *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateDeviceInfoID()
	})
}

// SetModelID sets the "model_id" field.
func (u *UpscaleUpsertOne) SetModelID(v uuid.UUID) *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetModelID(v)
	})
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *UpscaleUpsertOne) UpdateModelID() *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateModelID()
	})
}

// SetAPITokenID sets the "api_token_id" field.
func (u *UpscaleUpsertOne) SetAPITokenID(v uuid.UUID) *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetAPITokenID(v)
	})
}

// UpdateAPITokenID sets the "api_token_id" field to the value that was provided on create.
func (u *UpscaleUpsertOne) UpdateAPITokenID() *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateAPITokenID()
	})
}

// ClearAPITokenID clears the value of the "api_token_id" field.
func (u *UpscaleUpsertOne) ClearAPITokenID() *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.ClearAPITokenID()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *UpscaleUpsertOne) SetStartedAt(v time.Time) *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *UpscaleUpsertOne) UpdateStartedAt() *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *UpscaleUpsertOne) ClearStartedAt() *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.ClearStartedAt()
	})
}

// SetCompletedAt sets the "completed_at" field.
func (u *UpscaleUpsertOne) SetCompletedAt(v time.Time) *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetCompletedAt(v)
	})
}

// UpdateCompletedAt sets the "completed_at" field to the value that was provided on create.
func (u *UpscaleUpsertOne) UpdateCompletedAt() *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateCompletedAt()
	})
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (u *UpscaleUpsertOne) ClearCompletedAt() *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.ClearCompletedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UpscaleUpsertOne) SetUpdatedAt(v time.Time) *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UpscaleUpsertOne) UpdateUpdatedAt() *UpscaleUpsertOne {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *UpscaleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UpscaleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UpscaleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UpscaleUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UpscaleUpsertOne.ID is not supported by MySQL driver. Use UpscaleUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UpscaleUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UpscaleCreateBulk is the builder for creating many Upscale entities in bulk.
type UpscaleCreateBulk struct {
	config
	err      error
	builders []*UpscaleCreate
	conflict []sql.ConflictOption
}

// Save creates the Upscale entities in the database.
func (ucb *UpscaleCreateBulk) Save(ctx context.Context) ([]*Upscale, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*Upscale, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UpscaleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UpscaleCreateBulk) SaveX(ctx context.Context) []*Upscale {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UpscaleCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UpscaleCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Upscale.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UpscaleUpsert) {
//			SetWidth(v+v).
//		}).
//		Exec(ctx)
func (ucb *UpscaleCreateBulk) OnConflict(opts ...sql.ConflictOption) *UpscaleUpsertBulk {
	ucb.conflict = opts
	return &UpscaleUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Upscale.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UpscaleCreateBulk) OnConflictColumns(columns ...string) *UpscaleUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UpscaleUpsertBulk{
		create: ucb,
	}
}

// UpscaleUpsertBulk is the builder for "upsert"-ing
// a bulk of Upscale nodes.
type UpscaleUpsertBulk struct {
	create *UpscaleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Upscale.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(upscale.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UpscaleUpsertBulk) UpdateNewValues() *UpscaleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(upscale.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(upscale.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Upscale.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UpscaleUpsertBulk) Ignore() *UpscaleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UpscaleUpsertBulk) DoNothing() *UpscaleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UpscaleCreateBulk.OnConflict
// documentation for more info.
func (u *UpscaleUpsertBulk) Update(set func(*UpscaleUpsert)) *UpscaleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UpscaleUpsert{UpdateSet: update})
	}))
	return u
}

// SetWidth sets the "width" field.
func (u *UpscaleUpsertBulk) SetWidth(v int32) *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetWidth(v)
	})
}

// AddWidth adds v to the "width" field.
func (u *UpscaleUpsertBulk) AddWidth(v int32) *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.AddWidth(v)
	})
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *UpscaleUpsertBulk) UpdateWidth() *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateWidth()
	})
}

// SetHeight sets the "height" field.
func (u *UpscaleUpsertBulk) SetHeight(v int32) *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetHeight(v)
	})
}

// AddHeight adds v to the "height" field.
func (u *UpscaleUpsertBulk) AddHeight(v int32) *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.AddHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *UpscaleUpsertBulk) UpdateHeight() *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateHeight()
	})
}

// SetScale sets the "scale" field.
func (u *UpscaleUpsertBulk) SetScale(v int32) *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetScale(v)
	})
}

// AddScale adds v to the "scale" field.
func (u *UpscaleUpsertBulk) AddScale(v int32) *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.AddScale(v)
	})
}

// UpdateScale sets the "scale" field to the value that was provided on create.
func (u *UpscaleUpsertBulk) UpdateScale() *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateScale()
	})
}

// SetCountryCode sets the "country_code" field.
func (u *UpscaleUpsertBulk) SetCountryCode(v string) *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetCountryCode(v)
	})
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *UpscaleUpsertBulk) UpdateCountryCode() *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateCountryCode()
	})
}

// ClearCountryCode clears the value of the "country_code" field.
func (u *UpscaleUpsertBulk) ClearCountryCode() *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.ClearCountryCode()
	})
}

// SetStatus sets the "status" field.
func (u *UpscaleUpsertBulk) SetStatus(v upscale.Status) *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UpscaleUpsertBulk) UpdateStatus() *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateStatus()
	})
}

// SetFailureReason sets the "failure_reason" field.
func (u *UpscaleUpsertBulk) SetFailureReason(v string) *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetFailureReason(v)
	})
}

// UpdateFailureReason sets the "failure_reason" field to the value that was provided on create.
func (u *UpscaleUpsertBulk) UpdateFailureReason() *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateFailureReason()
	})
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (u *UpscaleUpsertBulk) ClearFailureReason() *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.ClearFailureReason()
	})
}

// SetStripeProductID sets the "stripe_product_id" field.
func (u *UpscaleUpsertBulk) SetStripeProductID(v string) *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetStripeProductID(v)
	})
}

// UpdateStripeProductID sets the "stripe_product_id" field to the value that was provided on create.
func (u *UpscaleUpsertBulk) UpdateStripeProductID() *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateStripeProductID()
	})
}

// ClearStripeProductID clears the value of the "stripe_product_id" field.
func (u *UpscaleUpsertBulk) ClearStripeProductID() *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.ClearStripeProductID()
	})
}

// SetSystemGenerated sets the "system_generated" field.
func (u *UpscaleUpsertBulk) SetSystemGenerated(v bool) *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetSystemGenerated(v)
	})
}

// UpdateSystemGenerated sets the "system_generated" field to the value that was provided on create.
func (u *UpscaleUpsertBulk) UpdateSystemGenerated() *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateSystemGenerated()
	})
}

// SetSourceType sets the "source_type" field.
func (u *UpscaleUpsertBulk) SetSourceType(v enttypes.SourceType) *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetSourceType(v)
	})
}

// UpdateSourceType sets the "source_type" field to the value that was provided on create.
func (u *UpscaleUpsertBulk) UpdateSourceType() *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateSourceType()
	})
}

// SetWebhookToken sets the "webhook_token" field.
func (u *UpscaleUpsertBulk) SetWebhookToken(v uuid.UUID) *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetWebhookToken(v)
	})
}

// UpdateWebhookToken sets the "webhook_token" field to the value that was provided on create.
func (u *UpscaleUpsertBulk) UpdateWebhookToken() *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateWebhookToken()
	})
}

// SetUserID sets the "user_id" field.
func (u *UpscaleUpsertBulk) SetUserID(v uuid.UUID) *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UpscaleUpsertBulk) UpdateUserID() *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateUserID()
	})
}

// SetDeviceInfoID sets the "device_info_id" field.
func (u *UpscaleUpsertBulk) SetDeviceInfoID(v uuid.UUID) *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetDeviceInfoID(v)
	})
}

// UpdateDeviceInfoID sets the "device_info_id" field to the value that was provided on create.
func (u *UpscaleUpsertBulk) UpdateDeviceInfoID() *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateDeviceInfoID()
	})
}

// SetModelID sets the "model_id" field.
func (u *UpscaleUpsertBulk) SetModelID(v uuid.UUID) *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetModelID(v)
	})
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *UpscaleUpsertBulk) UpdateModelID() *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateModelID()
	})
}

// SetAPITokenID sets the "api_token_id" field.
func (u *UpscaleUpsertBulk) SetAPITokenID(v uuid.UUID) *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetAPITokenID(v)
	})
}

// UpdateAPITokenID sets the "api_token_id" field to the value that was provided on create.
func (u *UpscaleUpsertBulk) UpdateAPITokenID() *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateAPITokenID()
	})
}

// ClearAPITokenID clears the value of the "api_token_id" field.
func (u *UpscaleUpsertBulk) ClearAPITokenID() *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.ClearAPITokenID()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *UpscaleUpsertBulk) SetStartedAt(v time.Time) *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *UpscaleUpsertBulk) UpdateStartedAt() *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *UpscaleUpsertBulk) ClearStartedAt() *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.ClearStartedAt()
	})
}

// SetCompletedAt sets the "completed_at" field.
func (u *UpscaleUpsertBulk) SetCompletedAt(v time.Time) *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetCompletedAt(v)
	})
}

// UpdateCompletedAt sets the "completed_at" field to the value that was provided on create.
func (u *UpscaleUpsertBulk) UpdateCompletedAt() *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateCompletedAt()
	})
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (u *UpscaleUpsertBulk) ClearCompletedAt() *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.ClearCompletedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UpscaleUpsertBulk) SetUpdatedAt(v time.Time) *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UpscaleUpsertBulk) UpdateUpdatedAt() *UpscaleUpsertBulk {
	return u.Update(func(s *UpscaleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *UpscaleUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UpscaleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UpscaleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UpscaleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
