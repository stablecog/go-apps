// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/generationoutput"
	"github.com/stablecog/sc-go/database/ent/predicate"
	"github.com/stablecog/sc-go/database/ent/upscale"
	"github.com/stablecog/sc-go/database/ent/upscaleoutput"
)

// UpscaleOutputUpdate is the builder for updating UpscaleOutput entities.
type UpscaleOutputUpdate struct {
	config
	hooks     []Hook
	mutation  *UpscaleOutputMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UpscaleOutputUpdate builder.
func (uou *UpscaleOutputUpdate) Where(ps ...predicate.UpscaleOutput) *UpscaleOutputUpdate {
	uou.mutation.Where(ps...)
	return uou
}

// SetImagePath sets the "image_path" field.
func (uou *UpscaleOutputUpdate) SetImagePath(s string) *UpscaleOutputUpdate {
	uou.mutation.SetImagePath(s)
	return uou
}

// SetNillableImagePath sets the "image_path" field if the given value is not nil.
func (uou *UpscaleOutputUpdate) SetNillableImagePath(s *string) *UpscaleOutputUpdate {
	if s != nil {
		uou.SetImagePath(*s)
	}
	return uou
}

// SetInputImageURL sets the "input_image_url" field.
func (uou *UpscaleOutputUpdate) SetInputImageURL(s string) *UpscaleOutputUpdate {
	uou.mutation.SetInputImageURL(s)
	return uou
}

// SetNillableInputImageURL sets the "input_image_url" field if the given value is not nil.
func (uou *UpscaleOutputUpdate) SetNillableInputImageURL(s *string) *UpscaleOutputUpdate {
	if s != nil {
		uou.SetInputImageURL(*s)
	}
	return uou
}

// ClearInputImageURL clears the value of the "input_image_url" field.
func (uou *UpscaleOutputUpdate) ClearInputImageURL() *UpscaleOutputUpdate {
	uou.mutation.ClearInputImageURL()
	return uou
}

// SetUpscaleID sets the "upscale_id" field.
func (uou *UpscaleOutputUpdate) SetUpscaleID(u uuid.UUID) *UpscaleOutputUpdate {
	uou.mutation.SetUpscaleID(u)
	return uou
}

// SetNillableUpscaleID sets the "upscale_id" field if the given value is not nil.
func (uou *UpscaleOutputUpdate) SetNillableUpscaleID(u *uuid.UUID) *UpscaleOutputUpdate {
	if u != nil {
		uou.SetUpscaleID(*u)
	}
	return uou
}

// SetGenerationOutputID sets the "generation_output_id" field.
func (uou *UpscaleOutputUpdate) SetGenerationOutputID(u uuid.UUID) *UpscaleOutputUpdate {
	uou.mutation.SetGenerationOutputID(u)
	return uou
}

// SetNillableGenerationOutputID sets the "generation_output_id" field if the given value is not nil.
func (uou *UpscaleOutputUpdate) SetNillableGenerationOutputID(u *uuid.UUID) *UpscaleOutputUpdate {
	if u != nil {
		uou.SetGenerationOutputID(*u)
	}
	return uou
}

// ClearGenerationOutputID clears the value of the "generation_output_id" field.
func (uou *UpscaleOutputUpdate) ClearGenerationOutputID() *UpscaleOutputUpdate {
	uou.mutation.ClearGenerationOutputID()
	return uou
}

// SetDeletedAt sets the "deleted_at" field.
func (uou *UpscaleOutputUpdate) SetDeletedAt(t time.Time) *UpscaleOutputUpdate {
	uou.mutation.SetDeletedAt(t)
	return uou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uou *UpscaleOutputUpdate) SetNillableDeletedAt(t *time.Time) *UpscaleOutputUpdate {
	if t != nil {
		uou.SetDeletedAt(*t)
	}
	return uou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uou *UpscaleOutputUpdate) ClearDeletedAt() *UpscaleOutputUpdate {
	uou.mutation.ClearDeletedAt()
	return uou
}

// SetUpdatedAt sets the "updated_at" field.
func (uou *UpscaleOutputUpdate) SetUpdatedAt(t time.Time) *UpscaleOutputUpdate {
	uou.mutation.SetUpdatedAt(t)
	return uou
}

// SetUpscalesID sets the "upscales" edge to the Upscale entity by ID.
func (uou *UpscaleOutputUpdate) SetUpscalesID(id uuid.UUID) *UpscaleOutputUpdate {
	uou.mutation.SetUpscalesID(id)
	return uou
}

// SetUpscales sets the "upscales" edge to the Upscale entity.
func (uou *UpscaleOutputUpdate) SetUpscales(u *Upscale) *UpscaleOutputUpdate {
	return uou.SetUpscalesID(u.ID)
}

// SetGenerationOutput sets the "generation_output" edge to the GenerationOutput entity.
func (uou *UpscaleOutputUpdate) SetGenerationOutput(g *GenerationOutput) *UpscaleOutputUpdate {
	return uou.SetGenerationOutputID(g.ID)
}

// Mutation returns the UpscaleOutputMutation object of the builder.
func (uou *UpscaleOutputUpdate) Mutation() *UpscaleOutputMutation {
	return uou.mutation
}

// ClearUpscales clears the "upscales" edge to the Upscale entity.
func (uou *UpscaleOutputUpdate) ClearUpscales() *UpscaleOutputUpdate {
	uou.mutation.ClearUpscales()
	return uou
}

// ClearGenerationOutput clears the "generation_output" edge to the GenerationOutput entity.
func (uou *UpscaleOutputUpdate) ClearGenerationOutput() *UpscaleOutputUpdate {
	uou.mutation.ClearGenerationOutput()
	return uou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uou *UpscaleOutputUpdate) Save(ctx context.Context) (int, error) {
	uou.defaults()
	return withHooks(ctx, uou.sqlSave, uou.mutation, uou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uou *UpscaleOutputUpdate) SaveX(ctx context.Context) int {
	affected, err := uou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uou *UpscaleOutputUpdate) Exec(ctx context.Context) error {
	_, err := uou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uou *UpscaleOutputUpdate) ExecX(ctx context.Context) {
	if err := uou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uou *UpscaleOutputUpdate) defaults() {
	if _, ok := uou.mutation.UpdatedAt(); !ok {
		v := upscaleoutput.UpdateDefaultUpdatedAt()
		uou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uou *UpscaleOutputUpdate) check() error {
	if uou.mutation.UpscalesCleared() && len(uou.mutation.UpscalesIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UpscaleOutput.upscales"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uou *UpscaleOutputUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UpscaleOutputUpdate {
	uou.modifiers = append(uou.modifiers, modifiers...)
	return uou
}

func (uou *UpscaleOutputUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(upscaleoutput.Table, upscaleoutput.Columns, sqlgraph.NewFieldSpec(upscaleoutput.FieldID, field.TypeUUID))
	if ps := uou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uou.mutation.ImagePath(); ok {
		_spec.SetField(upscaleoutput.FieldImagePath, field.TypeString, value)
	}
	if value, ok := uou.mutation.InputImageURL(); ok {
		_spec.SetField(upscaleoutput.FieldInputImageURL, field.TypeString, value)
	}
	if uou.mutation.InputImageURLCleared() {
		_spec.ClearField(upscaleoutput.FieldInputImageURL, field.TypeString)
	}
	if value, ok := uou.mutation.DeletedAt(); ok {
		_spec.SetField(upscaleoutput.FieldDeletedAt, field.TypeTime, value)
	}
	if uou.mutation.DeletedAtCleared() {
		_spec.ClearField(upscaleoutput.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uou.mutation.UpdatedAt(); ok {
		_spec.SetField(upscaleoutput.FieldUpdatedAt, field.TypeTime, value)
	}
	if uou.mutation.UpscalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   upscaleoutput.UpscalesTable,
			Columns: []string{upscaleoutput.UpscalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upscale.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uou.mutation.UpscalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   upscaleoutput.UpscalesTable,
			Columns: []string{upscaleoutput.UpscalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upscale.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uou.mutation.GenerationOutputCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   upscaleoutput.GenerationOutputTable,
			Columns: []string{upscaleoutput.GenerationOutputColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generationoutput.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uou.mutation.GenerationOutputIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   upscaleoutput.GenerationOutputTable,
			Columns: []string{upscaleoutput.GenerationOutputColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generationoutput.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upscaleoutput.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uou.mutation.done = true
	return n, nil
}

// UpscaleOutputUpdateOne is the builder for updating a single UpscaleOutput entity.
type UpscaleOutputUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UpscaleOutputMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetImagePath sets the "image_path" field.
func (uouo *UpscaleOutputUpdateOne) SetImagePath(s string) *UpscaleOutputUpdateOne {
	uouo.mutation.SetImagePath(s)
	return uouo
}

// SetNillableImagePath sets the "image_path" field if the given value is not nil.
func (uouo *UpscaleOutputUpdateOne) SetNillableImagePath(s *string) *UpscaleOutputUpdateOne {
	if s != nil {
		uouo.SetImagePath(*s)
	}
	return uouo
}

// SetInputImageURL sets the "input_image_url" field.
func (uouo *UpscaleOutputUpdateOne) SetInputImageURL(s string) *UpscaleOutputUpdateOne {
	uouo.mutation.SetInputImageURL(s)
	return uouo
}

// SetNillableInputImageURL sets the "input_image_url" field if the given value is not nil.
func (uouo *UpscaleOutputUpdateOne) SetNillableInputImageURL(s *string) *UpscaleOutputUpdateOne {
	if s != nil {
		uouo.SetInputImageURL(*s)
	}
	return uouo
}

// ClearInputImageURL clears the value of the "input_image_url" field.
func (uouo *UpscaleOutputUpdateOne) ClearInputImageURL() *UpscaleOutputUpdateOne {
	uouo.mutation.ClearInputImageURL()
	return uouo
}

// SetUpscaleID sets the "upscale_id" field.
func (uouo *UpscaleOutputUpdateOne) SetUpscaleID(u uuid.UUID) *UpscaleOutputUpdateOne {
	uouo.mutation.SetUpscaleID(u)
	return uouo
}

// SetNillableUpscaleID sets the "upscale_id" field if the given value is not nil.
func (uouo *UpscaleOutputUpdateOne) SetNillableUpscaleID(u *uuid.UUID) *UpscaleOutputUpdateOne {
	if u != nil {
		uouo.SetUpscaleID(*u)
	}
	return uouo
}

// SetGenerationOutputID sets the "generation_output_id" field.
func (uouo *UpscaleOutputUpdateOne) SetGenerationOutputID(u uuid.UUID) *UpscaleOutputUpdateOne {
	uouo.mutation.SetGenerationOutputID(u)
	return uouo
}

// SetNillableGenerationOutputID sets the "generation_output_id" field if the given value is not nil.
func (uouo *UpscaleOutputUpdateOne) SetNillableGenerationOutputID(u *uuid.UUID) *UpscaleOutputUpdateOne {
	if u != nil {
		uouo.SetGenerationOutputID(*u)
	}
	return uouo
}

// ClearGenerationOutputID clears the value of the "generation_output_id" field.
func (uouo *UpscaleOutputUpdateOne) ClearGenerationOutputID() *UpscaleOutputUpdateOne {
	uouo.mutation.ClearGenerationOutputID()
	return uouo
}

// SetDeletedAt sets the "deleted_at" field.
func (uouo *UpscaleOutputUpdateOne) SetDeletedAt(t time.Time) *UpscaleOutputUpdateOne {
	uouo.mutation.SetDeletedAt(t)
	return uouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uouo *UpscaleOutputUpdateOne) SetNillableDeletedAt(t *time.Time) *UpscaleOutputUpdateOne {
	if t != nil {
		uouo.SetDeletedAt(*t)
	}
	return uouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uouo *UpscaleOutputUpdateOne) ClearDeletedAt() *UpscaleOutputUpdateOne {
	uouo.mutation.ClearDeletedAt()
	return uouo
}

// SetUpdatedAt sets the "updated_at" field.
func (uouo *UpscaleOutputUpdateOne) SetUpdatedAt(t time.Time) *UpscaleOutputUpdateOne {
	uouo.mutation.SetUpdatedAt(t)
	return uouo
}

// SetUpscalesID sets the "upscales" edge to the Upscale entity by ID.
func (uouo *UpscaleOutputUpdateOne) SetUpscalesID(id uuid.UUID) *UpscaleOutputUpdateOne {
	uouo.mutation.SetUpscalesID(id)
	return uouo
}

// SetUpscales sets the "upscales" edge to the Upscale entity.
func (uouo *UpscaleOutputUpdateOne) SetUpscales(u *Upscale) *UpscaleOutputUpdateOne {
	return uouo.SetUpscalesID(u.ID)
}

// SetGenerationOutput sets the "generation_output" edge to the GenerationOutput entity.
func (uouo *UpscaleOutputUpdateOne) SetGenerationOutput(g *GenerationOutput) *UpscaleOutputUpdateOne {
	return uouo.SetGenerationOutputID(g.ID)
}

// Mutation returns the UpscaleOutputMutation object of the builder.
func (uouo *UpscaleOutputUpdateOne) Mutation() *UpscaleOutputMutation {
	return uouo.mutation
}

// ClearUpscales clears the "upscales" edge to the Upscale entity.
func (uouo *UpscaleOutputUpdateOne) ClearUpscales() *UpscaleOutputUpdateOne {
	uouo.mutation.ClearUpscales()
	return uouo
}

// ClearGenerationOutput clears the "generation_output" edge to the GenerationOutput entity.
func (uouo *UpscaleOutputUpdateOne) ClearGenerationOutput() *UpscaleOutputUpdateOne {
	uouo.mutation.ClearGenerationOutput()
	return uouo
}

// Where appends a list predicates to the UpscaleOutputUpdate builder.
func (uouo *UpscaleOutputUpdateOne) Where(ps ...predicate.UpscaleOutput) *UpscaleOutputUpdateOne {
	uouo.mutation.Where(ps...)
	return uouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uouo *UpscaleOutputUpdateOne) Select(field string, fields ...string) *UpscaleOutputUpdateOne {
	uouo.fields = append([]string{field}, fields...)
	return uouo
}

// Save executes the query and returns the updated UpscaleOutput entity.
func (uouo *UpscaleOutputUpdateOne) Save(ctx context.Context) (*UpscaleOutput, error) {
	uouo.defaults()
	return withHooks(ctx, uouo.sqlSave, uouo.mutation, uouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uouo *UpscaleOutputUpdateOne) SaveX(ctx context.Context) *UpscaleOutput {
	node, err := uouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uouo *UpscaleOutputUpdateOne) Exec(ctx context.Context) error {
	_, err := uouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uouo *UpscaleOutputUpdateOne) ExecX(ctx context.Context) {
	if err := uouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uouo *UpscaleOutputUpdateOne) defaults() {
	if _, ok := uouo.mutation.UpdatedAt(); !ok {
		v := upscaleoutput.UpdateDefaultUpdatedAt()
		uouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uouo *UpscaleOutputUpdateOne) check() error {
	if uouo.mutation.UpscalesCleared() && len(uouo.mutation.UpscalesIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UpscaleOutput.upscales"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uouo *UpscaleOutputUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UpscaleOutputUpdateOne {
	uouo.modifiers = append(uouo.modifiers, modifiers...)
	return uouo
}

func (uouo *UpscaleOutputUpdateOne) sqlSave(ctx context.Context) (_node *UpscaleOutput, err error) {
	if err := uouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(upscaleoutput.Table, upscaleoutput.Columns, sqlgraph.NewFieldSpec(upscaleoutput.FieldID, field.TypeUUID))
	id, ok := uouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpscaleOutput.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upscaleoutput.FieldID)
		for _, f := range fields {
			if !upscaleoutput.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upscaleoutput.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uouo.mutation.ImagePath(); ok {
		_spec.SetField(upscaleoutput.FieldImagePath, field.TypeString, value)
	}
	if value, ok := uouo.mutation.InputImageURL(); ok {
		_spec.SetField(upscaleoutput.FieldInputImageURL, field.TypeString, value)
	}
	if uouo.mutation.InputImageURLCleared() {
		_spec.ClearField(upscaleoutput.FieldInputImageURL, field.TypeString)
	}
	if value, ok := uouo.mutation.DeletedAt(); ok {
		_spec.SetField(upscaleoutput.FieldDeletedAt, field.TypeTime, value)
	}
	if uouo.mutation.DeletedAtCleared() {
		_spec.ClearField(upscaleoutput.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uouo.mutation.UpdatedAt(); ok {
		_spec.SetField(upscaleoutput.FieldUpdatedAt, field.TypeTime, value)
	}
	if uouo.mutation.UpscalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   upscaleoutput.UpscalesTable,
			Columns: []string{upscaleoutput.UpscalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upscale.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uouo.mutation.UpscalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   upscaleoutput.UpscalesTable,
			Columns: []string{upscaleoutput.UpscalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upscale.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uouo.mutation.GenerationOutputCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   upscaleoutput.GenerationOutputTable,
			Columns: []string{upscaleoutput.GenerationOutputColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generationoutput.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uouo.mutation.GenerationOutputIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   upscaleoutput.GenerationOutputTable,
			Columns: []string{upscaleoutput.GenerationOutputColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generationoutput.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uouo.modifiers...)
	_node = &UpscaleOutput{config: uouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upscaleoutput.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uouo.mutation.done = true
	return _node, nil
}
