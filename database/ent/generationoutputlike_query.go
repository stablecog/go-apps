// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/generationoutput"
	"github.com/stablecog/sc-go/database/ent/generationoutputlike"
	"github.com/stablecog/sc-go/database/ent/predicate"
	"github.com/stablecog/sc-go/database/ent/user"
)

// GenerationOutputLikeQuery is the builder for querying GenerationOutputLike entities.
type GenerationOutputLikeQuery struct {
	config
	ctx                   *QueryContext
	order                 []generationoutputlike.OrderOption
	inters                []Interceptor
	predicates            []predicate.GenerationOutputLike
	withGenerationOutputs *GenerationOutputQuery
	withUsers             *UserQuery
	modifiers             []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GenerationOutputLikeQuery builder.
func (golq *GenerationOutputLikeQuery) Where(ps ...predicate.GenerationOutputLike) *GenerationOutputLikeQuery {
	golq.predicates = append(golq.predicates, ps...)
	return golq
}

// Limit the number of records to be returned by this query.
func (golq *GenerationOutputLikeQuery) Limit(limit int) *GenerationOutputLikeQuery {
	golq.ctx.Limit = &limit
	return golq
}

// Offset to start from.
func (golq *GenerationOutputLikeQuery) Offset(offset int) *GenerationOutputLikeQuery {
	golq.ctx.Offset = &offset
	return golq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (golq *GenerationOutputLikeQuery) Unique(unique bool) *GenerationOutputLikeQuery {
	golq.ctx.Unique = &unique
	return golq
}

// Order specifies how the records should be ordered.
func (golq *GenerationOutputLikeQuery) Order(o ...generationoutputlike.OrderOption) *GenerationOutputLikeQuery {
	golq.order = append(golq.order, o...)
	return golq
}

// QueryGenerationOutputs chains the current query on the "generation_outputs" edge.
func (golq *GenerationOutputLikeQuery) QueryGenerationOutputs() *GenerationOutputQuery {
	query := (&GenerationOutputClient{config: golq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := golq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := golq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(generationoutputlike.Table, generationoutputlike.FieldID, selector),
			sqlgraph.To(generationoutput.Table, generationoutput.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, generationoutputlike.GenerationOutputsTable, generationoutputlike.GenerationOutputsColumn),
		)
		fromU = sqlgraph.SetNeighbors(golq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsers chains the current query on the "users" edge.
func (golq *GenerationOutputLikeQuery) QueryUsers() *UserQuery {
	query := (&UserClient{config: golq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := golq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := golq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(generationoutputlike.Table, generationoutputlike.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, generationoutputlike.UsersTable, generationoutputlike.UsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(golq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GenerationOutputLike entity from the query.
// Returns a *NotFoundError when no GenerationOutputLike was found.
func (golq *GenerationOutputLikeQuery) First(ctx context.Context) (*GenerationOutputLike, error) {
	nodes, err := golq.Limit(1).All(setContextOp(ctx, golq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{generationoutputlike.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (golq *GenerationOutputLikeQuery) FirstX(ctx context.Context) *GenerationOutputLike {
	node, err := golq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GenerationOutputLike ID from the query.
// Returns a *NotFoundError when no GenerationOutputLike ID was found.
func (golq *GenerationOutputLikeQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = golq.Limit(1).IDs(setContextOp(ctx, golq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{generationoutputlike.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (golq *GenerationOutputLikeQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := golq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GenerationOutputLike entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GenerationOutputLike entity is found.
// Returns a *NotFoundError when no GenerationOutputLike entities are found.
func (golq *GenerationOutputLikeQuery) Only(ctx context.Context) (*GenerationOutputLike, error) {
	nodes, err := golq.Limit(2).All(setContextOp(ctx, golq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{generationoutputlike.Label}
	default:
		return nil, &NotSingularError{generationoutputlike.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (golq *GenerationOutputLikeQuery) OnlyX(ctx context.Context) *GenerationOutputLike {
	node, err := golq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GenerationOutputLike ID in the query.
// Returns a *NotSingularError when more than one GenerationOutputLike ID is found.
// Returns a *NotFoundError when no entities are found.
func (golq *GenerationOutputLikeQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = golq.Limit(2).IDs(setContextOp(ctx, golq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{generationoutputlike.Label}
	default:
		err = &NotSingularError{generationoutputlike.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (golq *GenerationOutputLikeQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := golq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GenerationOutputLikes.
func (golq *GenerationOutputLikeQuery) All(ctx context.Context) ([]*GenerationOutputLike, error) {
	ctx = setContextOp(ctx, golq.ctx, ent.OpQueryAll)
	if err := golq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*GenerationOutputLike, *GenerationOutputLikeQuery]()
	return withInterceptors[[]*GenerationOutputLike](ctx, golq, qr, golq.inters)
}

// AllX is like All, but panics if an error occurs.
func (golq *GenerationOutputLikeQuery) AllX(ctx context.Context) []*GenerationOutputLike {
	nodes, err := golq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GenerationOutputLike IDs.
func (golq *GenerationOutputLikeQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if golq.ctx.Unique == nil && golq.path != nil {
		golq.Unique(true)
	}
	ctx = setContextOp(ctx, golq.ctx, ent.OpQueryIDs)
	if err = golq.Select(generationoutputlike.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (golq *GenerationOutputLikeQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := golq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (golq *GenerationOutputLikeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, golq.ctx, ent.OpQueryCount)
	if err := golq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, golq, querierCount[*GenerationOutputLikeQuery](), golq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (golq *GenerationOutputLikeQuery) CountX(ctx context.Context) int {
	count, err := golq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (golq *GenerationOutputLikeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, golq.ctx, ent.OpQueryExist)
	switch _, err := golq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (golq *GenerationOutputLikeQuery) ExistX(ctx context.Context) bool {
	exist, err := golq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GenerationOutputLikeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (golq *GenerationOutputLikeQuery) Clone() *GenerationOutputLikeQuery {
	if golq == nil {
		return nil
	}
	return &GenerationOutputLikeQuery{
		config:                golq.config,
		ctx:                   golq.ctx.Clone(),
		order:                 append([]generationoutputlike.OrderOption{}, golq.order...),
		inters:                append([]Interceptor{}, golq.inters...),
		predicates:            append([]predicate.GenerationOutputLike{}, golq.predicates...),
		withGenerationOutputs: golq.withGenerationOutputs.Clone(),
		withUsers:             golq.withUsers.Clone(),
		// clone intermediate query.
		sql:  golq.sql.Clone(),
		path: golq.path,
	}
}

// WithGenerationOutputs tells the query-builder to eager-load the nodes that are connected to
// the "generation_outputs" edge. The optional arguments are used to configure the query builder of the edge.
func (golq *GenerationOutputLikeQuery) WithGenerationOutputs(opts ...func(*GenerationOutputQuery)) *GenerationOutputLikeQuery {
	query := (&GenerationOutputClient{config: golq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	golq.withGenerationOutputs = query
	return golq
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (golq *GenerationOutputLikeQuery) WithUsers(opts ...func(*UserQuery)) *GenerationOutputLikeQuery {
	query := (&UserClient{config: golq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	golq.withUsers = query
	return golq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		OutputID uuid.UUID `json:"output_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GenerationOutputLike.Query().
//		GroupBy(generationoutputlike.FieldOutputID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (golq *GenerationOutputLikeQuery) GroupBy(field string, fields ...string) *GenerationOutputLikeGroupBy {
	golq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GenerationOutputLikeGroupBy{build: golq}
	grbuild.flds = &golq.ctx.Fields
	grbuild.label = generationoutputlike.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		OutputID uuid.UUID `json:"output_id,omitempty"`
//	}
//
//	client.GenerationOutputLike.Query().
//		Select(generationoutputlike.FieldOutputID).
//		Scan(ctx, &v)
func (golq *GenerationOutputLikeQuery) Select(fields ...string) *GenerationOutputLikeSelect {
	golq.ctx.Fields = append(golq.ctx.Fields, fields...)
	sbuild := &GenerationOutputLikeSelect{GenerationOutputLikeQuery: golq}
	sbuild.label = generationoutputlike.Label
	sbuild.flds, sbuild.scan = &golq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GenerationOutputLikeSelect configured with the given aggregations.
func (golq *GenerationOutputLikeQuery) Aggregate(fns ...AggregateFunc) *GenerationOutputLikeSelect {
	return golq.Select().Aggregate(fns...)
}

func (golq *GenerationOutputLikeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range golq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, golq); err != nil {
				return err
			}
		}
	}
	for _, f := range golq.ctx.Fields {
		if !generationoutputlike.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if golq.path != nil {
		prev, err := golq.path(ctx)
		if err != nil {
			return err
		}
		golq.sql = prev
	}
	return nil
}

func (golq *GenerationOutputLikeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GenerationOutputLike, error) {
	var (
		nodes       = []*GenerationOutputLike{}
		_spec       = golq.querySpec()
		loadedTypes = [2]bool{
			golq.withGenerationOutputs != nil,
			golq.withUsers != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GenerationOutputLike).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GenerationOutputLike{config: golq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(golq.modifiers) > 0 {
		_spec.Modifiers = golq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, golq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := golq.withGenerationOutputs; query != nil {
		if err := golq.loadGenerationOutputs(ctx, query, nodes, nil,
			func(n *GenerationOutputLike, e *GenerationOutput) { n.Edges.GenerationOutputs = e }); err != nil {
			return nil, err
		}
	}
	if query := golq.withUsers; query != nil {
		if err := golq.loadUsers(ctx, query, nodes, nil,
			func(n *GenerationOutputLike, e *User) { n.Edges.Users = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (golq *GenerationOutputLikeQuery) loadGenerationOutputs(ctx context.Context, query *GenerationOutputQuery, nodes []*GenerationOutputLike, init func(*GenerationOutputLike), assign func(*GenerationOutputLike, *GenerationOutput)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*GenerationOutputLike)
	for i := range nodes {
		fk := nodes[i].OutputID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(generationoutput.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "output_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (golq *GenerationOutputLikeQuery) loadUsers(ctx context.Context, query *UserQuery, nodes []*GenerationOutputLike, init func(*GenerationOutputLike), assign func(*GenerationOutputLike, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*GenerationOutputLike)
	for i := range nodes {
		fk := nodes[i].LikedByUserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "liked_by_user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (golq *GenerationOutputLikeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := golq.querySpec()
	if len(golq.modifiers) > 0 {
		_spec.Modifiers = golq.modifiers
	}
	_spec.Node.Columns = golq.ctx.Fields
	if len(golq.ctx.Fields) > 0 {
		_spec.Unique = golq.ctx.Unique != nil && *golq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, golq.driver, _spec)
}

func (golq *GenerationOutputLikeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(generationoutputlike.Table, generationoutputlike.Columns, sqlgraph.NewFieldSpec(generationoutputlike.FieldID, field.TypeUUID))
	_spec.From = golq.sql
	if unique := golq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if golq.path != nil {
		_spec.Unique = true
	}
	if fields := golq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, generationoutputlike.FieldID)
		for i := range fields {
			if fields[i] != generationoutputlike.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if golq.withGenerationOutputs != nil {
			_spec.Node.AddColumnOnce(generationoutputlike.FieldOutputID)
		}
		if golq.withUsers != nil {
			_spec.Node.AddColumnOnce(generationoutputlike.FieldLikedByUserID)
		}
	}
	if ps := golq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := golq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := golq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := golq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (golq *GenerationOutputLikeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(golq.driver.Dialect())
	t1 := builder.Table(generationoutputlike.Table)
	columns := golq.ctx.Fields
	if len(columns) == 0 {
		columns = generationoutputlike.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if golq.sql != nil {
		selector = golq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if golq.ctx.Unique != nil && *golq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range golq.modifiers {
		m(selector)
	}
	for _, p := range golq.predicates {
		p(selector)
	}
	for _, p := range golq.order {
		p(selector)
	}
	if offset := golq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := golq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (golq *GenerationOutputLikeQuery) Modify(modifiers ...func(s *sql.Selector)) *GenerationOutputLikeSelect {
	golq.modifiers = append(golq.modifiers, modifiers...)
	return golq.Select()
}

// GenerationOutputLikeGroupBy is the group-by builder for GenerationOutputLike entities.
type GenerationOutputLikeGroupBy struct {
	selector
	build *GenerationOutputLikeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (golgb *GenerationOutputLikeGroupBy) Aggregate(fns ...AggregateFunc) *GenerationOutputLikeGroupBy {
	golgb.fns = append(golgb.fns, fns...)
	return golgb
}

// Scan applies the selector query and scans the result into the given value.
func (golgb *GenerationOutputLikeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, golgb.build.ctx, ent.OpQueryGroupBy)
	if err := golgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GenerationOutputLikeQuery, *GenerationOutputLikeGroupBy](ctx, golgb.build, golgb, golgb.build.inters, v)
}

func (golgb *GenerationOutputLikeGroupBy) sqlScan(ctx context.Context, root *GenerationOutputLikeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(golgb.fns))
	for _, fn := range golgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*golgb.flds)+len(golgb.fns))
		for _, f := range *golgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*golgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := golgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GenerationOutputLikeSelect is the builder for selecting fields of GenerationOutputLike entities.
type GenerationOutputLikeSelect struct {
	*GenerationOutputLikeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gols *GenerationOutputLikeSelect) Aggregate(fns ...AggregateFunc) *GenerationOutputLikeSelect {
	gols.fns = append(gols.fns, fns...)
	return gols
}

// Scan applies the selector query and scans the result into the given value.
func (gols *GenerationOutputLikeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gols.ctx, ent.OpQuerySelect)
	if err := gols.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GenerationOutputLikeQuery, *GenerationOutputLikeSelect](ctx, gols.GenerationOutputLikeQuery, gols, gols.inters, v)
}

func (gols *GenerationOutputLikeSelect) sqlScan(ctx context.Context, root *GenerationOutputLikeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(gols.fns))
	for _, fn := range gols.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*gols.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gols.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (gols *GenerationOutputLikeSelect) Modify(modifiers ...func(s *sql.Selector)) *GenerationOutputLikeSelect {
	gols.modifiers = append(gols.modifiers, modifiers...)
	return gols
}
