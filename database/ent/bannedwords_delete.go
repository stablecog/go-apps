// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stablecog/sc-go/database/ent/bannedwords"
	"github.com/stablecog/sc-go/database/ent/predicate"
)

// BannedWordsDelete is the builder for deleting a BannedWords entity.
type BannedWordsDelete struct {
	config
	hooks    []Hook
	mutation *BannedWordsMutation
}

// Where appends a list predicates to the BannedWordsDelete builder.
func (bwd *BannedWordsDelete) Where(ps ...predicate.BannedWords) *BannedWordsDelete {
	bwd.mutation.Where(ps...)
	return bwd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bwd *BannedWordsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bwd.sqlExec, bwd.mutation, bwd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bwd *BannedWordsDelete) ExecX(ctx context.Context) int {
	n, err := bwd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bwd *BannedWordsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(bannedwords.Table, sqlgraph.NewFieldSpec(bannedwords.FieldID, field.TypeUUID))
	if ps := bwd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bwd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bwd.mutation.done = true
	return affected, err
}

// BannedWordsDeleteOne is the builder for deleting a single BannedWords entity.
type BannedWordsDeleteOne struct {
	bwd *BannedWordsDelete
}

// Where appends a list predicates to the BannedWordsDelete builder.
func (bwdo *BannedWordsDeleteOne) Where(ps ...predicate.BannedWords) *BannedWordsDeleteOne {
	bwdo.bwd.mutation.Where(ps...)
	return bwdo
}

// Exec executes the deletion query.
func (bwdo *BannedWordsDeleteOne) Exec(ctx context.Context) error {
	n, err := bwdo.bwd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{bannedwords.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bwdo *BannedWordsDeleteOne) ExecX(ctx context.Context) {
	if err := bwdo.Exec(ctx); err != nil {
		panic(err)
	}
}
