// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/apitoken"
	"github.com/stablecog/sc-go/database/ent/credit"
	"github.com/stablecog/sc-go/database/ent/generation"
	"github.com/stablecog/sc-go/database/ent/generationoutputlike"
	"github.com/stablecog/sc-go/database/ent/predicate"
	"github.com/stablecog/sc-go/database/ent/role"
	"github.com/stablecog/sc-go/database/ent/tiplog"
	"github.com/stablecog/sc-go/database/ent/upscale"
	"github.com/stablecog/sc-go/database/ent/user"
	"github.com/stablecog/sc-go/database/ent/voiceover"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetStripeCustomerID sets the "stripe_customer_id" field.
func (uu *UserUpdate) SetStripeCustomerID(s string) *UserUpdate {
	uu.mutation.SetStripeCustomerID(s)
	return uu
}

// SetNillableStripeCustomerID sets the "stripe_customer_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStripeCustomerID(s *string) *UserUpdate {
	if s != nil {
		uu.SetStripeCustomerID(*s)
	}
	return uu
}

// SetActiveProductID sets the "active_product_id" field.
func (uu *UserUpdate) SetActiveProductID(s string) *UserUpdate {
	uu.mutation.SetActiveProductID(s)
	return uu
}

// SetNillableActiveProductID sets the "active_product_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableActiveProductID(s *string) *UserUpdate {
	if s != nil {
		uu.SetActiveProductID(*s)
	}
	return uu
}

// ClearActiveProductID clears the value of the "active_product_id" field.
func (uu *UserUpdate) ClearActiveProductID() *UserUpdate {
	uu.mutation.ClearActiveProductID()
	return uu
}

// SetLastSignInAt sets the "last_sign_in_at" field.
func (uu *UserUpdate) SetLastSignInAt(t time.Time) *UserUpdate {
	uu.mutation.SetLastSignInAt(t)
	return uu
}

// SetNillableLastSignInAt sets the "last_sign_in_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastSignInAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastSignInAt(*t)
	}
	return uu
}

// ClearLastSignInAt clears the value of the "last_sign_in_at" field.
func (uu *UserUpdate) ClearLastSignInAt() *UserUpdate {
	uu.mutation.ClearLastSignInAt()
	return uu
}

// SetLastSeenAt sets the "last_seen_at" field.
func (uu *UserUpdate) SetLastSeenAt(t time.Time) *UserUpdate {
	uu.mutation.SetLastSeenAt(t)
	return uu
}

// SetNillableLastSeenAt sets the "last_seen_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastSeenAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastSeenAt(*t)
	}
	return uu
}

// SetBannedAt sets the "banned_at" field.
func (uu *UserUpdate) SetBannedAt(t time.Time) *UserUpdate {
	uu.mutation.SetBannedAt(t)
	return uu
}

// SetNillableBannedAt sets the "banned_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBannedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetBannedAt(*t)
	}
	return uu
}

// ClearBannedAt clears the value of the "banned_at" field.
func (uu *UserUpdate) ClearBannedAt() *UserUpdate {
	uu.mutation.ClearBannedAt()
	return uu
}

// SetScheduledForDeletionOn sets the "scheduled_for_deletion_on" field.
func (uu *UserUpdate) SetScheduledForDeletionOn(t time.Time) *UserUpdate {
	uu.mutation.SetScheduledForDeletionOn(t)
	return uu
}

// SetNillableScheduledForDeletionOn sets the "scheduled_for_deletion_on" field if the given value is not nil.
func (uu *UserUpdate) SetNillableScheduledForDeletionOn(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetScheduledForDeletionOn(*t)
	}
	return uu
}

// ClearScheduledForDeletionOn clears the value of the "scheduled_for_deletion_on" field.
func (uu *UserUpdate) ClearScheduledForDeletionOn() *UserUpdate {
	uu.mutation.ClearScheduledForDeletionOn()
	return uu
}

// SetDataDeletedAt sets the "data_deleted_at" field.
func (uu *UserUpdate) SetDataDeletedAt(t time.Time) *UserUpdate {
	uu.mutation.SetDataDeletedAt(t)
	return uu
}

// SetNillableDataDeletedAt sets the "data_deleted_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDataDeletedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetDataDeletedAt(*t)
	}
	return uu
}

// ClearDataDeletedAt clears the value of the "data_deleted_at" field.
func (uu *UserUpdate) ClearDataDeletedAt() *UserUpdate {
	uu.mutation.ClearDataDeletedAt()
	return uu
}

// SetWantsEmail sets the "wants_email" field.
func (uu *UserUpdate) SetWantsEmail(b bool) *UserUpdate {
	uu.mutation.SetWantsEmail(b)
	return uu
}

// SetNillableWantsEmail sets the "wants_email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableWantsEmail(b *bool) *UserUpdate {
	if b != nil {
		uu.SetWantsEmail(*b)
	}
	return uu
}

// ClearWantsEmail clears the value of the "wants_email" field.
func (uu *UserUpdate) ClearWantsEmail() *UserUpdate {
	uu.mutation.ClearWantsEmail()
	return uu
}

// SetDiscordID sets the "discord_id" field.
func (uu *UserUpdate) SetDiscordID(s string) *UserUpdate {
	uu.mutation.SetDiscordID(s)
	return uu
}

// SetNillableDiscordID sets the "discord_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDiscordID(s *string) *UserUpdate {
	if s != nil {
		uu.SetDiscordID(*s)
	}
	return uu
}

// ClearDiscordID clears the value of the "discord_id" field.
func (uu *UserUpdate) ClearDiscordID() *UserUpdate {
	uu.mutation.ClearDiscordID()
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// SetUsernameChangedAt sets the "username_changed_at" field.
func (uu *UserUpdate) SetUsernameChangedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUsernameChangedAt(t)
	return uu
}

// SetNillableUsernameChangedAt sets the "username_changed_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsernameChangedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetUsernameChangedAt(*t)
	}
	return uu
}

// ClearUsernameChangedAt clears the value of the "username_changed_at" field.
func (uu *UserUpdate) ClearUsernameChangedAt() *UserUpdate {
	uu.mutation.ClearUsernameChangedAt()
	return uu
}

// SetStripeHighestProductID sets the "stripe_highest_product_id" field.
func (uu *UserUpdate) SetStripeHighestProductID(s string) *UserUpdate {
	uu.mutation.SetStripeHighestProductID(s)
	return uu
}

// SetNillableStripeHighestProductID sets the "stripe_highest_product_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStripeHighestProductID(s *string) *UserUpdate {
	if s != nil {
		uu.SetStripeHighestProductID(*s)
	}
	return uu
}

// ClearStripeHighestProductID clears the value of the "stripe_highest_product_id" field.
func (uu *UserUpdate) ClearStripeHighestProductID() *UserUpdate {
	uu.mutation.ClearStripeHighestProductID()
	return uu
}

// SetStripeHighestPriceID sets the "stripe_highest_price_id" field.
func (uu *UserUpdate) SetStripeHighestPriceID(s string) *UserUpdate {
	uu.mutation.SetStripeHighestPriceID(s)
	return uu
}

// SetNillableStripeHighestPriceID sets the "stripe_highest_price_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStripeHighestPriceID(s *string) *UserUpdate {
	if s != nil {
		uu.SetStripeHighestPriceID(*s)
	}
	return uu
}

// ClearStripeHighestPriceID clears the value of the "stripe_highest_price_id" field.
func (uu *UserUpdate) ClearStripeHighestPriceID() *UserUpdate {
	uu.mutation.ClearStripeHighestPriceID()
	return uu
}

// SetStripeCancelsAt sets the "stripe_cancels_at" field.
func (uu *UserUpdate) SetStripeCancelsAt(t time.Time) *UserUpdate {
	uu.mutation.SetStripeCancelsAt(t)
	return uu
}

// SetNillableStripeCancelsAt sets the "stripe_cancels_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStripeCancelsAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetStripeCancelsAt(*t)
	}
	return uu
}

// ClearStripeCancelsAt clears the value of the "stripe_cancels_at" field.
func (uu *UserUpdate) ClearStripeCancelsAt() *UserUpdate {
	uu.mutation.ClearStripeCancelsAt()
	return uu
}

// SetStripeRenewsAt sets the "stripe_renews_at" field.
func (uu *UserUpdate) SetStripeRenewsAt(t time.Time) *UserUpdate {
	uu.mutation.SetStripeRenewsAt(t)
	return uu
}

// SetNillableStripeRenewsAt sets the "stripe_renews_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStripeRenewsAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetStripeRenewsAt(*t)
	}
	return uu
}

// ClearStripeRenewsAt clears the value of the "stripe_renews_at" field.
func (uu *UserUpdate) ClearStripeRenewsAt() *UserUpdate {
	uu.mutation.ClearStripeRenewsAt()
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// AddGenerationIDs adds the "generations" edge to the Generation entity by IDs.
func (uu *UserUpdate) AddGenerationIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddGenerationIDs(ids...)
	return uu
}

// AddGenerations adds the "generations" edges to the Generation entity.
func (uu *UserUpdate) AddGenerations(g ...*Generation) *UserUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddGenerationIDs(ids...)
}

// AddUpscaleIDs adds the "upscales" edge to the Upscale entity by IDs.
func (uu *UserUpdate) AddUpscaleIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddUpscaleIDs(ids...)
	return uu
}

// AddUpscales adds the "upscales" edges to the Upscale entity.
func (uu *UserUpdate) AddUpscales(u ...*Upscale) *UserUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUpscaleIDs(ids...)
}

// AddVoiceoverIDs adds the "voiceovers" edge to the Voiceover entity by IDs.
func (uu *UserUpdate) AddVoiceoverIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddVoiceoverIDs(ids...)
	return uu
}

// AddVoiceovers adds the "voiceovers" edges to the Voiceover entity.
func (uu *UserUpdate) AddVoiceovers(v ...*Voiceover) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uu.AddVoiceoverIDs(ids...)
}

// AddCreditIDs adds the "credits" edge to the Credit entity by IDs.
func (uu *UserUpdate) AddCreditIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddCreditIDs(ids...)
	return uu
}

// AddCredits adds the "credits" edges to the Credit entity.
func (uu *UserUpdate) AddCredits(c ...*Credit) *UserUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCreditIDs(ids...)
}

// AddAPITokenIDs adds the "api_tokens" edge to the ApiToken entity by IDs.
func (uu *UserUpdate) AddAPITokenIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddAPITokenIDs(ids...)
	return uu
}

// AddAPITokens adds the "api_tokens" edges to the ApiToken entity.
func (uu *UserUpdate) AddAPITokens(a ...*ApiToken) *UserUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAPITokenIDs(ids...)
}

// AddTipsGivenIDs adds the "tips_given" edge to the TipLog entity by IDs.
func (uu *UserUpdate) AddTipsGivenIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddTipsGivenIDs(ids...)
	return uu
}

// AddTipsGiven adds the "tips_given" edges to the TipLog entity.
func (uu *UserUpdate) AddTipsGiven(t ...*TipLog) *UserUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddTipsGivenIDs(ids...)
}

// AddTipsReceivedIDs adds the "tips_received" edge to the TipLog entity by IDs.
func (uu *UserUpdate) AddTipsReceivedIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddTipsReceivedIDs(ids...)
	return uu
}

// AddTipsReceived adds the "tips_received" edges to the TipLog entity.
func (uu *UserUpdate) AddTipsReceived(t ...*TipLog) *UserUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddTipsReceivedIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (uu *UserUpdate) AddRoleIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddRoleIDs(ids...)
	return uu
}

// AddRoles adds the "roles" edges to the Role entity.
func (uu *UserUpdate) AddRoles(r ...*Role) *UserUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddRoleIDs(ids...)
}

// AddGenerationOutputLikeIDs adds the "generation_output_likes" edge to the GenerationOutputLike entity by IDs.
func (uu *UserUpdate) AddGenerationOutputLikeIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddGenerationOutputLikeIDs(ids...)
	return uu
}

// AddGenerationOutputLikes adds the "generation_output_likes" edges to the GenerationOutputLike entity.
func (uu *UserUpdate) AddGenerationOutputLikes(g ...*GenerationOutputLike) *UserUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddGenerationOutputLikeIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearGenerations clears all "generations" edges to the Generation entity.
func (uu *UserUpdate) ClearGenerations() *UserUpdate {
	uu.mutation.ClearGenerations()
	return uu
}

// RemoveGenerationIDs removes the "generations" edge to Generation entities by IDs.
func (uu *UserUpdate) RemoveGenerationIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveGenerationIDs(ids...)
	return uu
}

// RemoveGenerations removes "generations" edges to Generation entities.
func (uu *UserUpdate) RemoveGenerations(g ...*Generation) *UserUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveGenerationIDs(ids...)
}

// ClearUpscales clears all "upscales" edges to the Upscale entity.
func (uu *UserUpdate) ClearUpscales() *UserUpdate {
	uu.mutation.ClearUpscales()
	return uu
}

// RemoveUpscaleIDs removes the "upscales" edge to Upscale entities by IDs.
func (uu *UserUpdate) RemoveUpscaleIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveUpscaleIDs(ids...)
	return uu
}

// RemoveUpscales removes "upscales" edges to Upscale entities.
func (uu *UserUpdate) RemoveUpscales(u ...*Upscale) *UserUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUpscaleIDs(ids...)
}

// ClearVoiceovers clears all "voiceovers" edges to the Voiceover entity.
func (uu *UserUpdate) ClearVoiceovers() *UserUpdate {
	uu.mutation.ClearVoiceovers()
	return uu
}

// RemoveVoiceoverIDs removes the "voiceovers" edge to Voiceover entities by IDs.
func (uu *UserUpdate) RemoveVoiceoverIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveVoiceoverIDs(ids...)
	return uu
}

// RemoveVoiceovers removes "voiceovers" edges to Voiceover entities.
func (uu *UserUpdate) RemoveVoiceovers(v ...*Voiceover) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uu.RemoveVoiceoverIDs(ids...)
}

// ClearCredits clears all "credits" edges to the Credit entity.
func (uu *UserUpdate) ClearCredits() *UserUpdate {
	uu.mutation.ClearCredits()
	return uu
}

// RemoveCreditIDs removes the "credits" edge to Credit entities by IDs.
func (uu *UserUpdate) RemoveCreditIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveCreditIDs(ids...)
	return uu
}

// RemoveCredits removes "credits" edges to Credit entities.
func (uu *UserUpdate) RemoveCredits(c ...*Credit) *UserUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCreditIDs(ids...)
}

// ClearAPITokens clears all "api_tokens" edges to the ApiToken entity.
func (uu *UserUpdate) ClearAPITokens() *UserUpdate {
	uu.mutation.ClearAPITokens()
	return uu
}

// RemoveAPITokenIDs removes the "api_tokens" edge to ApiToken entities by IDs.
func (uu *UserUpdate) RemoveAPITokenIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveAPITokenIDs(ids...)
	return uu
}

// RemoveAPITokens removes "api_tokens" edges to ApiToken entities.
func (uu *UserUpdate) RemoveAPITokens(a ...*ApiToken) *UserUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAPITokenIDs(ids...)
}

// ClearTipsGiven clears all "tips_given" edges to the TipLog entity.
func (uu *UserUpdate) ClearTipsGiven() *UserUpdate {
	uu.mutation.ClearTipsGiven()
	return uu
}

// RemoveTipsGivenIDs removes the "tips_given" edge to TipLog entities by IDs.
func (uu *UserUpdate) RemoveTipsGivenIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveTipsGivenIDs(ids...)
	return uu
}

// RemoveTipsGiven removes "tips_given" edges to TipLog entities.
func (uu *UserUpdate) RemoveTipsGiven(t ...*TipLog) *UserUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveTipsGivenIDs(ids...)
}

// ClearTipsReceived clears all "tips_received" edges to the TipLog entity.
func (uu *UserUpdate) ClearTipsReceived() *UserUpdate {
	uu.mutation.ClearTipsReceived()
	return uu
}

// RemoveTipsReceivedIDs removes the "tips_received" edge to TipLog entities by IDs.
func (uu *UserUpdate) RemoveTipsReceivedIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveTipsReceivedIDs(ids...)
	return uu
}

// RemoveTipsReceived removes "tips_received" edges to TipLog entities.
func (uu *UserUpdate) RemoveTipsReceived(t ...*TipLog) *UserUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveTipsReceivedIDs(ids...)
}

// ClearRoles clears all "roles" edges to the Role entity.
func (uu *UserUpdate) ClearRoles() *UserUpdate {
	uu.mutation.ClearRoles()
	return uu
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (uu *UserUpdate) RemoveRoleIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveRoleIDs(ids...)
	return uu
}

// RemoveRoles removes "roles" edges to Role entities.
func (uu *UserUpdate) RemoveRoles(r ...*Role) *UserUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveRoleIDs(ids...)
}

// ClearGenerationOutputLikes clears all "generation_output_likes" edges to the GenerationOutputLike entity.
func (uu *UserUpdate) ClearGenerationOutputLikes() *UserUpdate {
	uu.mutation.ClearGenerationOutputLikes()
	return uu
}

// RemoveGenerationOutputLikeIDs removes the "generation_output_likes" edge to GenerationOutputLike entities by IDs.
func (uu *UserUpdate) RemoveGenerationOutputLikeIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveGenerationOutputLikeIDs(ids...)
	return uu
}

// RemoveGenerationOutputLikes removes "generation_output_likes" edges to GenerationOutputLike entities.
func (uu *UserUpdate) RemoveGenerationOutputLikes(g ...*GenerationOutputLike) *UserUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveGenerationOutputLikeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uu *UserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdate {
	uu.modifiers = append(uu.modifiers, modifiers...)
	return uu
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.StripeCustomerID(); ok {
		_spec.SetField(user.FieldStripeCustomerID, field.TypeString, value)
	}
	if value, ok := uu.mutation.ActiveProductID(); ok {
		_spec.SetField(user.FieldActiveProductID, field.TypeString, value)
	}
	if uu.mutation.ActiveProductIDCleared() {
		_spec.ClearField(user.FieldActiveProductID, field.TypeString)
	}
	if value, ok := uu.mutation.LastSignInAt(); ok {
		_spec.SetField(user.FieldLastSignInAt, field.TypeTime, value)
	}
	if uu.mutation.LastSignInAtCleared() {
		_spec.ClearField(user.FieldLastSignInAt, field.TypeTime)
	}
	if value, ok := uu.mutation.LastSeenAt(); ok {
		_spec.SetField(user.FieldLastSeenAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.BannedAt(); ok {
		_spec.SetField(user.FieldBannedAt, field.TypeTime, value)
	}
	if uu.mutation.BannedAtCleared() {
		_spec.ClearField(user.FieldBannedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.ScheduledForDeletionOn(); ok {
		_spec.SetField(user.FieldScheduledForDeletionOn, field.TypeTime, value)
	}
	if uu.mutation.ScheduledForDeletionOnCleared() {
		_spec.ClearField(user.FieldScheduledForDeletionOn, field.TypeTime)
	}
	if value, ok := uu.mutation.DataDeletedAt(); ok {
		_spec.SetField(user.FieldDataDeletedAt, field.TypeTime, value)
	}
	if uu.mutation.DataDeletedAtCleared() {
		_spec.ClearField(user.FieldDataDeletedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.WantsEmail(); ok {
		_spec.SetField(user.FieldWantsEmail, field.TypeBool, value)
	}
	if uu.mutation.WantsEmailCleared() {
		_spec.ClearField(user.FieldWantsEmail, field.TypeBool)
	}
	if value, ok := uu.mutation.DiscordID(); ok {
		_spec.SetField(user.FieldDiscordID, field.TypeString, value)
	}
	if uu.mutation.DiscordIDCleared() {
		_spec.ClearField(user.FieldDiscordID, field.TypeString)
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.UsernameChangedAt(); ok {
		_spec.SetField(user.FieldUsernameChangedAt, field.TypeTime, value)
	}
	if uu.mutation.UsernameChangedAtCleared() {
		_spec.ClearField(user.FieldUsernameChangedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.StripeHighestProductID(); ok {
		_spec.SetField(user.FieldStripeHighestProductID, field.TypeString, value)
	}
	if uu.mutation.StripeHighestProductIDCleared() {
		_spec.ClearField(user.FieldStripeHighestProductID, field.TypeString)
	}
	if value, ok := uu.mutation.StripeHighestPriceID(); ok {
		_spec.SetField(user.FieldStripeHighestPriceID, field.TypeString, value)
	}
	if uu.mutation.StripeHighestPriceIDCleared() {
		_spec.ClearField(user.FieldStripeHighestPriceID, field.TypeString)
	}
	if value, ok := uu.mutation.StripeCancelsAt(); ok {
		_spec.SetField(user.FieldStripeCancelsAt, field.TypeTime, value)
	}
	if uu.mutation.StripeCancelsAtCleared() {
		_spec.ClearField(user.FieldStripeCancelsAt, field.TypeTime)
	}
	if value, ok := uu.mutation.StripeRenewsAt(); ok {
		_spec.SetField(user.FieldStripeRenewsAt, field.TypeTime, value)
	}
	if uu.mutation.StripeRenewsAtCleared() {
		_spec.ClearField(user.FieldStripeRenewsAt, field.TypeTime)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uu.mutation.GenerationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GenerationsTable,
			Columns: []string{user.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedGenerationsIDs(); len(nodes) > 0 && !uu.mutation.GenerationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GenerationsTable,
			Columns: []string{user.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.GenerationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GenerationsTable,
			Columns: []string{user.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UpscalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpscalesTable,
			Columns: []string{user.UpscalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upscale.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUpscalesIDs(); len(nodes) > 0 && !uu.mutation.UpscalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpscalesTable,
			Columns: []string{user.UpscalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upscale.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UpscalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpscalesTable,
			Columns: []string{user.UpscalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upscale.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.VoiceoversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VoiceoversTable,
			Columns: []string{user.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceover.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedVoiceoversIDs(); len(nodes) > 0 && !uu.mutation.VoiceoversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VoiceoversTable,
			Columns: []string{user.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.VoiceoversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VoiceoversTable,
			Columns: []string{user.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CreditsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreditsTable,
			Columns: []string{user.CreditsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCreditsIDs(); len(nodes) > 0 && !uu.mutation.CreditsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreditsTable,
			Columns: []string{user.CreditsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CreditsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreditsTable,
			Columns: []string{user.CreditsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.APITokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APITokensTable,
			Columns: []string{user.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAPITokensIDs(); len(nodes) > 0 && !uu.mutation.APITokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APITokensTable,
			Columns: []string{user.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.APITokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APITokensTable,
			Columns: []string{user.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TipsGivenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TipsGivenTable,
			Columns: []string{user.TipsGivenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tiplog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTipsGivenIDs(); len(nodes) > 0 && !uu.mutation.TipsGivenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TipsGivenTable,
			Columns: []string{user.TipsGivenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tiplog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TipsGivenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TipsGivenTable,
			Columns: []string{user.TipsGivenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tiplog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TipsReceivedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TipsReceivedTable,
			Columns: []string{user.TipsReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tiplog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTipsReceivedIDs(); len(nodes) > 0 && !uu.mutation.TipsReceivedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TipsReceivedTable,
			Columns: []string{user.TipsReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tiplog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TipsReceivedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TipsReceivedTable,
			Columns: []string{user.TipsReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tiplog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !uu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.GenerationOutputLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GenerationOutputLikesTable,
			Columns: []string{user.GenerationOutputLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generationoutputlike.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedGenerationOutputLikesIDs(); len(nodes) > 0 && !uu.mutation.GenerationOutputLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GenerationOutputLikesTable,
			Columns: []string{user.GenerationOutputLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generationoutputlike.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.GenerationOutputLikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GenerationOutputLikesTable,
			Columns: []string{user.GenerationOutputLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generationoutputlike.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetStripeCustomerID sets the "stripe_customer_id" field.
func (uuo *UserUpdateOne) SetStripeCustomerID(s string) *UserUpdateOne {
	uuo.mutation.SetStripeCustomerID(s)
	return uuo
}

// SetNillableStripeCustomerID sets the "stripe_customer_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStripeCustomerID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetStripeCustomerID(*s)
	}
	return uuo
}

// SetActiveProductID sets the "active_product_id" field.
func (uuo *UserUpdateOne) SetActiveProductID(s string) *UserUpdateOne {
	uuo.mutation.SetActiveProductID(s)
	return uuo
}

// SetNillableActiveProductID sets the "active_product_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableActiveProductID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetActiveProductID(*s)
	}
	return uuo
}

// ClearActiveProductID clears the value of the "active_product_id" field.
func (uuo *UserUpdateOne) ClearActiveProductID() *UserUpdateOne {
	uuo.mutation.ClearActiveProductID()
	return uuo
}

// SetLastSignInAt sets the "last_sign_in_at" field.
func (uuo *UserUpdateOne) SetLastSignInAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastSignInAt(t)
	return uuo
}

// SetNillableLastSignInAt sets the "last_sign_in_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastSignInAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastSignInAt(*t)
	}
	return uuo
}

// ClearLastSignInAt clears the value of the "last_sign_in_at" field.
func (uuo *UserUpdateOne) ClearLastSignInAt() *UserUpdateOne {
	uuo.mutation.ClearLastSignInAt()
	return uuo
}

// SetLastSeenAt sets the "last_seen_at" field.
func (uuo *UserUpdateOne) SetLastSeenAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastSeenAt(t)
	return uuo
}

// SetNillableLastSeenAt sets the "last_seen_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastSeenAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastSeenAt(*t)
	}
	return uuo
}

// SetBannedAt sets the "banned_at" field.
func (uuo *UserUpdateOne) SetBannedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetBannedAt(t)
	return uuo
}

// SetNillableBannedAt sets the "banned_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBannedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetBannedAt(*t)
	}
	return uuo
}

// ClearBannedAt clears the value of the "banned_at" field.
func (uuo *UserUpdateOne) ClearBannedAt() *UserUpdateOne {
	uuo.mutation.ClearBannedAt()
	return uuo
}

// SetScheduledForDeletionOn sets the "scheduled_for_deletion_on" field.
func (uuo *UserUpdateOne) SetScheduledForDeletionOn(t time.Time) *UserUpdateOne {
	uuo.mutation.SetScheduledForDeletionOn(t)
	return uuo
}

// SetNillableScheduledForDeletionOn sets the "scheduled_for_deletion_on" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableScheduledForDeletionOn(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetScheduledForDeletionOn(*t)
	}
	return uuo
}

// ClearScheduledForDeletionOn clears the value of the "scheduled_for_deletion_on" field.
func (uuo *UserUpdateOne) ClearScheduledForDeletionOn() *UserUpdateOne {
	uuo.mutation.ClearScheduledForDeletionOn()
	return uuo
}

// SetDataDeletedAt sets the "data_deleted_at" field.
func (uuo *UserUpdateOne) SetDataDeletedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetDataDeletedAt(t)
	return uuo
}

// SetNillableDataDeletedAt sets the "data_deleted_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDataDeletedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetDataDeletedAt(*t)
	}
	return uuo
}

// ClearDataDeletedAt clears the value of the "data_deleted_at" field.
func (uuo *UserUpdateOne) ClearDataDeletedAt() *UserUpdateOne {
	uuo.mutation.ClearDataDeletedAt()
	return uuo
}

// SetWantsEmail sets the "wants_email" field.
func (uuo *UserUpdateOne) SetWantsEmail(b bool) *UserUpdateOne {
	uuo.mutation.SetWantsEmail(b)
	return uuo
}

// SetNillableWantsEmail sets the "wants_email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableWantsEmail(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetWantsEmail(*b)
	}
	return uuo
}

// ClearWantsEmail clears the value of the "wants_email" field.
func (uuo *UserUpdateOne) ClearWantsEmail() *UserUpdateOne {
	uuo.mutation.ClearWantsEmail()
	return uuo
}

// SetDiscordID sets the "discord_id" field.
func (uuo *UserUpdateOne) SetDiscordID(s string) *UserUpdateOne {
	uuo.mutation.SetDiscordID(s)
	return uuo
}

// SetNillableDiscordID sets the "discord_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDiscordID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDiscordID(*s)
	}
	return uuo
}

// ClearDiscordID clears the value of the "discord_id" field.
func (uuo *UserUpdateOne) ClearDiscordID() *UserUpdateOne {
	uuo.mutation.ClearDiscordID()
	return uuo
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// SetUsernameChangedAt sets the "username_changed_at" field.
func (uuo *UserUpdateOne) SetUsernameChangedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUsernameChangedAt(t)
	return uuo
}

// SetNillableUsernameChangedAt sets the "username_changed_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsernameChangedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetUsernameChangedAt(*t)
	}
	return uuo
}

// ClearUsernameChangedAt clears the value of the "username_changed_at" field.
func (uuo *UserUpdateOne) ClearUsernameChangedAt() *UserUpdateOne {
	uuo.mutation.ClearUsernameChangedAt()
	return uuo
}

// SetStripeHighestProductID sets the "stripe_highest_product_id" field.
func (uuo *UserUpdateOne) SetStripeHighestProductID(s string) *UserUpdateOne {
	uuo.mutation.SetStripeHighestProductID(s)
	return uuo
}

// SetNillableStripeHighestProductID sets the "stripe_highest_product_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStripeHighestProductID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetStripeHighestProductID(*s)
	}
	return uuo
}

// ClearStripeHighestProductID clears the value of the "stripe_highest_product_id" field.
func (uuo *UserUpdateOne) ClearStripeHighestProductID() *UserUpdateOne {
	uuo.mutation.ClearStripeHighestProductID()
	return uuo
}

// SetStripeHighestPriceID sets the "stripe_highest_price_id" field.
func (uuo *UserUpdateOne) SetStripeHighestPriceID(s string) *UserUpdateOne {
	uuo.mutation.SetStripeHighestPriceID(s)
	return uuo
}

// SetNillableStripeHighestPriceID sets the "stripe_highest_price_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStripeHighestPriceID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetStripeHighestPriceID(*s)
	}
	return uuo
}

// ClearStripeHighestPriceID clears the value of the "stripe_highest_price_id" field.
func (uuo *UserUpdateOne) ClearStripeHighestPriceID() *UserUpdateOne {
	uuo.mutation.ClearStripeHighestPriceID()
	return uuo
}

// SetStripeCancelsAt sets the "stripe_cancels_at" field.
func (uuo *UserUpdateOne) SetStripeCancelsAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetStripeCancelsAt(t)
	return uuo
}

// SetNillableStripeCancelsAt sets the "stripe_cancels_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStripeCancelsAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetStripeCancelsAt(*t)
	}
	return uuo
}

// ClearStripeCancelsAt clears the value of the "stripe_cancels_at" field.
func (uuo *UserUpdateOne) ClearStripeCancelsAt() *UserUpdateOne {
	uuo.mutation.ClearStripeCancelsAt()
	return uuo
}

// SetStripeRenewsAt sets the "stripe_renews_at" field.
func (uuo *UserUpdateOne) SetStripeRenewsAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetStripeRenewsAt(t)
	return uuo
}

// SetNillableStripeRenewsAt sets the "stripe_renews_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStripeRenewsAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetStripeRenewsAt(*t)
	}
	return uuo
}

// ClearStripeRenewsAt clears the value of the "stripe_renews_at" field.
func (uuo *UserUpdateOne) ClearStripeRenewsAt() *UserUpdateOne {
	uuo.mutation.ClearStripeRenewsAt()
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// AddGenerationIDs adds the "generations" edge to the Generation entity by IDs.
func (uuo *UserUpdateOne) AddGenerationIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddGenerationIDs(ids...)
	return uuo
}

// AddGenerations adds the "generations" edges to the Generation entity.
func (uuo *UserUpdateOne) AddGenerations(g ...*Generation) *UserUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddGenerationIDs(ids...)
}

// AddUpscaleIDs adds the "upscales" edge to the Upscale entity by IDs.
func (uuo *UserUpdateOne) AddUpscaleIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddUpscaleIDs(ids...)
	return uuo
}

// AddUpscales adds the "upscales" edges to the Upscale entity.
func (uuo *UserUpdateOne) AddUpscales(u ...*Upscale) *UserUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUpscaleIDs(ids...)
}

// AddVoiceoverIDs adds the "voiceovers" edge to the Voiceover entity by IDs.
func (uuo *UserUpdateOne) AddVoiceoverIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddVoiceoverIDs(ids...)
	return uuo
}

// AddVoiceovers adds the "voiceovers" edges to the Voiceover entity.
func (uuo *UserUpdateOne) AddVoiceovers(v ...*Voiceover) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uuo.AddVoiceoverIDs(ids...)
}

// AddCreditIDs adds the "credits" edge to the Credit entity by IDs.
func (uuo *UserUpdateOne) AddCreditIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddCreditIDs(ids...)
	return uuo
}

// AddCredits adds the "credits" edges to the Credit entity.
func (uuo *UserUpdateOne) AddCredits(c ...*Credit) *UserUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCreditIDs(ids...)
}

// AddAPITokenIDs adds the "api_tokens" edge to the ApiToken entity by IDs.
func (uuo *UserUpdateOne) AddAPITokenIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddAPITokenIDs(ids...)
	return uuo
}

// AddAPITokens adds the "api_tokens" edges to the ApiToken entity.
func (uuo *UserUpdateOne) AddAPITokens(a ...*ApiToken) *UserUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAPITokenIDs(ids...)
}

// AddTipsGivenIDs adds the "tips_given" edge to the TipLog entity by IDs.
func (uuo *UserUpdateOne) AddTipsGivenIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddTipsGivenIDs(ids...)
	return uuo
}

// AddTipsGiven adds the "tips_given" edges to the TipLog entity.
func (uuo *UserUpdateOne) AddTipsGiven(t ...*TipLog) *UserUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddTipsGivenIDs(ids...)
}

// AddTipsReceivedIDs adds the "tips_received" edge to the TipLog entity by IDs.
func (uuo *UserUpdateOne) AddTipsReceivedIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddTipsReceivedIDs(ids...)
	return uuo
}

// AddTipsReceived adds the "tips_received" edges to the TipLog entity.
func (uuo *UserUpdateOne) AddTipsReceived(t ...*TipLog) *UserUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddTipsReceivedIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (uuo *UserUpdateOne) AddRoleIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddRoleIDs(ids...)
	return uuo
}

// AddRoles adds the "roles" edges to the Role entity.
func (uuo *UserUpdateOne) AddRoles(r ...*Role) *UserUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddRoleIDs(ids...)
}

// AddGenerationOutputLikeIDs adds the "generation_output_likes" edge to the GenerationOutputLike entity by IDs.
func (uuo *UserUpdateOne) AddGenerationOutputLikeIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddGenerationOutputLikeIDs(ids...)
	return uuo
}

// AddGenerationOutputLikes adds the "generation_output_likes" edges to the GenerationOutputLike entity.
func (uuo *UserUpdateOne) AddGenerationOutputLikes(g ...*GenerationOutputLike) *UserUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddGenerationOutputLikeIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearGenerations clears all "generations" edges to the Generation entity.
func (uuo *UserUpdateOne) ClearGenerations() *UserUpdateOne {
	uuo.mutation.ClearGenerations()
	return uuo
}

// RemoveGenerationIDs removes the "generations" edge to Generation entities by IDs.
func (uuo *UserUpdateOne) RemoveGenerationIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveGenerationIDs(ids...)
	return uuo
}

// RemoveGenerations removes "generations" edges to Generation entities.
func (uuo *UserUpdateOne) RemoveGenerations(g ...*Generation) *UserUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveGenerationIDs(ids...)
}

// ClearUpscales clears all "upscales" edges to the Upscale entity.
func (uuo *UserUpdateOne) ClearUpscales() *UserUpdateOne {
	uuo.mutation.ClearUpscales()
	return uuo
}

// RemoveUpscaleIDs removes the "upscales" edge to Upscale entities by IDs.
func (uuo *UserUpdateOne) RemoveUpscaleIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveUpscaleIDs(ids...)
	return uuo
}

// RemoveUpscales removes "upscales" edges to Upscale entities.
func (uuo *UserUpdateOne) RemoveUpscales(u ...*Upscale) *UserUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUpscaleIDs(ids...)
}

// ClearVoiceovers clears all "voiceovers" edges to the Voiceover entity.
func (uuo *UserUpdateOne) ClearVoiceovers() *UserUpdateOne {
	uuo.mutation.ClearVoiceovers()
	return uuo
}

// RemoveVoiceoverIDs removes the "voiceovers" edge to Voiceover entities by IDs.
func (uuo *UserUpdateOne) RemoveVoiceoverIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveVoiceoverIDs(ids...)
	return uuo
}

// RemoveVoiceovers removes "voiceovers" edges to Voiceover entities.
func (uuo *UserUpdateOne) RemoveVoiceovers(v ...*Voiceover) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uuo.RemoveVoiceoverIDs(ids...)
}

// ClearCredits clears all "credits" edges to the Credit entity.
func (uuo *UserUpdateOne) ClearCredits() *UserUpdateOne {
	uuo.mutation.ClearCredits()
	return uuo
}

// RemoveCreditIDs removes the "credits" edge to Credit entities by IDs.
func (uuo *UserUpdateOne) RemoveCreditIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveCreditIDs(ids...)
	return uuo
}

// RemoveCredits removes "credits" edges to Credit entities.
func (uuo *UserUpdateOne) RemoveCredits(c ...*Credit) *UserUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCreditIDs(ids...)
}

// ClearAPITokens clears all "api_tokens" edges to the ApiToken entity.
func (uuo *UserUpdateOne) ClearAPITokens() *UserUpdateOne {
	uuo.mutation.ClearAPITokens()
	return uuo
}

// RemoveAPITokenIDs removes the "api_tokens" edge to ApiToken entities by IDs.
func (uuo *UserUpdateOne) RemoveAPITokenIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveAPITokenIDs(ids...)
	return uuo
}

// RemoveAPITokens removes "api_tokens" edges to ApiToken entities.
func (uuo *UserUpdateOne) RemoveAPITokens(a ...*ApiToken) *UserUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAPITokenIDs(ids...)
}

// ClearTipsGiven clears all "tips_given" edges to the TipLog entity.
func (uuo *UserUpdateOne) ClearTipsGiven() *UserUpdateOne {
	uuo.mutation.ClearTipsGiven()
	return uuo
}

// RemoveTipsGivenIDs removes the "tips_given" edge to TipLog entities by IDs.
func (uuo *UserUpdateOne) RemoveTipsGivenIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveTipsGivenIDs(ids...)
	return uuo
}

// RemoveTipsGiven removes "tips_given" edges to TipLog entities.
func (uuo *UserUpdateOne) RemoveTipsGiven(t ...*TipLog) *UserUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveTipsGivenIDs(ids...)
}

// ClearTipsReceived clears all "tips_received" edges to the TipLog entity.
func (uuo *UserUpdateOne) ClearTipsReceived() *UserUpdateOne {
	uuo.mutation.ClearTipsReceived()
	return uuo
}

// RemoveTipsReceivedIDs removes the "tips_received" edge to TipLog entities by IDs.
func (uuo *UserUpdateOne) RemoveTipsReceivedIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveTipsReceivedIDs(ids...)
	return uuo
}

// RemoveTipsReceived removes "tips_received" edges to TipLog entities.
func (uuo *UserUpdateOne) RemoveTipsReceived(t ...*TipLog) *UserUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveTipsReceivedIDs(ids...)
}

// ClearRoles clears all "roles" edges to the Role entity.
func (uuo *UserUpdateOne) ClearRoles() *UserUpdateOne {
	uuo.mutation.ClearRoles()
	return uuo
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (uuo *UserUpdateOne) RemoveRoleIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveRoleIDs(ids...)
	return uuo
}

// RemoveRoles removes "roles" edges to Role entities.
func (uuo *UserUpdateOne) RemoveRoles(r ...*Role) *UserUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveRoleIDs(ids...)
}

// ClearGenerationOutputLikes clears all "generation_output_likes" edges to the GenerationOutputLike entity.
func (uuo *UserUpdateOne) ClearGenerationOutputLikes() *UserUpdateOne {
	uuo.mutation.ClearGenerationOutputLikes()
	return uuo
}

// RemoveGenerationOutputLikeIDs removes the "generation_output_likes" edge to GenerationOutputLike entities by IDs.
func (uuo *UserUpdateOne) RemoveGenerationOutputLikeIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveGenerationOutputLikeIDs(ids...)
	return uuo
}

// RemoveGenerationOutputLikes removes "generation_output_likes" edges to GenerationOutputLike entities.
func (uuo *UserUpdateOne) RemoveGenerationOutputLikes(g ...*GenerationOutputLike) *UserUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveGenerationOutputLikeIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uuo *UserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdateOne {
	uuo.modifiers = append(uuo.modifiers, modifiers...)
	return uuo
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.StripeCustomerID(); ok {
		_spec.SetField(user.FieldStripeCustomerID, field.TypeString, value)
	}
	if value, ok := uuo.mutation.ActiveProductID(); ok {
		_spec.SetField(user.FieldActiveProductID, field.TypeString, value)
	}
	if uuo.mutation.ActiveProductIDCleared() {
		_spec.ClearField(user.FieldActiveProductID, field.TypeString)
	}
	if value, ok := uuo.mutation.LastSignInAt(); ok {
		_spec.SetField(user.FieldLastSignInAt, field.TypeTime, value)
	}
	if uuo.mutation.LastSignInAtCleared() {
		_spec.ClearField(user.FieldLastSignInAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.LastSeenAt(); ok {
		_spec.SetField(user.FieldLastSeenAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.BannedAt(); ok {
		_spec.SetField(user.FieldBannedAt, field.TypeTime, value)
	}
	if uuo.mutation.BannedAtCleared() {
		_spec.ClearField(user.FieldBannedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.ScheduledForDeletionOn(); ok {
		_spec.SetField(user.FieldScheduledForDeletionOn, field.TypeTime, value)
	}
	if uuo.mutation.ScheduledForDeletionOnCleared() {
		_spec.ClearField(user.FieldScheduledForDeletionOn, field.TypeTime)
	}
	if value, ok := uuo.mutation.DataDeletedAt(); ok {
		_spec.SetField(user.FieldDataDeletedAt, field.TypeTime, value)
	}
	if uuo.mutation.DataDeletedAtCleared() {
		_spec.ClearField(user.FieldDataDeletedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.WantsEmail(); ok {
		_spec.SetField(user.FieldWantsEmail, field.TypeBool, value)
	}
	if uuo.mutation.WantsEmailCleared() {
		_spec.ClearField(user.FieldWantsEmail, field.TypeBool)
	}
	if value, ok := uuo.mutation.DiscordID(); ok {
		_spec.SetField(user.FieldDiscordID, field.TypeString, value)
	}
	if uuo.mutation.DiscordIDCleared() {
		_spec.ClearField(user.FieldDiscordID, field.TypeString)
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.UsernameChangedAt(); ok {
		_spec.SetField(user.FieldUsernameChangedAt, field.TypeTime, value)
	}
	if uuo.mutation.UsernameChangedAtCleared() {
		_spec.ClearField(user.FieldUsernameChangedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.StripeHighestProductID(); ok {
		_spec.SetField(user.FieldStripeHighestProductID, field.TypeString, value)
	}
	if uuo.mutation.StripeHighestProductIDCleared() {
		_spec.ClearField(user.FieldStripeHighestProductID, field.TypeString)
	}
	if value, ok := uuo.mutation.StripeHighestPriceID(); ok {
		_spec.SetField(user.FieldStripeHighestPriceID, field.TypeString, value)
	}
	if uuo.mutation.StripeHighestPriceIDCleared() {
		_spec.ClearField(user.FieldStripeHighestPriceID, field.TypeString)
	}
	if value, ok := uuo.mutation.StripeCancelsAt(); ok {
		_spec.SetField(user.FieldStripeCancelsAt, field.TypeTime, value)
	}
	if uuo.mutation.StripeCancelsAtCleared() {
		_spec.ClearField(user.FieldStripeCancelsAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.StripeRenewsAt(); ok {
		_spec.SetField(user.FieldStripeRenewsAt, field.TypeTime, value)
	}
	if uuo.mutation.StripeRenewsAtCleared() {
		_spec.ClearField(user.FieldStripeRenewsAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uuo.mutation.GenerationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GenerationsTable,
			Columns: []string{user.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedGenerationsIDs(); len(nodes) > 0 && !uuo.mutation.GenerationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GenerationsTable,
			Columns: []string{user.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.GenerationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GenerationsTable,
			Columns: []string{user.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UpscalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpscalesTable,
			Columns: []string{user.UpscalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upscale.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUpscalesIDs(); len(nodes) > 0 && !uuo.mutation.UpscalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpscalesTable,
			Columns: []string{user.UpscalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upscale.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UpscalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpscalesTable,
			Columns: []string{user.UpscalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upscale.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.VoiceoversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VoiceoversTable,
			Columns: []string{user.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceover.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedVoiceoversIDs(); len(nodes) > 0 && !uuo.mutation.VoiceoversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VoiceoversTable,
			Columns: []string{user.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.VoiceoversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VoiceoversTable,
			Columns: []string{user.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CreditsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreditsTable,
			Columns: []string{user.CreditsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCreditsIDs(); len(nodes) > 0 && !uuo.mutation.CreditsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreditsTable,
			Columns: []string{user.CreditsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CreditsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreditsTable,
			Columns: []string{user.CreditsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.APITokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APITokensTable,
			Columns: []string{user.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAPITokensIDs(); len(nodes) > 0 && !uuo.mutation.APITokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APITokensTable,
			Columns: []string{user.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.APITokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APITokensTable,
			Columns: []string{user.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TipsGivenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TipsGivenTable,
			Columns: []string{user.TipsGivenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tiplog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTipsGivenIDs(); len(nodes) > 0 && !uuo.mutation.TipsGivenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TipsGivenTable,
			Columns: []string{user.TipsGivenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tiplog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TipsGivenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TipsGivenTable,
			Columns: []string{user.TipsGivenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tiplog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TipsReceivedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TipsReceivedTable,
			Columns: []string{user.TipsReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tiplog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTipsReceivedIDs(); len(nodes) > 0 && !uuo.mutation.TipsReceivedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TipsReceivedTable,
			Columns: []string{user.TipsReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tiplog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TipsReceivedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TipsReceivedTable,
			Columns: []string{user.TipsReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tiplog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !uuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.GenerationOutputLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GenerationOutputLikesTable,
			Columns: []string{user.GenerationOutputLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generationoutputlike.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedGenerationOutputLikesIDs(); len(nodes) > 0 && !uuo.mutation.GenerationOutputLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GenerationOutputLikesTable,
			Columns: []string{user.GenerationOutputLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generationoutputlike.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.GenerationOutputLikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GenerationOutputLikesTable,
			Columns: []string{user.GenerationOutputLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generationoutputlike.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uuo.modifiers...)
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
