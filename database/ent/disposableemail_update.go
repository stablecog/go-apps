// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stablecog/sc-go/database/ent/disposableemail"
	"github.com/stablecog/sc-go/database/ent/predicate"
)

// DisposableEmailUpdate is the builder for updating DisposableEmail entities.
type DisposableEmailUpdate struct {
	config
	hooks     []Hook
	mutation  *DisposableEmailMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DisposableEmailUpdate builder.
func (deu *DisposableEmailUpdate) Where(ps ...predicate.DisposableEmail) *DisposableEmailUpdate {
	deu.mutation.Where(ps...)
	return deu
}

// SetDomain sets the "domain" field.
func (deu *DisposableEmailUpdate) SetDomain(s string) *DisposableEmailUpdate {
	deu.mutation.SetDomain(s)
	return deu
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (deu *DisposableEmailUpdate) SetNillableDomain(s *string) *DisposableEmailUpdate {
	if s != nil {
		deu.SetDomain(*s)
	}
	return deu
}

// SetUpdatedAt sets the "updated_at" field.
func (deu *DisposableEmailUpdate) SetUpdatedAt(t time.Time) *DisposableEmailUpdate {
	deu.mutation.SetUpdatedAt(t)
	return deu
}

// Mutation returns the DisposableEmailMutation object of the builder.
func (deu *DisposableEmailUpdate) Mutation() *DisposableEmailMutation {
	return deu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (deu *DisposableEmailUpdate) Save(ctx context.Context) (int, error) {
	deu.defaults()
	return withHooks(ctx, deu.sqlSave, deu.mutation, deu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (deu *DisposableEmailUpdate) SaveX(ctx context.Context) int {
	affected, err := deu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (deu *DisposableEmailUpdate) Exec(ctx context.Context) error {
	_, err := deu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (deu *DisposableEmailUpdate) ExecX(ctx context.Context) {
	if err := deu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (deu *DisposableEmailUpdate) defaults() {
	if _, ok := deu.mutation.UpdatedAt(); !ok {
		v := disposableemail.UpdateDefaultUpdatedAt()
		deu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (deu *DisposableEmailUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DisposableEmailUpdate {
	deu.modifiers = append(deu.modifiers, modifiers...)
	return deu
}

func (deu *DisposableEmailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(disposableemail.Table, disposableemail.Columns, sqlgraph.NewFieldSpec(disposableemail.FieldID, field.TypeUUID))
	if ps := deu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := deu.mutation.Domain(); ok {
		_spec.SetField(disposableemail.FieldDomain, field.TypeString, value)
	}
	if value, ok := deu.mutation.UpdatedAt(); ok {
		_spec.SetField(disposableemail.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(deu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, deu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{disposableemail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	deu.mutation.done = true
	return n, nil
}

// DisposableEmailUpdateOne is the builder for updating a single DisposableEmail entity.
type DisposableEmailUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DisposableEmailMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDomain sets the "domain" field.
func (deuo *DisposableEmailUpdateOne) SetDomain(s string) *DisposableEmailUpdateOne {
	deuo.mutation.SetDomain(s)
	return deuo
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (deuo *DisposableEmailUpdateOne) SetNillableDomain(s *string) *DisposableEmailUpdateOne {
	if s != nil {
		deuo.SetDomain(*s)
	}
	return deuo
}

// SetUpdatedAt sets the "updated_at" field.
func (deuo *DisposableEmailUpdateOne) SetUpdatedAt(t time.Time) *DisposableEmailUpdateOne {
	deuo.mutation.SetUpdatedAt(t)
	return deuo
}

// Mutation returns the DisposableEmailMutation object of the builder.
func (deuo *DisposableEmailUpdateOne) Mutation() *DisposableEmailMutation {
	return deuo.mutation
}

// Where appends a list predicates to the DisposableEmailUpdate builder.
func (deuo *DisposableEmailUpdateOne) Where(ps ...predicate.DisposableEmail) *DisposableEmailUpdateOne {
	deuo.mutation.Where(ps...)
	return deuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (deuo *DisposableEmailUpdateOne) Select(field string, fields ...string) *DisposableEmailUpdateOne {
	deuo.fields = append([]string{field}, fields...)
	return deuo
}

// Save executes the query and returns the updated DisposableEmail entity.
func (deuo *DisposableEmailUpdateOne) Save(ctx context.Context) (*DisposableEmail, error) {
	deuo.defaults()
	return withHooks(ctx, deuo.sqlSave, deuo.mutation, deuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (deuo *DisposableEmailUpdateOne) SaveX(ctx context.Context) *DisposableEmail {
	node, err := deuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (deuo *DisposableEmailUpdateOne) Exec(ctx context.Context) error {
	_, err := deuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (deuo *DisposableEmailUpdateOne) ExecX(ctx context.Context) {
	if err := deuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (deuo *DisposableEmailUpdateOne) defaults() {
	if _, ok := deuo.mutation.UpdatedAt(); !ok {
		v := disposableemail.UpdateDefaultUpdatedAt()
		deuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (deuo *DisposableEmailUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DisposableEmailUpdateOne {
	deuo.modifiers = append(deuo.modifiers, modifiers...)
	return deuo
}

func (deuo *DisposableEmailUpdateOne) sqlSave(ctx context.Context) (_node *DisposableEmail, err error) {
	_spec := sqlgraph.NewUpdateSpec(disposableemail.Table, disposableemail.Columns, sqlgraph.NewFieldSpec(disposableemail.FieldID, field.TypeUUID))
	id, ok := deuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DisposableEmail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := deuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, disposableemail.FieldID)
		for _, f := range fields {
			if !disposableemail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != disposableemail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := deuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := deuo.mutation.Domain(); ok {
		_spec.SetField(disposableemail.FieldDomain, field.TypeString, value)
	}
	if value, ok := deuo.mutation.UpdatedAt(); ok {
		_spec.SetField(disposableemail.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(deuo.modifiers...)
	_node = &DisposableEmail{config: deuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, deuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{disposableemail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	deuo.mutation.done = true
	return _node, nil
}
