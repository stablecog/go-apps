// Code generated by ent, DO NOT EDIT.

package upscale

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/predicate"
	"github.com/stablecog/sc-go/database/enttypes"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldLTE(FieldID, id))
}

// Width applies equality check predicate on the "width" field. It's identical to WidthEQ.
func Width(v int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldWidth, v))
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldHeight, v))
}

// Scale applies equality check predicate on the "scale" field. It's identical to ScaleEQ.
func Scale(v int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldScale, v))
}

// CountryCode applies equality check predicate on the "country_code" field. It's identical to CountryCodeEQ.
func CountryCode(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldCountryCode, v))
}

// FailureReason applies equality check predicate on the "failure_reason" field. It's identical to FailureReasonEQ.
func FailureReason(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldFailureReason, v))
}

// StripeProductID applies equality check predicate on the "stripe_product_id" field. It's identical to StripeProductIDEQ.
func StripeProductID(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldStripeProductID, v))
}

// SystemGenerated applies equality check predicate on the "system_generated" field. It's identical to SystemGeneratedEQ.
func SystemGenerated(v bool) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldSystemGenerated, v))
}

// WebhookToken applies equality check predicate on the "webhook_token" field. It's identical to WebhookTokenEQ.
func WebhookToken(v uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldWebhookToken, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldUserID, v))
}

// DeviceInfoID applies equality check predicate on the "device_info_id" field. It's identical to DeviceInfoIDEQ.
func DeviceInfoID(v uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldDeviceInfoID, v))
}

// ModelID applies equality check predicate on the "model_id" field. It's identical to ModelIDEQ.
func ModelID(v uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldModelID, v))
}

// APITokenID applies equality check predicate on the "api_token_id" field. It's identical to APITokenIDEQ.
func APITokenID(v uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldAPITokenID, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldStartedAt, v))
}

// CompletedAt applies equality check predicate on the "completed_at" field. It's identical to CompletedAtEQ.
func CompletedAt(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldCompletedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldUpdatedAt, v))
}

// WidthEQ applies the EQ predicate on the "width" field.
func WidthEQ(v int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldWidth, v))
}

// WidthNEQ applies the NEQ predicate on the "width" field.
func WidthNEQ(v int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldNEQ(FieldWidth, v))
}

// WidthIn applies the In predicate on the "width" field.
func WidthIn(vs ...int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldIn(FieldWidth, vs...))
}

// WidthNotIn applies the NotIn predicate on the "width" field.
func WidthNotIn(vs ...int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldNotIn(FieldWidth, vs...))
}

// WidthGT applies the GT predicate on the "width" field.
func WidthGT(v int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldGT(FieldWidth, v))
}

// WidthGTE applies the GTE predicate on the "width" field.
func WidthGTE(v int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldGTE(FieldWidth, v))
}

// WidthLT applies the LT predicate on the "width" field.
func WidthLT(v int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldLT(FieldWidth, v))
}

// WidthLTE applies the LTE predicate on the "width" field.
func WidthLTE(v int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldLTE(FieldWidth, v))
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldLTE(FieldHeight, v))
}

// ScaleEQ applies the EQ predicate on the "scale" field.
func ScaleEQ(v int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldScale, v))
}

// ScaleNEQ applies the NEQ predicate on the "scale" field.
func ScaleNEQ(v int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldNEQ(FieldScale, v))
}

// ScaleIn applies the In predicate on the "scale" field.
func ScaleIn(vs ...int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldIn(FieldScale, vs...))
}

// ScaleNotIn applies the NotIn predicate on the "scale" field.
func ScaleNotIn(vs ...int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldNotIn(FieldScale, vs...))
}

// ScaleGT applies the GT predicate on the "scale" field.
func ScaleGT(v int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldGT(FieldScale, v))
}

// ScaleGTE applies the GTE predicate on the "scale" field.
func ScaleGTE(v int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldGTE(FieldScale, v))
}

// ScaleLT applies the LT predicate on the "scale" field.
func ScaleLT(v int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldLT(FieldScale, v))
}

// ScaleLTE applies the LTE predicate on the "scale" field.
func ScaleLTE(v int32) predicate.Upscale {
	return predicate.Upscale(sql.FieldLTE(FieldScale, v))
}

// CountryCodeEQ applies the EQ predicate on the "country_code" field.
func CountryCodeEQ(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldCountryCode, v))
}

// CountryCodeNEQ applies the NEQ predicate on the "country_code" field.
func CountryCodeNEQ(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldNEQ(FieldCountryCode, v))
}

// CountryCodeIn applies the In predicate on the "country_code" field.
func CountryCodeIn(vs ...string) predicate.Upscale {
	return predicate.Upscale(sql.FieldIn(FieldCountryCode, vs...))
}

// CountryCodeNotIn applies the NotIn predicate on the "country_code" field.
func CountryCodeNotIn(vs ...string) predicate.Upscale {
	return predicate.Upscale(sql.FieldNotIn(FieldCountryCode, vs...))
}

// CountryCodeGT applies the GT predicate on the "country_code" field.
func CountryCodeGT(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldGT(FieldCountryCode, v))
}

// CountryCodeGTE applies the GTE predicate on the "country_code" field.
func CountryCodeGTE(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldGTE(FieldCountryCode, v))
}

// CountryCodeLT applies the LT predicate on the "country_code" field.
func CountryCodeLT(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldLT(FieldCountryCode, v))
}

// CountryCodeLTE applies the LTE predicate on the "country_code" field.
func CountryCodeLTE(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldLTE(FieldCountryCode, v))
}

// CountryCodeContains applies the Contains predicate on the "country_code" field.
func CountryCodeContains(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldContains(FieldCountryCode, v))
}

// CountryCodeHasPrefix applies the HasPrefix predicate on the "country_code" field.
func CountryCodeHasPrefix(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldHasPrefix(FieldCountryCode, v))
}

// CountryCodeHasSuffix applies the HasSuffix predicate on the "country_code" field.
func CountryCodeHasSuffix(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldHasSuffix(FieldCountryCode, v))
}

// CountryCodeIsNil applies the IsNil predicate on the "country_code" field.
func CountryCodeIsNil() predicate.Upscale {
	return predicate.Upscale(sql.FieldIsNull(FieldCountryCode))
}

// CountryCodeNotNil applies the NotNil predicate on the "country_code" field.
func CountryCodeNotNil() predicate.Upscale {
	return predicate.Upscale(sql.FieldNotNull(FieldCountryCode))
}

// CountryCodeEqualFold applies the EqualFold predicate on the "country_code" field.
func CountryCodeEqualFold(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldEqualFold(FieldCountryCode, v))
}

// CountryCodeContainsFold applies the ContainsFold predicate on the "country_code" field.
func CountryCodeContainsFold(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldContainsFold(FieldCountryCode, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Upscale {
	return predicate.Upscale(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Upscale {
	return predicate.Upscale(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Upscale {
	return predicate.Upscale(sql.FieldNotIn(FieldStatus, vs...))
}

// FailureReasonEQ applies the EQ predicate on the "failure_reason" field.
func FailureReasonEQ(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldFailureReason, v))
}

// FailureReasonNEQ applies the NEQ predicate on the "failure_reason" field.
func FailureReasonNEQ(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldNEQ(FieldFailureReason, v))
}

// FailureReasonIn applies the In predicate on the "failure_reason" field.
func FailureReasonIn(vs ...string) predicate.Upscale {
	return predicate.Upscale(sql.FieldIn(FieldFailureReason, vs...))
}

// FailureReasonNotIn applies the NotIn predicate on the "failure_reason" field.
func FailureReasonNotIn(vs ...string) predicate.Upscale {
	return predicate.Upscale(sql.FieldNotIn(FieldFailureReason, vs...))
}

// FailureReasonGT applies the GT predicate on the "failure_reason" field.
func FailureReasonGT(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldGT(FieldFailureReason, v))
}

// FailureReasonGTE applies the GTE predicate on the "failure_reason" field.
func FailureReasonGTE(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldGTE(FieldFailureReason, v))
}

// FailureReasonLT applies the LT predicate on the "failure_reason" field.
func FailureReasonLT(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldLT(FieldFailureReason, v))
}

// FailureReasonLTE applies the LTE predicate on the "failure_reason" field.
func FailureReasonLTE(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldLTE(FieldFailureReason, v))
}

// FailureReasonContains applies the Contains predicate on the "failure_reason" field.
func FailureReasonContains(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldContains(FieldFailureReason, v))
}

// FailureReasonHasPrefix applies the HasPrefix predicate on the "failure_reason" field.
func FailureReasonHasPrefix(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldHasPrefix(FieldFailureReason, v))
}

// FailureReasonHasSuffix applies the HasSuffix predicate on the "failure_reason" field.
func FailureReasonHasSuffix(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldHasSuffix(FieldFailureReason, v))
}

// FailureReasonIsNil applies the IsNil predicate on the "failure_reason" field.
func FailureReasonIsNil() predicate.Upscale {
	return predicate.Upscale(sql.FieldIsNull(FieldFailureReason))
}

// FailureReasonNotNil applies the NotNil predicate on the "failure_reason" field.
func FailureReasonNotNil() predicate.Upscale {
	return predicate.Upscale(sql.FieldNotNull(FieldFailureReason))
}

// FailureReasonEqualFold applies the EqualFold predicate on the "failure_reason" field.
func FailureReasonEqualFold(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldEqualFold(FieldFailureReason, v))
}

// FailureReasonContainsFold applies the ContainsFold predicate on the "failure_reason" field.
func FailureReasonContainsFold(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldContainsFold(FieldFailureReason, v))
}

// StripeProductIDEQ applies the EQ predicate on the "stripe_product_id" field.
func StripeProductIDEQ(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldStripeProductID, v))
}

// StripeProductIDNEQ applies the NEQ predicate on the "stripe_product_id" field.
func StripeProductIDNEQ(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldNEQ(FieldStripeProductID, v))
}

// StripeProductIDIn applies the In predicate on the "stripe_product_id" field.
func StripeProductIDIn(vs ...string) predicate.Upscale {
	return predicate.Upscale(sql.FieldIn(FieldStripeProductID, vs...))
}

// StripeProductIDNotIn applies the NotIn predicate on the "stripe_product_id" field.
func StripeProductIDNotIn(vs ...string) predicate.Upscale {
	return predicate.Upscale(sql.FieldNotIn(FieldStripeProductID, vs...))
}

// StripeProductIDGT applies the GT predicate on the "stripe_product_id" field.
func StripeProductIDGT(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldGT(FieldStripeProductID, v))
}

// StripeProductIDGTE applies the GTE predicate on the "stripe_product_id" field.
func StripeProductIDGTE(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldGTE(FieldStripeProductID, v))
}

// StripeProductIDLT applies the LT predicate on the "stripe_product_id" field.
func StripeProductIDLT(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldLT(FieldStripeProductID, v))
}

// StripeProductIDLTE applies the LTE predicate on the "stripe_product_id" field.
func StripeProductIDLTE(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldLTE(FieldStripeProductID, v))
}

// StripeProductIDContains applies the Contains predicate on the "stripe_product_id" field.
func StripeProductIDContains(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldContains(FieldStripeProductID, v))
}

// StripeProductIDHasPrefix applies the HasPrefix predicate on the "stripe_product_id" field.
func StripeProductIDHasPrefix(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldHasPrefix(FieldStripeProductID, v))
}

// StripeProductIDHasSuffix applies the HasSuffix predicate on the "stripe_product_id" field.
func StripeProductIDHasSuffix(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldHasSuffix(FieldStripeProductID, v))
}

// StripeProductIDIsNil applies the IsNil predicate on the "stripe_product_id" field.
func StripeProductIDIsNil() predicate.Upscale {
	return predicate.Upscale(sql.FieldIsNull(FieldStripeProductID))
}

// StripeProductIDNotNil applies the NotNil predicate on the "stripe_product_id" field.
func StripeProductIDNotNil() predicate.Upscale {
	return predicate.Upscale(sql.FieldNotNull(FieldStripeProductID))
}

// StripeProductIDEqualFold applies the EqualFold predicate on the "stripe_product_id" field.
func StripeProductIDEqualFold(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldEqualFold(FieldStripeProductID, v))
}

// StripeProductIDContainsFold applies the ContainsFold predicate on the "stripe_product_id" field.
func StripeProductIDContainsFold(v string) predicate.Upscale {
	return predicate.Upscale(sql.FieldContainsFold(FieldStripeProductID, v))
}

// SystemGeneratedEQ applies the EQ predicate on the "system_generated" field.
func SystemGeneratedEQ(v bool) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldSystemGenerated, v))
}

// SystemGeneratedNEQ applies the NEQ predicate on the "system_generated" field.
func SystemGeneratedNEQ(v bool) predicate.Upscale {
	return predicate.Upscale(sql.FieldNEQ(FieldSystemGenerated, v))
}

// SourceTypeEQ applies the EQ predicate on the "source_type" field.
func SourceTypeEQ(v enttypes.SourceType) predicate.Upscale {
	vc := v
	return predicate.Upscale(sql.FieldEQ(FieldSourceType, vc))
}

// SourceTypeNEQ applies the NEQ predicate on the "source_type" field.
func SourceTypeNEQ(v enttypes.SourceType) predicate.Upscale {
	vc := v
	return predicate.Upscale(sql.FieldNEQ(FieldSourceType, vc))
}

// SourceTypeIn applies the In predicate on the "source_type" field.
func SourceTypeIn(vs ...enttypes.SourceType) predicate.Upscale {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Upscale(sql.FieldIn(FieldSourceType, v...))
}

// SourceTypeNotIn applies the NotIn predicate on the "source_type" field.
func SourceTypeNotIn(vs ...enttypes.SourceType) predicate.Upscale {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Upscale(sql.FieldNotIn(FieldSourceType, v...))
}

// WebhookTokenEQ applies the EQ predicate on the "webhook_token" field.
func WebhookTokenEQ(v uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldWebhookToken, v))
}

// WebhookTokenNEQ applies the NEQ predicate on the "webhook_token" field.
func WebhookTokenNEQ(v uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldNEQ(FieldWebhookToken, v))
}

// WebhookTokenIn applies the In predicate on the "webhook_token" field.
func WebhookTokenIn(vs ...uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldIn(FieldWebhookToken, vs...))
}

// WebhookTokenNotIn applies the NotIn predicate on the "webhook_token" field.
func WebhookTokenNotIn(vs ...uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldNotIn(FieldWebhookToken, vs...))
}

// WebhookTokenGT applies the GT predicate on the "webhook_token" field.
func WebhookTokenGT(v uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldGT(FieldWebhookToken, v))
}

// WebhookTokenGTE applies the GTE predicate on the "webhook_token" field.
func WebhookTokenGTE(v uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldGTE(FieldWebhookToken, v))
}

// WebhookTokenLT applies the LT predicate on the "webhook_token" field.
func WebhookTokenLT(v uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldLT(FieldWebhookToken, v))
}

// WebhookTokenLTE applies the LTE predicate on the "webhook_token" field.
func WebhookTokenLTE(v uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldLTE(FieldWebhookToken, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldNotIn(FieldUserID, vs...))
}

// DeviceInfoIDEQ applies the EQ predicate on the "device_info_id" field.
func DeviceInfoIDEQ(v uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldDeviceInfoID, v))
}

// DeviceInfoIDNEQ applies the NEQ predicate on the "device_info_id" field.
func DeviceInfoIDNEQ(v uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldNEQ(FieldDeviceInfoID, v))
}

// DeviceInfoIDIn applies the In predicate on the "device_info_id" field.
func DeviceInfoIDIn(vs ...uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldIn(FieldDeviceInfoID, vs...))
}

// DeviceInfoIDNotIn applies the NotIn predicate on the "device_info_id" field.
func DeviceInfoIDNotIn(vs ...uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldNotIn(FieldDeviceInfoID, vs...))
}

// ModelIDEQ applies the EQ predicate on the "model_id" field.
func ModelIDEQ(v uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldModelID, v))
}

// ModelIDNEQ applies the NEQ predicate on the "model_id" field.
func ModelIDNEQ(v uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldNEQ(FieldModelID, v))
}

// ModelIDIn applies the In predicate on the "model_id" field.
func ModelIDIn(vs ...uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldIn(FieldModelID, vs...))
}

// ModelIDNotIn applies the NotIn predicate on the "model_id" field.
func ModelIDNotIn(vs ...uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldNotIn(FieldModelID, vs...))
}

// APITokenIDEQ applies the EQ predicate on the "api_token_id" field.
func APITokenIDEQ(v uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldAPITokenID, v))
}

// APITokenIDNEQ applies the NEQ predicate on the "api_token_id" field.
func APITokenIDNEQ(v uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldNEQ(FieldAPITokenID, v))
}

// APITokenIDIn applies the In predicate on the "api_token_id" field.
func APITokenIDIn(vs ...uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldIn(FieldAPITokenID, vs...))
}

// APITokenIDNotIn applies the NotIn predicate on the "api_token_id" field.
func APITokenIDNotIn(vs ...uuid.UUID) predicate.Upscale {
	return predicate.Upscale(sql.FieldNotIn(FieldAPITokenID, vs...))
}

// APITokenIDIsNil applies the IsNil predicate on the "api_token_id" field.
func APITokenIDIsNil() predicate.Upscale {
	return predicate.Upscale(sql.FieldIsNull(FieldAPITokenID))
}

// APITokenIDNotNil applies the NotNil predicate on the "api_token_id" field.
func APITokenIDNotNil() predicate.Upscale {
	return predicate.Upscale(sql.FieldNotNull(FieldAPITokenID))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.Upscale {
	return predicate.Upscale(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.Upscale {
	return predicate.Upscale(sql.FieldNotNull(FieldStartedAt))
}

// CompletedAtEQ applies the EQ predicate on the "completed_at" field.
func CompletedAtEQ(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldCompletedAt, v))
}

// CompletedAtNEQ applies the NEQ predicate on the "completed_at" field.
func CompletedAtNEQ(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldNEQ(FieldCompletedAt, v))
}

// CompletedAtIn applies the In predicate on the "completed_at" field.
func CompletedAtIn(vs ...time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldIn(FieldCompletedAt, vs...))
}

// CompletedAtNotIn applies the NotIn predicate on the "completed_at" field.
func CompletedAtNotIn(vs ...time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldNotIn(FieldCompletedAt, vs...))
}

// CompletedAtGT applies the GT predicate on the "completed_at" field.
func CompletedAtGT(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldGT(FieldCompletedAt, v))
}

// CompletedAtGTE applies the GTE predicate on the "completed_at" field.
func CompletedAtGTE(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldGTE(FieldCompletedAt, v))
}

// CompletedAtLT applies the LT predicate on the "completed_at" field.
func CompletedAtLT(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldLT(FieldCompletedAt, v))
}

// CompletedAtLTE applies the LTE predicate on the "completed_at" field.
func CompletedAtLTE(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldLTE(FieldCompletedAt, v))
}

// CompletedAtIsNil applies the IsNil predicate on the "completed_at" field.
func CompletedAtIsNil() predicate.Upscale {
	return predicate.Upscale(sql.FieldIsNull(FieldCompletedAt))
}

// CompletedAtNotNil applies the NotNil predicate on the "completed_at" field.
func CompletedAtNotNil() predicate.Upscale {
	return predicate.Upscale(sql.FieldNotNull(FieldCompletedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Upscale {
	return predicate.Upscale(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Upscale {
	return predicate.Upscale(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Upscale {
	return predicate.Upscale(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeviceInfo applies the HasEdge predicate on the "device_info" edge.
func HasDeviceInfo() predicate.Upscale {
	return predicate.Upscale(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DeviceInfoTable, DeviceInfoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeviceInfoWith applies the HasEdge predicate on the "device_info" edge with a given conditions (other predicates).
func HasDeviceInfoWith(preds ...predicate.DeviceInfo) predicate.Upscale {
	return predicate.Upscale(func(s *sql.Selector) {
		step := newDeviceInfoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUpscaleModels applies the HasEdge predicate on the "upscale_models" edge.
func HasUpscaleModels() predicate.Upscale {
	return predicate.Upscale(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UpscaleModelsTable, UpscaleModelsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUpscaleModelsWith applies the HasEdge predicate on the "upscale_models" edge with a given conditions (other predicates).
func HasUpscaleModelsWith(preds ...predicate.UpscaleModel) predicate.Upscale {
	return predicate.Upscale(func(s *sql.Selector) {
		step := newUpscaleModelsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAPITokens applies the HasEdge predicate on the "api_tokens" edge.
func HasAPITokens() predicate.Upscale {
	return predicate.Upscale(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, APITokensTable, APITokensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAPITokensWith applies the HasEdge predicate on the "api_tokens" edge with a given conditions (other predicates).
func HasAPITokensWith(preds ...predicate.ApiToken) predicate.Upscale {
	return predicate.Upscale(func(s *sql.Selector) {
		step := newAPITokensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUpscaleOutputs applies the HasEdge predicate on the "upscale_outputs" edge.
func HasUpscaleOutputs() predicate.Upscale {
	return predicate.Upscale(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UpscaleOutputsTable, UpscaleOutputsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUpscaleOutputsWith applies the HasEdge predicate on the "upscale_outputs" edge with a given conditions (other predicates).
func HasUpscaleOutputsWith(preds ...predicate.UpscaleOutput) predicate.Upscale {
	return predicate.Upscale(func(s *sql.Selector) {
		step := newUpscaleOutputsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Upscale) predicate.Upscale {
	return predicate.Upscale(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Upscale) predicate.Upscale {
	return predicate.Upscale(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Upscale) predicate.Upscale {
	return predicate.Upscale(sql.NotPredicates(p))
}
