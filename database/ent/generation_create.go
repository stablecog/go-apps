// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/apitoken"
	"github.com/stablecog/sc-go/database/ent/deviceinfo"
	"github.com/stablecog/sc-go/database/ent/generation"
	"github.com/stablecog/sc-go/database/ent/generationmodel"
	"github.com/stablecog/sc-go/database/ent/generationoutput"
	"github.com/stablecog/sc-go/database/ent/negativeprompt"
	"github.com/stablecog/sc-go/database/ent/prompt"
	"github.com/stablecog/sc-go/database/ent/scheduler"
	"github.com/stablecog/sc-go/database/ent/user"
	"github.com/stablecog/sc-go/database/enttypes"
)

// GenerationCreate is the builder for creating a Generation entity.
type GenerationCreate struct {
	config
	mutation *GenerationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetWidth sets the "width" field.
func (gc *GenerationCreate) SetWidth(i int32) *GenerationCreate {
	gc.mutation.SetWidth(i)
	return gc
}

// SetHeight sets the "height" field.
func (gc *GenerationCreate) SetHeight(i int32) *GenerationCreate {
	gc.mutation.SetHeight(i)
	return gc
}

// SetInferenceSteps sets the "inference_steps" field.
func (gc *GenerationCreate) SetInferenceSteps(i int32) *GenerationCreate {
	gc.mutation.SetInferenceSteps(i)
	return gc
}

// SetGuidanceScale sets the "guidance_scale" field.
func (gc *GenerationCreate) SetGuidanceScale(f float32) *GenerationCreate {
	gc.mutation.SetGuidanceScale(f)
	return gc
}

// SetNumOutputs sets the "num_outputs" field.
func (gc *GenerationCreate) SetNumOutputs(i int32) *GenerationCreate {
	gc.mutation.SetNumOutputs(i)
	return gc
}

// SetNsfwCount sets the "nsfw_count" field.
func (gc *GenerationCreate) SetNsfwCount(i int32) *GenerationCreate {
	gc.mutation.SetNsfwCount(i)
	return gc
}

// SetNillableNsfwCount sets the "nsfw_count" field if the given value is not nil.
func (gc *GenerationCreate) SetNillableNsfwCount(i *int32) *GenerationCreate {
	if i != nil {
		gc.SetNsfwCount(*i)
	}
	return gc
}

// SetSeed sets the "seed" field.
func (gc *GenerationCreate) SetSeed(i int) *GenerationCreate {
	gc.mutation.SetSeed(i)
	return gc
}

// SetStatus sets the "status" field.
func (gc *GenerationCreate) SetStatus(ge generation.Status) *GenerationCreate {
	gc.mutation.SetStatus(ge)
	return gc
}

// SetFailureReason sets the "failure_reason" field.
func (gc *GenerationCreate) SetFailureReason(s string) *GenerationCreate {
	gc.mutation.SetFailureReason(s)
	return gc
}

// SetNillableFailureReason sets the "failure_reason" field if the given value is not nil.
func (gc *GenerationCreate) SetNillableFailureReason(s *string) *GenerationCreate {
	if s != nil {
		gc.SetFailureReason(*s)
	}
	return gc
}

// SetCountryCode sets the "country_code" field.
func (gc *GenerationCreate) SetCountryCode(s string) *GenerationCreate {
	gc.mutation.SetCountryCode(s)
	return gc
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (gc *GenerationCreate) SetNillableCountryCode(s *string) *GenerationCreate {
	if s != nil {
		gc.SetCountryCode(*s)
	}
	return gc
}

// SetInitImageURL sets the "init_image_url" field.
func (gc *GenerationCreate) SetInitImageURL(s string) *GenerationCreate {
	gc.mutation.SetInitImageURL(s)
	return gc
}

// SetNillableInitImageURL sets the "init_image_url" field if the given value is not nil.
func (gc *GenerationCreate) SetNillableInitImageURL(s *string) *GenerationCreate {
	if s != nil {
		gc.SetInitImageURL(*s)
	}
	return gc
}

// SetMaskImageURL sets the "mask_image_url" field.
func (gc *GenerationCreate) SetMaskImageURL(s string) *GenerationCreate {
	gc.mutation.SetMaskImageURL(s)
	return gc
}

// SetNillableMaskImageURL sets the "mask_image_url" field if the given value is not nil.
func (gc *GenerationCreate) SetNillableMaskImageURL(s *string) *GenerationCreate {
	if s != nil {
		gc.SetMaskImageURL(*s)
	}
	return gc
}

// SetPromptStrength sets the "prompt_strength" field.
func (gc *GenerationCreate) SetPromptStrength(f float32) *GenerationCreate {
	gc.mutation.SetPromptStrength(f)
	return gc
}

// SetNillablePromptStrength sets the "prompt_strength" field if the given value is not nil.
func (gc *GenerationCreate) SetNillablePromptStrength(f *float32) *GenerationCreate {
	if f != nil {
		gc.SetPromptStrength(*f)
	}
	return gc
}

// SetWasAutoSubmitted sets the "was_auto_submitted" field.
func (gc *GenerationCreate) SetWasAutoSubmitted(b bool) *GenerationCreate {
	gc.mutation.SetWasAutoSubmitted(b)
	return gc
}

// SetNillableWasAutoSubmitted sets the "was_auto_submitted" field if the given value is not nil.
func (gc *GenerationCreate) SetNillableWasAutoSubmitted(b *bool) *GenerationCreate {
	if b != nil {
		gc.SetWasAutoSubmitted(*b)
	}
	return gc
}

// SetStripeProductID sets the "stripe_product_id" field.
func (gc *GenerationCreate) SetStripeProductID(s string) *GenerationCreate {
	gc.mutation.SetStripeProductID(s)
	return gc
}

// SetNillableStripeProductID sets the "stripe_product_id" field if the given value is not nil.
func (gc *GenerationCreate) SetNillableStripeProductID(s *string) *GenerationCreate {
	if s != nil {
		gc.SetStripeProductID(*s)
	}
	return gc
}

// SetSourceType sets the "source_type" field.
func (gc *GenerationCreate) SetSourceType(et enttypes.SourceType) *GenerationCreate {
	gc.mutation.SetSourceType(et)
	return gc
}

// SetNillableSourceType sets the "source_type" field if the given value is not nil.
func (gc *GenerationCreate) SetNillableSourceType(et *enttypes.SourceType) *GenerationCreate {
	if et != nil {
		gc.SetSourceType(*et)
	}
	return gc
}

// SetWebhookToken sets the "webhook_token" field.
func (gc *GenerationCreate) SetWebhookToken(u uuid.UUID) *GenerationCreate {
	gc.mutation.SetWebhookToken(u)
	return gc
}

// SetNillableWebhookToken sets the "webhook_token" field if the given value is not nil.
func (gc *GenerationCreate) SetNillableWebhookToken(u *uuid.UUID) *GenerationCreate {
	if u != nil {
		gc.SetWebhookToken(*u)
	}
	return gc
}

// SetPromptID sets the "prompt_id" field.
func (gc *GenerationCreate) SetPromptID(u uuid.UUID) *GenerationCreate {
	gc.mutation.SetPromptID(u)
	return gc
}

// SetNillablePromptID sets the "prompt_id" field if the given value is not nil.
func (gc *GenerationCreate) SetNillablePromptID(u *uuid.UUID) *GenerationCreate {
	if u != nil {
		gc.SetPromptID(*u)
	}
	return gc
}

// SetNegativePromptID sets the "negative_prompt_id" field.
func (gc *GenerationCreate) SetNegativePromptID(u uuid.UUID) *GenerationCreate {
	gc.mutation.SetNegativePromptID(u)
	return gc
}

// SetNillableNegativePromptID sets the "negative_prompt_id" field if the given value is not nil.
func (gc *GenerationCreate) SetNillableNegativePromptID(u *uuid.UUID) *GenerationCreate {
	if u != nil {
		gc.SetNegativePromptID(*u)
	}
	return gc
}

// SetModelID sets the "model_id" field.
func (gc *GenerationCreate) SetModelID(u uuid.UUID) *GenerationCreate {
	gc.mutation.SetModelID(u)
	return gc
}

// SetSchedulerID sets the "scheduler_id" field.
func (gc *GenerationCreate) SetSchedulerID(u uuid.UUID) *GenerationCreate {
	gc.mutation.SetSchedulerID(u)
	return gc
}

// SetUserID sets the "user_id" field.
func (gc *GenerationCreate) SetUserID(u uuid.UUID) *GenerationCreate {
	gc.mutation.SetUserID(u)
	return gc
}

// SetDeviceInfoID sets the "device_info_id" field.
func (gc *GenerationCreate) SetDeviceInfoID(u uuid.UUID) *GenerationCreate {
	gc.mutation.SetDeviceInfoID(u)
	return gc
}

// SetAPITokenID sets the "api_token_id" field.
func (gc *GenerationCreate) SetAPITokenID(u uuid.UUID) *GenerationCreate {
	gc.mutation.SetAPITokenID(u)
	return gc
}

// SetNillableAPITokenID sets the "api_token_id" field if the given value is not nil.
func (gc *GenerationCreate) SetNillableAPITokenID(u *uuid.UUID) *GenerationCreate {
	if u != nil {
		gc.SetAPITokenID(*u)
	}
	return gc
}

// SetStartedAt sets the "started_at" field.
func (gc *GenerationCreate) SetStartedAt(t time.Time) *GenerationCreate {
	gc.mutation.SetStartedAt(t)
	return gc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (gc *GenerationCreate) SetNillableStartedAt(t *time.Time) *GenerationCreate {
	if t != nil {
		gc.SetStartedAt(*t)
	}
	return gc
}

// SetCompletedAt sets the "completed_at" field.
func (gc *GenerationCreate) SetCompletedAt(t time.Time) *GenerationCreate {
	gc.mutation.SetCompletedAt(t)
	return gc
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (gc *GenerationCreate) SetNillableCompletedAt(t *time.Time) *GenerationCreate {
	if t != nil {
		gc.SetCompletedAt(*t)
	}
	return gc
}

// SetCreatedAt sets the "created_at" field.
func (gc *GenerationCreate) SetCreatedAt(t time.Time) *GenerationCreate {
	gc.mutation.SetCreatedAt(t)
	return gc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gc *GenerationCreate) SetNillableCreatedAt(t *time.Time) *GenerationCreate {
	if t != nil {
		gc.SetCreatedAt(*t)
	}
	return gc
}

// SetUpdatedAt sets the "updated_at" field.
func (gc *GenerationCreate) SetUpdatedAt(t time.Time) *GenerationCreate {
	gc.mutation.SetUpdatedAt(t)
	return gc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gc *GenerationCreate) SetNillableUpdatedAt(t *time.Time) *GenerationCreate {
	if t != nil {
		gc.SetUpdatedAt(*t)
	}
	return gc
}

// SetID sets the "id" field.
func (gc *GenerationCreate) SetID(u uuid.UUID) *GenerationCreate {
	gc.mutation.SetID(u)
	return gc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gc *GenerationCreate) SetNillableID(u *uuid.UUID) *GenerationCreate {
	if u != nil {
		gc.SetID(*u)
	}
	return gc
}

// SetDeviceInfo sets the "device_info" edge to the DeviceInfo entity.
func (gc *GenerationCreate) SetDeviceInfo(d *DeviceInfo) *GenerationCreate {
	return gc.SetDeviceInfoID(d.ID)
}

// SetScheduler sets the "scheduler" edge to the Scheduler entity.
func (gc *GenerationCreate) SetScheduler(s *Scheduler) *GenerationCreate {
	return gc.SetSchedulerID(s.ID)
}

// SetPrompt sets the "prompt" edge to the Prompt entity.
func (gc *GenerationCreate) SetPrompt(p *Prompt) *GenerationCreate {
	return gc.SetPromptID(p.ID)
}

// SetNegativePrompt sets the "negative_prompt" edge to the NegativePrompt entity.
func (gc *GenerationCreate) SetNegativePrompt(n *NegativePrompt) *GenerationCreate {
	return gc.SetNegativePromptID(n.ID)
}

// SetGenerationModelID sets the "generation_model" edge to the GenerationModel entity by ID.
func (gc *GenerationCreate) SetGenerationModelID(id uuid.UUID) *GenerationCreate {
	gc.mutation.SetGenerationModelID(id)
	return gc
}

// SetGenerationModel sets the "generation_model" edge to the GenerationModel entity.
func (gc *GenerationCreate) SetGenerationModel(g *GenerationModel) *GenerationCreate {
	return gc.SetGenerationModelID(g.ID)
}

// SetUser sets the "user" edge to the User entity.
func (gc *GenerationCreate) SetUser(u *User) *GenerationCreate {
	return gc.SetUserID(u.ID)
}

// SetAPITokensID sets the "api_tokens" edge to the ApiToken entity by ID.
func (gc *GenerationCreate) SetAPITokensID(id uuid.UUID) *GenerationCreate {
	gc.mutation.SetAPITokensID(id)
	return gc
}

// SetNillableAPITokensID sets the "api_tokens" edge to the ApiToken entity by ID if the given value is not nil.
func (gc *GenerationCreate) SetNillableAPITokensID(id *uuid.UUID) *GenerationCreate {
	if id != nil {
		gc = gc.SetAPITokensID(*id)
	}
	return gc
}

// SetAPITokens sets the "api_tokens" edge to the ApiToken entity.
func (gc *GenerationCreate) SetAPITokens(a *ApiToken) *GenerationCreate {
	return gc.SetAPITokensID(a.ID)
}

// AddGenerationOutputIDs adds the "generation_outputs" edge to the GenerationOutput entity by IDs.
func (gc *GenerationCreate) AddGenerationOutputIDs(ids ...uuid.UUID) *GenerationCreate {
	gc.mutation.AddGenerationOutputIDs(ids...)
	return gc
}

// AddGenerationOutputs adds the "generation_outputs" edges to the GenerationOutput entity.
func (gc *GenerationCreate) AddGenerationOutputs(g ...*GenerationOutput) *GenerationCreate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gc.AddGenerationOutputIDs(ids...)
}

// Mutation returns the GenerationMutation object of the builder.
func (gc *GenerationCreate) Mutation() *GenerationMutation {
	return gc.mutation
}

// Save creates the Generation in the database.
func (gc *GenerationCreate) Save(ctx context.Context) (*Generation, error) {
	gc.defaults()
	return withHooks(ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GenerationCreate) SaveX(ctx context.Context) *Generation {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GenerationCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GenerationCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GenerationCreate) defaults() {
	if _, ok := gc.mutation.NsfwCount(); !ok {
		v := generation.DefaultNsfwCount
		gc.mutation.SetNsfwCount(v)
	}
	if _, ok := gc.mutation.WasAutoSubmitted(); !ok {
		v := generation.DefaultWasAutoSubmitted
		gc.mutation.SetWasAutoSubmitted(v)
	}
	if _, ok := gc.mutation.SourceType(); !ok {
		v := generation.DefaultSourceType
		gc.mutation.SetSourceType(v)
	}
	if _, ok := gc.mutation.WebhookToken(); !ok {
		v := generation.DefaultWebhookToken()
		gc.mutation.SetWebhookToken(v)
	}
	if _, ok := gc.mutation.CreatedAt(); !ok {
		v := generation.DefaultCreatedAt()
		gc.mutation.SetCreatedAt(v)
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		v := generation.DefaultUpdatedAt()
		gc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gc.mutation.ID(); !ok {
		v := generation.DefaultID()
		gc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GenerationCreate) check() error {
	if _, ok := gc.mutation.Width(); !ok {
		return &ValidationError{Name: "width", err: errors.New(`ent: missing required field "Generation.width"`)}
	}
	if _, ok := gc.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`ent: missing required field "Generation.height"`)}
	}
	if _, ok := gc.mutation.InferenceSteps(); !ok {
		return &ValidationError{Name: "inference_steps", err: errors.New(`ent: missing required field "Generation.inference_steps"`)}
	}
	if _, ok := gc.mutation.GuidanceScale(); !ok {
		return &ValidationError{Name: "guidance_scale", err: errors.New(`ent: missing required field "Generation.guidance_scale"`)}
	}
	if _, ok := gc.mutation.NumOutputs(); !ok {
		return &ValidationError{Name: "num_outputs", err: errors.New(`ent: missing required field "Generation.num_outputs"`)}
	}
	if _, ok := gc.mutation.NsfwCount(); !ok {
		return &ValidationError{Name: "nsfw_count", err: errors.New(`ent: missing required field "Generation.nsfw_count"`)}
	}
	if _, ok := gc.mutation.Seed(); !ok {
		return &ValidationError{Name: "seed", err: errors.New(`ent: missing required field "Generation.seed"`)}
	}
	if _, ok := gc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Generation.status"`)}
	}
	if v, ok := gc.mutation.Status(); ok {
		if err := generation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Generation.status": %w`, err)}
		}
	}
	if _, ok := gc.mutation.WasAutoSubmitted(); !ok {
		return &ValidationError{Name: "was_auto_submitted", err: errors.New(`ent: missing required field "Generation.was_auto_submitted"`)}
	}
	if _, ok := gc.mutation.SourceType(); !ok {
		return &ValidationError{Name: "source_type", err: errors.New(`ent: missing required field "Generation.source_type"`)}
	}
	if v, ok := gc.mutation.SourceType(); ok {
		if err := generation.SourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "source_type", err: fmt.Errorf(`ent: validator failed for field "Generation.source_type": %w`, err)}
		}
	}
	if _, ok := gc.mutation.WebhookToken(); !ok {
		return &ValidationError{Name: "webhook_token", err: errors.New(`ent: missing required field "Generation.webhook_token"`)}
	}
	if _, ok := gc.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model_id", err: errors.New(`ent: missing required field "Generation.model_id"`)}
	}
	if _, ok := gc.mutation.SchedulerID(); !ok {
		return &ValidationError{Name: "scheduler_id", err: errors.New(`ent: missing required field "Generation.scheduler_id"`)}
	}
	if _, ok := gc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Generation.user_id"`)}
	}
	if _, ok := gc.mutation.DeviceInfoID(); !ok {
		return &ValidationError{Name: "device_info_id", err: errors.New(`ent: missing required field "Generation.device_info_id"`)}
	}
	if _, ok := gc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Generation.created_at"`)}
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Generation.updated_at"`)}
	}
	if len(gc.mutation.DeviceInfoIDs()) == 0 {
		return &ValidationError{Name: "device_info", err: errors.New(`ent: missing required edge "Generation.device_info"`)}
	}
	if len(gc.mutation.SchedulerIDs()) == 0 {
		return &ValidationError{Name: "scheduler", err: errors.New(`ent: missing required edge "Generation.scheduler"`)}
	}
	if len(gc.mutation.GenerationModelIDs()) == 0 {
		return &ValidationError{Name: "generation_model", err: errors.New(`ent: missing required edge "Generation.generation_model"`)}
	}
	if len(gc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Generation.user"`)}
	}
	return nil
}

func (gc *GenerationCreate) sqlSave(ctx context.Context) (*Generation, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GenerationCreate) createSpec() (*Generation, *sqlgraph.CreateSpec) {
	var (
		_node = &Generation{config: gc.config}
		_spec = sqlgraph.NewCreateSpec(generation.Table, sqlgraph.NewFieldSpec(generation.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = gc.conflict
	if id, ok := gc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := gc.mutation.Width(); ok {
		_spec.SetField(generation.FieldWidth, field.TypeInt32, value)
		_node.Width = value
	}
	if value, ok := gc.mutation.Height(); ok {
		_spec.SetField(generation.FieldHeight, field.TypeInt32, value)
		_node.Height = value
	}
	if value, ok := gc.mutation.InferenceSteps(); ok {
		_spec.SetField(generation.FieldInferenceSteps, field.TypeInt32, value)
		_node.InferenceSteps = value
	}
	if value, ok := gc.mutation.GuidanceScale(); ok {
		_spec.SetField(generation.FieldGuidanceScale, field.TypeFloat32, value)
		_node.GuidanceScale = value
	}
	if value, ok := gc.mutation.NumOutputs(); ok {
		_spec.SetField(generation.FieldNumOutputs, field.TypeInt32, value)
		_node.NumOutputs = value
	}
	if value, ok := gc.mutation.NsfwCount(); ok {
		_spec.SetField(generation.FieldNsfwCount, field.TypeInt32, value)
		_node.NsfwCount = value
	}
	if value, ok := gc.mutation.Seed(); ok {
		_spec.SetField(generation.FieldSeed, field.TypeInt, value)
		_node.Seed = value
	}
	if value, ok := gc.mutation.Status(); ok {
		_spec.SetField(generation.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := gc.mutation.FailureReason(); ok {
		_spec.SetField(generation.FieldFailureReason, field.TypeString, value)
		_node.FailureReason = &value
	}
	if value, ok := gc.mutation.CountryCode(); ok {
		_spec.SetField(generation.FieldCountryCode, field.TypeString, value)
		_node.CountryCode = &value
	}
	if value, ok := gc.mutation.InitImageURL(); ok {
		_spec.SetField(generation.FieldInitImageURL, field.TypeString, value)
		_node.InitImageURL = &value
	}
	if value, ok := gc.mutation.MaskImageURL(); ok {
		_spec.SetField(generation.FieldMaskImageURL, field.TypeString, value)
		_node.MaskImageURL = &value
	}
	if value, ok := gc.mutation.PromptStrength(); ok {
		_spec.SetField(generation.FieldPromptStrength, field.TypeFloat32, value)
		_node.PromptStrength = &value
	}
	if value, ok := gc.mutation.WasAutoSubmitted(); ok {
		_spec.SetField(generation.FieldWasAutoSubmitted, field.TypeBool, value)
		_node.WasAutoSubmitted = value
	}
	if value, ok := gc.mutation.StripeProductID(); ok {
		_spec.SetField(generation.FieldStripeProductID, field.TypeString, value)
		_node.StripeProductID = &value
	}
	if value, ok := gc.mutation.SourceType(); ok {
		_spec.SetField(generation.FieldSourceType, field.TypeEnum, value)
		_node.SourceType = value
	}
	if value, ok := gc.mutation.WebhookToken(); ok {
		_spec.SetField(generation.FieldWebhookToken, field.TypeUUID, value)
		_node.WebhookToken = value
	}
	if value, ok := gc.mutation.StartedAt(); ok {
		_spec.SetField(generation.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = &value
	}
	if value, ok := gc.mutation.CompletedAt(); ok {
		_spec.SetField(generation.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = &value
	}
	if value, ok := gc.mutation.CreatedAt(); ok {
		_spec.SetField(generation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gc.mutation.UpdatedAt(); ok {
		_spec.SetField(generation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := gc.mutation.DeviceInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.DeviceInfoTable,
			Columns: []string{generation.DeviceInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinfo.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeviceInfoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.SchedulerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.SchedulerTable,
			Columns: []string{generation.SchedulerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduler.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SchedulerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.PromptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.PromptTable,
			Columns: []string{generation.PromptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PromptID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.NegativePromptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.NegativePromptTable,
			Columns: []string{generation.NegativePromptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(negativeprompt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.NegativePromptID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.GenerationModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.GenerationModelTable,
			Columns: []string{generation.GenerationModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generationmodel.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ModelID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.UserTable,
			Columns: []string{generation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.APITokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.APITokensTable,
			Columns: []string{generation.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.APITokenID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.GenerationOutputsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   generation.GenerationOutputsTable,
			Columns: []string{generation.GenerationOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generationoutput.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Generation.Create().
//		SetWidth(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GenerationUpsert) {
//			SetWidth(v+v).
//		}).
//		Exec(ctx)
func (gc *GenerationCreate) OnConflict(opts ...sql.ConflictOption) *GenerationUpsertOne {
	gc.conflict = opts
	return &GenerationUpsertOne{
		create: gc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Generation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gc *GenerationCreate) OnConflictColumns(columns ...string) *GenerationUpsertOne {
	gc.conflict = append(gc.conflict, sql.ConflictColumns(columns...))
	return &GenerationUpsertOne{
		create: gc,
	}
}

type (
	// GenerationUpsertOne is the builder for "upsert"-ing
	//  one Generation node.
	GenerationUpsertOne struct {
		create *GenerationCreate
	}

	// GenerationUpsert is the "OnConflict" setter.
	GenerationUpsert struct {
		*sql.UpdateSet
	}
)

// SetWidth sets the "width" field.
func (u *GenerationUpsert) SetWidth(v int32) *GenerationUpsert {
	u.Set(generation.FieldWidth, v)
	return u
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateWidth() *GenerationUpsert {
	u.SetExcluded(generation.FieldWidth)
	return u
}

// AddWidth adds v to the "width" field.
func (u *GenerationUpsert) AddWidth(v int32) *GenerationUpsert {
	u.Add(generation.FieldWidth, v)
	return u
}

// SetHeight sets the "height" field.
func (u *GenerationUpsert) SetHeight(v int32) *GenerationUpsert {
	u.Set(generation.FieldHeight, v)
	return u
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateHeight() *GenerationUpsert {
	u.SetExcluded(generation.FieldHeight)
	return u
}

// AddHeight adds v to the "height" field.
func (u *GenerationUpsert) AddHeight(v int32) *GenerationUpsert {
	u.Add(generation.FieldHeight, v)
	return u
}

// SetInferenceSteps sets the "inference_steps" field.
func (u *GenerationUpsert) SetInferenceSteps(v int32) *GenerationUpsert {
	u.Set(generation.FieldInferenceSteps, v)
	return u
}

// UpdateInferenceSteps sets the "inference_steps" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateInferenceSteps() *GenerationUpsert {
	u.SetExcluded(generation.FieldInferenceSteps)
	return u
}

// AddInferenceSteps adds v to the "inference_steps" field.
func (u *GenerationUpsert) AddInferenceSteps(v int32) *GenerationUpsert {
	u.Add(generation.FieldInferenceSteps, v)
	return u
}

// SetGuidanceScale sets the "guidance_scale" field.
func (u *GenerationUpsert) SetGuidanceScale(v float32) *GenerationUpsert {
	u.Set(generation.FieldGuidanceScale, v)
	return u
}

// UpdateGuidanceScale sets the "guidance_scale" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateGuidanceScale() *GenerationUpsert {
	u.SetExcluded(generation.FieldGuidanceScale)
	return u
}

// AddGuidanceScale adds v to the "guidance_scale" field.
func (u *GenerationUpsert) AddGuidanceScale(v float32) *GenerationUpsert {
	u.Add(generation.FieldGuidanceScale, v)
	return u
}

// SetNumOutputs sets the "num_outputs" field.
func (u *GenerationUpsert) SetNumOutputs(v int32) *GenerationUpsert {
	u.Set(generation.FieldNumOutputs, v)
	return u
}

// UpdateNumOutputs sets the "num_outputs" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateNumOutputs() *GenerationUpsert {
	u.SetExcluded(generation.FieldNumOutputs)
	return u
}

// AddNumOutputs adds v to the "num_outputs" field.
func (u *GenerationUpsert) AddNumOutputs(v int32) *GenerationUpsert {
	u.Add(generation.FieldNumOutputs, v)
	return u
}

// SetNsfwCount sets the "nsfw_count" field.
func (u *GenerationUpsert) SetNsfwCount(v int32) *GenerationUpsert {
	u.Set(generation.FieldNsfwCount, v)
	return u
}

// UpdateNsfwCount sets the "nsfw_count" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateNsfwCount() *GenerationUpsert {
	u.SetExcluded(generation.FieldNsfwCount)
	return u
}

// AddNsfwCount adds v to the "nsfw_count" field.
func (u *GenerationUpsert) AddNsfwCount(v int32) *GenerationUpsert {
	u.Add(generation.FieldNsfwCount, v)
	return u
}

// SetSeed sets the "seed" field.
func (u *GenerationUpsert) SetSeed(v int) *GenerationUpsert {
	u.Set(generation.FieldSeed, v)
	return u
}

// UpdateSeed sets the "seed" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateSeed() *GenerationUpsert {
	u.SetExcluded(generation.FieldSeed)
	return u
}

// AddSeed adds v to the "seed" field.
func (u *GenerationUpsert) AddSeed(v int) *GenerationUpsert {
	u.Add(generation.FieldSeed, v)
	return u
}

// SetStatus sets the "status" field.
func (u *GenerationUpsert) SetStatus(v generation.Status) *GenerationUpsert {
	u.Set(generation.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateStatus() *GenerationUpsert {
	u.SetExcluded(generation.FieldStatus)
	return u
}

// SetFailureReason sets the "failure_reason" field.
func (u *GenerationUpsert) SetFailureReason(v string) *GenerationUpsert {
	u.Set(generation.FieldFailureReason, v)
	return u
}

// UpdateFailureReason sets the "failure_reason" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateFailureReason() *GenerationUpsert {
	u.SetExcluded(generation.FieldFailureReason)
	return u
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (u *GenerationUpsert) ClearFailureReason() *GenerationUpsert {
	u.SetNull(generation.FieldFailureReason)
	return u
}

// SetCountryCode sets the "country_code" field.
func (u *GenerationUpsert) SetCountryCode(v string) *GenerationUpsert {
	u.Set(generation.FieldCountryCode, v)
	return u
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateCountryCode() *GenerationUpsert {
	u.SetExcluded(generation.FieldCountryCode)
	return u
}

// ClearCountryCode clears the value of the "country_code" field.
func (u *GenerationUpsert) ClearCountryCode() *GenerationUpsert {
	u.SetNull(generation.FieldCountryCode)
	return u
}

// SetInitImageURL sets the "init_image_url" field.
func (u *GenerationUpsert) SetInitImageURL(v string) *GenerationUpsert {
	u.Set(generation.FieldInitImageURL, v)
	return u
}

// UpdateInitImageURL sets the "init_image_url" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateInitImageURL() *GenerationUpsert {
	u.SetExcluded(generation.FieldInitImageURL)
	return u
}

// ClearInitImageURL clears the value of the "init_image_url" field.
func (u *GenerationUpsert) ClearInitImageURL() *GenerationUpsert {
	u.SetNull(generation.FieldInitImageURL)
	return u
}

// SetMaskImageURL sets the "mask_image_url" field.
func (u *GenerationUpsert) SetMaskImageURL(v string) *GenerationUpsert {
	u.Set(generation.FieldMaskImageURL, v)
	return u
}

// UpdateMaskImageURL sets the "mask_image_url" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateMaskImageURL() *GenerationUpsert {
	u.SetExcluded(generation.FieldMaskImageURL)
	return u
}

// ClearMaskImageURL clears the value of the "mask_image_url" field.
func (u *GenerationUpsert) ClearMaskImageURL() *GenerationUpsert {
	u.SetNull(generation.FieldMaskImageURL)
	return u
}

// SetPromptStrength sets the "prompt_strength" field.
func (u *GenerationUpsert) SetPromptStrength(v float32) *GenerationUpsert {
	u.Set(generation.FieldPromptStrength, v)
	return u
}

// UpdatePromptStrength sets the "prompt_strength" field to the value that was provided on create.
func (u *GenerationUpsert) UpdatePromptStrength() *GenerationUpsert {
	u.SetExcluded(generation.FieldPromptStrength)
	return u
}

// AddPromptStrength adds v to the "prompt_strength" field.
func (u *GenerationUpsert) AddPromptStrength(v float32) *GenerationUpsert {
	u.Add(generation.FieldPromptStrength, v)
	return u
}

// ClearPromptStrength clears the value of the "prompt_strength" field.
func (u *GenerationUpsert) ClearPromptStrength() *GenerationUpsert {
	u.SetNull(generation.FieldPromptStrength)
	return u
}

// SetWasAutoSubmitted sets the "was_auto_submitted" field.
func (u *GenerationUpsert) SetWasAutoSubmitted(v bool) *GenerationUpsert {
	u.Set(generation.FieldWasAutoSubmitted, v)
	return u
}

// UpdateWasAutoSubmitted sets the "was_auto_submitted" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateWasAutoSubmitted() *GenerationUpsert {
	u.SetExcluded(generation.FieldWasAutoSubmitted)
	return u
}

// SetStripeProductID sets the "stripe_product_id" field.
func (u *GenerationUpsert) SetStripeProductID(v string) *GenerationUpsert {
	u.Set(generation.FieldStripeProductID, v)
	return u
}

// UpdateStripeProductID sets the "stripe_product_id" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateStripeProductID() *GenerationUpsert {
	u.SetExcluded(generation.FieldStripeProductID)
	return u
}

// ClearStripeProductID clears the value of the "stripe_product_id" field.
func (u *GenerationUpsert) ClearStripeProductID() *GenerationUpsert {
	u.SetNull(generation.FieldStripeProductID)
	return u
}

// SetSourceType sets the "source_type" field.
func (u *GenerationUpsert) SetSourceType(v enttypes.SourceType) *GenerationUpsert {
	u.Set(generation.FieldSourceType, v)
	return u
}

// UpdateSourceType sets the "source_type" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateSourceType() *GenerationUpsert {
	u.SetExcluded(generation.FieldSourceType)
	return u
}

// SetWebhookToken sets the "webhook_token" field.
func (u *GenerationUpsert) SetWebhookToken(v uuid.UUID) *GenerationUpsert {
	u.Set(generation.FieldWebhookToken, v)
	return u
}

// UpdateWebhookToken sets the "webhook_token" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateWebhookToken() *GenerationUpsert {
	u.SetExcluded(generation.FieldWebhookToken)
	return u
}

// SetPromptID sets the "prompt_id" field.
func (u *GenerationUpsert) SetPromptID(v uuid.UUID) *GenerationUpsert {
	u.Set(generation.FieldPromptID, v)
	return u
}

// UpdatePromptID sets the "prompt_id" field to the value that was provided on create.
func (u *GenerationUpsert) UpdatePromptID() *GenerationUpsert {
	u.SetExcluded(generation.FieldPromptID)
	return u
}

// ClearPromptID clears the value of the "prompt_id" field.
func (u *GenerationUpsert) ClearPromptID() *GenerationUpsert {
	u.SetNull(generation.FieldPromptID)
	return u
}

// SetNegativePromptID sets the "negative_prompt_id" field.
func (u *GenerationUpsert) SetNegativePromptID(v uuid.UUID) *GenerationUpsert {
	u.Set(generation.FieldNegativePromptID, v)
	return u
}

// UpdateNegativePromptID sets the "negative_prompt_id" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateNegativePromptID() *GenerationUpsert {
	u.SetExcluded(generation.FieldNegativePromptID)
	return u
}

// ClearNegativePromptID clears the value of the "negative_prompt_id" field.
func (u *GenerationUpsert) ClearNegativePromptID() *GenerationUpsert {
	u.SetNull(generation.FieldNegativePromptID)
	return u
}

// SetModelID sets the "model_id" field.
func (u *GenerationUpsert) SetModelID(v uuid.UUID) *GenerationUpsert {
	u.Set(generation.FieldModelID, v)
	return u
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateModelID() *GenerationUpsert {
	u.SetExcluded(generation.FieldModelID)
	return u
}

// SetSchedulerID sets the "scheduler_id" field.
func (u *GenerationUpsert) SetSchedulerID(v uuid.UUID) *GenerationUpsert {
	u.Set(generation.FieldSchedulerID, v)
	return u
}

// UpdateSchedulerID sets the "scheduler_id" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateSchedulerID() *GenerationUpsert {
	u.SetExcluded(generation.FieldSchedulerID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *GenerationUpsert) SetUserID(v uuid.UUID) *GenerationUpsert {
	u.Set(generation.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateUserID() *GenerationUpsert {
	u.SetExcluded(generation.FieldUserID)
	return u
}

// SetDeviceInfoID sets the "device_info_id" field.
func (u *GenerationUpsert) SetDeviceInfoID(v uuid.UUID) *GenerationUpsert {
	u.Set(generation.FieldDeviceInfoID, v)
	return u
}

// UpdateDeviceInfoID sets the "device_info_id" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateDeviceInfoID() *GenerationUpsert {
	u.SetExcluded(generation.FieldDeviceInfoID)
	return u
}

// SetAPITokenID sets the "api_token_id" field.
func (u *GenerationUpsert) SetAPITokenID(v uuid.UUID) *GenerationUpsert {
	u.Set(generation.FieldAPITokenID, v)
	return u
}

// UpdateAPITokenID sets the "api_token_id" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateAPITokenID() *GenerationUpsert {
	u.SetExcluded(generation.FieldAPITokenID)
	return u
}

// ClearAPITokenID clears the value of the "api_token_id" field.
func (u *GenerationUpsert) ClearAPITokenID() *GenerationUpsert {
	u.SetNull(generation.FieldAPITokenID)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *GenerationUpsert) SetStartedAt(v time.Time) *GenerationUpsert {
	u.Set(generation.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateStartedAt() *GenerationUpsert {
	u.SetExcluded(generation.FieldStartedAt)
	return u
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *GenerationUpsert) ClearStartedAt() *GenerationUpsert {
	u.SetNull(generation.FieldStartedAt)
	return u
}

// SetCompletedAt sets the "completed_at" field.
func (u *GenerationUpsert) SetCompletedAt(v time.Time) *GenerationUpsert {
	u.Set(generation.FieldCompletedAt, v)
	return u
}

// UpdateCompletedAt sets the "completed_at" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateCompletedAt() *GenerationUpsert {
	u.SetExcluded(generation.FieldCompletedAt)
	return u
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (u *GenerationUpsert) ClearCompletedAt() *GenerationUpsert {
	u.SetNull(generation.FieldCompletedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GenerationUpsert) SetUpdatedAt(v time.Time) *GenerationUpsert {
	u.Set(generation.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GenerationUpsert) UpdateUpdatedAt() *GenerationUpsert {
	u.SetExcluded(generation.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Generation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(generation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GenerationUpsertOne) UpdateNewValues() *GenerationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(generation.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(generation.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Generation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GenerationUpsertOne) Ignore() *GenerationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GenerationUpsertOne) DoNothing() *GenerationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GenerationCreate.OnConflict
// documentation for more info.
func (u *GenerationUpsertOne) Update(set func(*GenerationUpsert)) *GenerationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GenerationUpsert{UpdateSet: update})
	}))
	return u
}

// SetWidth sets the "width" field.
func (u *GenerationUpsertOne) SetWidth(v int32) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetWidth(v)
	})
}

// AddWidth adds v to the "width" field.
func (u *GenerationUpsertOne) AddWidth(v int32) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.AddWidth(v)
	})
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateWidth() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateWidth()
	})
}

// SetHeight sets the "height" field.
func (u *GenerationUpsertOne) SetHeight(v int32) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetHeight(v)
	})
}

// AddHeight adds v to the "height" field.
func (u *GenerationUpsertOne) AddHeight(v int32) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.AddHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateHeight() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateHeight()
	})
}

// SetInferenceSteps sets the "inference_steps" field.
func (u *GenerationUpsertOne) SetInferenceSteps(v int32) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetInferenceSteps(v)
	})
}

// AddInferenceSteps adds v to the "inference_steps" field.
func (u *GenerationUpsertOne) AddInferenceSteps(v int32) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.AddInferenceSteps(v)
	})
}

// UpdateInferenceSteps sets the "inference_steps" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateInferenceSteps() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateInferenceSteps()
	})
}

// SetGuidanceScale sets the "guidance_scale" field.
func (u *GenerationUpsertOne) SetGuidanceScale(v float32) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetGuidanceScale(v)
	})
}

// AddGuidanceScale adds v to the "guidance_scale" field.
func (u *GenerationUpsertOne) AddGuidanceScale(v float32) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.AddGuidanceScale(v)
	})
}

// UpdateGuidanceScale sets the "guidance_scale" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateGuidanceScale() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateGuidanceScale()
	})
}

// SetNumOutputs sets the "num_outputs" field.
func (u *GenerationUpsertOne) SetNumOutputs(v int32) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetNumOutputs(v)
	})
}

// AddNumOutputs adds v to the "num_outputs" field.
func (u *GenerationUpsertOne) AddNumOutputs(v int32) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.AddNumOutputs(v)
	})
}

// UpdateNumOutputs sets the "num_outputs" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateNumOutputs() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateNumOutputs()
	})
}

// SetNsfwCount sets the "nsfw_count" field.
func (u *GenerationUpsertOne) SetNsfwCount(v int32) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetNsfwCount(v)
	})
}

// AddNsfwCount adds v to the "nsfw_count" field.
func (u *GenerationUpsertOne) AddNsfwCount(v int32) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.AddNsfwCount(v)
	})
}

// UpdateNsfwCount sets the "nsfw_count" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateNsfwCount() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateNsfwCount()
	})
}

// SetSeed sets the "seed" field.
func (u *GenerationUpsertOne) SetSeed(v int) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetSeed(v)
	})
}

// AddSeed adds v to the "seed" field.
func (u *GenerationUpsertOne) AddSeed(v int) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.AddSeed(v)
	})
}

// UpdateSeed sets the "seed" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateSeed() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateSeed()
	})
}

// SetStatus sets the "status" field.
func (u *GenerationUpsertOne) SetStatus(v generation.Status) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateStatus() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateStatus()
	})
}

// SetFailureReason sets the "failure_reason" field.
func (u *GenerationUpsertOne) SetFailureReason(v string) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetFailureReason(v)
	})
}

// UpdateFailureReason sets the "failure_reason" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateFailureReason() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateFailureReason()
	})
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (u *GenerationUpsertOne) ClearFailureReason() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.ClearFailureReason()
	})
}

// SetCountryCode sets the "country_code" field.
func (u *GenerationUpsertOne) SetCountryCode(v string) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetCountryCode(v)
	})
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateCountryCode() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateCountryCode()
	})
}

// ClearCountryCode clears the value of the "country_code" field.
func (u *GenerationUpsertOne) ClearCountryCode() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.ClearCountryCode()
	})
}

// SetInitImageURL sets the "init_image_url" field.
func (u *GenerationUpsertOne) SetInitImageURL(v string) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetInitImageURL(v)
	})
}

// UpdateInitImageURL sets the "init_image_url" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateInitImageURL() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateInitImageURL()
	})
}

// ClearInitImageURL clears the value of the "init_image_url" field.
func (u *GenerationUpsertOne) ClearInitImageURL() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.ClearInitImageURL()
	})
}

// SetMaskImageURL sets the "mask_image_url" field.
func (u *GenerationUpsertOne) SetMaskImageURL(v string) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetMaskImageURL(v)
	})
}

// UpdateMaskImageURL sets the "mask_image_url" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateMaskImageURL() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateMaskImageURL()
	})
}

// ClearMaskImageURL clears the value of the "mask_image_url" field.
func (u *GenerationUpsertOne) ClearMaskImageURL() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.ClearMaskImageURL()
	})
}

// SetPromptStrength sets the "prompt_strength" field.
func (u *GenerationUpsertOne) SetPromptStrength(v float32) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetPromptStrength(v)
	})
}

// AddPromptStrength adds v to the "prompt_strength" field.
func (u *GenerationUpsertOne) AddPromptStrength(v float32) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.AddPromptStrength(v)
	})
}

// UpdatePromptStrength sets the "prompt_strength" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdatePromptStrength() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdatePromptStrength()
	})
}

// ClearPromptStrength clears the value of the "prompt_strength" field.
func (u *GenerationUpsertOne) ClearPromptStrength() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.ClearPromptStrength()
	})
}

// SetWasAutoSubmitted sets the "was_auto_submitted" field.
func (u *GenerationUpsertOne) SetWasAutoSubmitted(v bool) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetWasAutoSubmitted(v)
	})
}

// UpdateWasAutoSubmitted sets the "was_auto_submitted" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateWasAutoSubmitted() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateWasAutoSubmitted()
	})
}

// SetStripeProductID sets the "stripe_product_id" field.
func (u *GenerationUpsertOne) SetStripeProductID(v string) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetStripeProductID(v)
	})
}

// UpdateStripeProductID sets the "stripe_product_id" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateStripeProductID() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateStripeProductID()
	})
}

// ClearStripeProductID clears the value of the "stripe_product_id" field.
func (u *GenerationUpsertOne) ClearStripeProductID() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.ClearStripeProductID()
	})
}

// SetSourceType sets the "source_type" field.
func (u *GenerationUpsertOne) SetSourceType(v enttypes.SourceType) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetSourceType(v)
	})
}

// UpdateSourceType sets the "source_type" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateSourceType() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateSourceType()
	})
}

// SetWebhookToken sets the "webhook_token" field.
func (u *GenerationUpsertOne) SetWebhookToken(v uuid.UUID) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetWebhookToken(v)
	})
}

// UpdateWebhookToken sets the "webhook_token" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateWebhookToken() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateWebhookToken()
	})
}

// SetPromptID sets the "prompt_id" field.
func (u *GenerationUpsertOne) SetPromptID(v uuid.UUID) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetPromptID(v)
	})
}

// UpdatePromptID sets the "prompt_id" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdatePromptID() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdatePromptID()
	})
}

// ClearPromptID clears the value of the "prompt_id" field.
func (u *GenerationUpsertOne) ClearPromptID() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.ClearPromptID()
	})
}

// SetNegativePromptID sets the "negative_prompt_id" field.
func (u *GenerationUpsertOne) SetNegativePromptID(v uuid.UUID) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetNegativePromptID(v)
	})
}

// UpdateNegativePromptID sets the "negative_prompt_id" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateNegativePromptID() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateNegativePromptID()
	})
}

// ClearNegativePromptID clears the value of the "negative_prompt_id" field.
func (u *GenerationUpsertOne) ClearNegativePromptID() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.ClearNegativePromptID()
	})
}

// SetModelID sets the "model_id" field.
func (u *GenerationUpsertOne) SetModelID(v uuid.UUID) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetModelID(v)
	})
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateModelID() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateModelID()
	})
}

// SetSchedulerID sets the "scheduler_id" field.
func (u *GenerationUpsertOne) SetSchedulerID(v uuid.UUID) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetSchedulerID(v)
	})
}

// UpdateSchedulerID sets the "scheduler_id" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateSchedulerID() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateSchedulerID()
	})
}

// SetUserID sets the "user_id" field.
func (u *GenerationUpsertOne) SetUserID(v uuid.UUID) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateUserID() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateUserID()
	})
}

// SetDeviceInfoID sets the "device_info_id" field.
func (u *GenerationUpsertOne) SetDeviceInfoID(v uuid.UUID) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetDeviceInfoID(v)
	})
}

// UpdateDeviceInfoID sets the "device_info_id" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateDeviceInfoID() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateDeviceInfoID()
	})
}

// SetAPITokenID sets the "api_token_id" field.
func (u *GenerationUpsertOne) SetAPITokenID(v uuid.UUID) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetAPITokenID(v)
	})
}

// UpdateAPITokenID sets the "api_token_id" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateAPITokenID() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateAPITokenID()
	})
}

// ClearAPITokenID clears the value of the "api_token_id" field.
func (u *GenerationUpsertOne) ClearAPITokenID() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.ClearAPITokenID()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *GenerationUpsertOne) SetStartedAt(v time.Time) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateStartedAt() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *GenerationUpsertOne) ClearStartedAt() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.ClearStartedAt()
	})
}

// SetCompletedAt sets the "completed_at" field.
func (u *GenerationUpsertOne) SetCompletedAt(v time.Time) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetCompletedAt(v)
	})
}

// UpdateCompletedAt sets the "completed_at" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateCompletedAt() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateCompletedAt()
	})
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (u *GenerationUpsertOne) ClearCompletedAt() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.ClearCompletedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GenerationUpsertOne) SetUpdatedAt(v time.Time) *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GenerationUpsertOne) UpdateUpdatedAt() *GenerationUpsertOne {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *GenerationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GenerationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GenerationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GenerationUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: GenerationUpsertOne.ID is not supported by MySQL driver. Use GenerationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GenerationUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GenerationCreateBulk is the builder for creating many Generation entities in bulk.
type GenerationCreateBulk struct {
	config
	err      error
	builders []*GenerationCreate
	conflict []sql.ConflictOption
}

// Save creates the Generation entities in the database.
func (gcb *GenerationCreateBulk) Save(ctx context.Context) ([]*Generation, error) {
	if gcb.err != nil {
		return nil, gcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Generation, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GenerationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GenerationCreateBulk) SaveX(ctx context.Context) []*Generation {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GenerationCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GenerationCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Generation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GenerationUpsert) {
//			SetWidth(v+v).
//		}).
//		Exec(ctx)
func (gcb *GenerationCreateBulk) OnConflict(opts ...sql.ConflictOption) *GenerationUpsertBulk {
	gcb.conflict = opts
	return &GenerationUpsertBulk{
		create: gcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Generation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gcb *GenerationCreateBulk) OnConflictColumns(columns ...string) *GenerationUpsertBulk {
	gcb.conflict = append(gcb.conflict, sql.ConflictColumns(columns...))
	return &GenerationUpsertBulk{
		create: gcb,
	}
}

// GenerationUpsertBulk is the builder for "upsert"-ing
// a bulk of Generation nodes.
type GenerationUpsertBulk struct {
	create *GenerationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Generation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(generation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GenerationUpsertBulk) UpdateNewValues() *GenerationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(generation.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(generation.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Generation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GenerationUpsertBulk) Ignore() *GenerationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GenerationUpsertBulk) DoNothing() *GenerationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GenerationCreateBulk.OnConflict
// documentation for more info.
func (u *GenerationUpsertBulk) Update(set func(*GenerationUpsert)) *GenerationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GenerationUpsert{UpdateSet: update})
	}))
	return u
}

// SetWidth sets the "width" field.
func (u *GenerationUpsertBulk) SetWidth(v int32) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetWidth(v)
	})
}

// AddWidth adds v to the "width" field.
func (u *GenerationUpsertBulk) AddWidth(v int32) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.AddWidth(v)
	})
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateWidth() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateWidth()
	})
}

// SetHeight sets the "height" field.
func (u *GenerationUpsertBulk) SetHeight(v int32) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetHeight(v)
	})
}

// AddHeight adds v to the "height" field.
func (u *GenerationUpsertBulk) AddHeight(v int32) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.AddHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateHeight() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateHeight()
	})
}

// SetInferenceSteps sets the "inference_steps" field.
func (u *GenerationUpsertBulk) SetInferenceSteps(v int32) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetInferenceSteps(v)
	})
}

// AddInferenceSteps adds v to the "inference_steps" field.
func (u *GenerationUpsertBulk) AddInferenceSteps(v int32) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.AddInferenceSteps(v)
	})
}

// UpdateInferenceSteps sets the "inference_steps" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateInferenceSteps() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateInferenceSteps()
	})
}

// SetGuidanceScale sets the "guidance_scale" field.
func (u *GenerationUpsertBulk) SetGuidanceScale(v float32) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetGuidanceScale(v)
	})
}

// AddGuidanceScale adds v to the "guidance_scale" field.
func (u *GenerationUpsertBulk) AddGuidanceScale(v float32) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.AddGuidanceScale(v)
	})
}

// UpdateGuidanceScale sets the "guidance_scale" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateGuidanceScale() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateGuidanceScale()
	})
}

// SetNumOutputs sets the "num_outputs" field.
func (u *GenerationUpsertBulk) SetNumOutputs(v int32) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetNumOutputs(v)
	})
}

// AddNumOutputs adds v to the "num_outputs" field.
func (u *GenerationUpsertBulk) AddNumOutputs(v int32) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.AddNumOutputs(v)
	})
}

// UpdateNumOutputs sets the "num_outputs" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateNumOutputs() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateNumOutputs()
	})
}

// SetNsfwCount sets the "nsfw_count" field.
func (u *GenerationUpsertBulk) SetNsfwCount(v int32) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetNsfwCount(v)
	})
}

// AddNsfwCount adds v to the "nsfw_count" field.
func (u *GenerationUpsertBulk) AddNsfwCount(v int32) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.AddNsfwCount(v)
	})
}

// UpdateNsfwCount sets the "nsfw_count" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateNsfwCount() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateNsfwCount()
	})
}

// SetSeed sets the "seed" field.
func (u *GenerationUpsertBulk) SetSeed(v int) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetSeed(v)
	})
}

// AddSeed adds v to the "seed" field.
func (u *GenerationUpsertBulk) AddSeed(v int) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.AddSeed(v)
	})
}

// UpdateSeed sets the "seed" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateSeed() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateSeed()
	})
}

// SetStatus sets the "status" field.
func (u *GenerationUpsertBulk) SetStatus(v generation.Status) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateStatus() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateStatus()
	})
}

// SetFailureReason sets the "failure_reason" field.
func (u *GenerationUpsertBulk) SetFailureReason(v string) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetFailureReason(v)
	})
}

// UpdateFailureReason sets the "failure_reason" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateFailureReason() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateFailureReason()
	})
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (u *GenerationUpsertBulk) ClearFailureReason() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.ClearFailureReason()
	})
}

// SetCountryCode sets the "country_code" field.
func (u *GenerationUpsertBulk) SetCountryCode(v string) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetCountryCode(v)
	})
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateCountryCode() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateCountryCode()
	})
}

// ClearCountryCode clears the value of the "country_code" field.
func (u *GenerationUpsertBulk) ClearCountryCode() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.ClearCountryCode()
	})
}

// SetInitImageURL sets the "init_image_url" field.
func (u *GenerationUpsertBulk) SetInitImageURL(v string) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetInitImageURL(v)
	})
}

// UpdateInitImageURL sets the "init_image_url" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateInitImageURL() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateInitImageURL()
	})
}

// ClearInitImageURL clears the value of the "init_image_url" field.
func (u *GenerationUpsertBulk) ClearInitImageURL() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.ClearInitImageURL()
	})
}

// SetMaskImageURL sets the "mask_image_url" field.
func (u *GenerationUpsertBulk) SetMaskImageURL(v string) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetMaskImageURL(v)
	})
}

// UpdateMaskImageURL sets the "mask_image_url" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateMaskImageURL() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateMaskImageURL()
	})
}

// ClearMaskImageURL clears the value of the "mask_image_url" field.
func (u *GenerationUpsertBulk) ClearMaskImageURL() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.ClearMaskImageURL()
	})
}

// SetPromptStrength sets the "prompt_strength" field.
func (u *GenerationUpsertBulk) SetPromptStrength(v float32) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetPromptStrength(v)
	})
}

// AddPromptStrength adds v to the "prompt_strength" field.
func (u *GenerationUpsertBulk) AddPromptStrength(v float32) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.AddPromptStrength(v)
	})
}

// UpdatePromptStrength sets the "prompt_strength" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdatePromptStrength() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdatePromptStrength()
	})
}

// ClearPromptStrength clears the value of the "prompt_strength" field.
func (u *GenerationUpsertBulk) ClearPromptStrength() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.ClearPromptStrength()
	})
}

// SetWasAutoSubmitted sets the "was_auto_submitted" field.
func (u *GenerationUpsertBulk) SetWasAutoSubmitted(v bool) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetWasAutoSubmitted(v)
	})
}

// UpdateWasAutoSubmitted sets the "was_auto_submitted" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateWasAutoSubmitted() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateWasAutoSubmitted()
	})
}

// SetStripeProductID sets the "stripe_product_id" field.
func (u *GenerationUpsertBulk) SetStripeProductID(v string) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetStripeProductID(v)
	})
}

// UpdateStripeProductID sets the "stripe_product_id" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateStripeProductID() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateStripeProductID()
	})
}

// ClearStripeProductID clears the value of the "stripe_product_id" field.
func (u *GenerationUpsertBulk) ClearStripeProductID() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.ClearStripeProductID()
	})
}

// SetSourceType sets the "source_type" field.
func (u *GenerationUpsertBulk) SetSourceType(v enttypes.SourceType) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetSourceType(v)
	})
}

// UpdateSourceType sets the "source_type" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateSourceType() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateSourceType()
	})
}

// SetWebhookToken sets the "webhook_token" field.
func (u *GenerationUpsertBulk) SetWebhookToken(v uuid.UUID) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetWebhookToken(v)
	})
}

// UpdateWebhookToken sets the "webhook_token" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateWebhookToken() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateWebhookToken()
	})
}

// SetPromptID sets the "prompt_id" field.
func (u *GenerationUpsertBulk) SetPromptID(v uuid.UUID) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetPromptID(v)
	})
}

// UpdatePromptID sets the "prompt_id" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdatePromptID() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdatePromptID()
	})
}

// ClearPromptID clears the value of the "prompt_id" field.
func (u *GenerationUpsertBulk) ClearPromptID() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.ClearPromptID()
	})
}

// SetNegativePromptID sets the "negative_prompt_id" field.
func (u *GenerationUpsertBulk) SetNegativePromptID(v uuid.UUID) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetNegativePromptID(v)
	})
}

// UpdateNegativePromptID sets the "negative_prompt_id" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateNegativePromptID() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateNegativePromptID()
	})
}

// ClearNegativePromptID clears the value of the "negative_prompt_id" field.
func (u *GenerationUpsertBulk) ClearNegativePromptID() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.ClearNegativePromptID()
	})
}

// SetModelID sets the "model_id" field.
func (u *GenerationUpsertBulk) SetModelID(v uuid.UUID) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetModelID(v)
	})
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateModelID() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateModelID()
	})
}

// SetSchedulerID sets the "scheduler_id" field.
func (u *GenerationUpsertBulk) SetSchedulerID(v uuid.UUID) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetSchedulerID(v)
	})
}

// UpdateSchedulerID sets the "scheduler_id" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateSchedulerID() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateSchedulerID()
	})
}

// SetUserID sets the "user_id" field.
func (u *GenerationUpsertBulk) SetUserID(v uuid.UUID) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateUserID() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateUserID()
	})
}

// SetDeviceInfoID sets the "device_info_id" field.
func (u *GenerationUpsertBulk) SetDeviceInfoID(v uuid.UUID) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetDeviceInfoID(v)
	})
}

// UpdateDeviceInfoID sets the "device_info_id" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateDeviceInfoID() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateDeviceInfoID()
	})
}

// SetAPITokenID sets the "api_token_id" field.
func (u *GenerationUpsertBulk) SetAPITokenID(v uuid.UUID) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetAPITokenID(v)
	})
}

// UpdateAPITokenID sets the "api_token_id" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateAPITokenID() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateAPITokenID()
	})
}

// ClearAPITokenID clears the value of the "api_token_id" field.
func (u *GenerationUpsertBulk) ClearAPITokenID() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.ClearAPITokenID()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *GenerationUpsertBulk) SetStartedAt(v time.Time) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateStartedAt() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *GenerationUpsertBulk) ClearStartedAt() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.ClearStartedAt()
	})
}

// SetCompletedAt sets the "completed_at" field.
func (u *GenerationUpsertBulk) SetCompletedAt(v time.Time) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetCompletedAt(v)
	})
}

// UpdateCompletedAt sets the "completed_at" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateCompletedAt() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateCompletedAt()
	})
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (u *GenerationUpsertBulk) ClearCompletedAt() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.ClearCompletedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GenerationUpsertBulk) SetUpdatedAt(v time.Time) *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GenerationUpsertBulk) UpdateUpdatedAt() *GenerationUpsertBulk {
	return u.Update(func(s *GenerationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *GenerationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GenerationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GenerationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GenerationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
