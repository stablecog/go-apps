// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stablecog/sc-go/database/ent/predicate"
	"github.com/stablecog/sc-go/database/ent/usernameblacklist"
)

// UsernameBlacklistUpdate is the builder for updating UsernameBlacklist entities.
type UsernameBlacklistUpdate struct {
	config
	hooks     []Hook
	mutation  *UsernameBlacklistMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UsernameBlacklistUpdate builder.
func (ubu *UsernameBlacklistUpdate) Where(ps ...predicate.UsernameBlacklist) *UsernameBlacklistUpdate {
	ubu.mutation.Where(ps...)
	return ubu
}

// SetUsername sets the "username" field.
func (ubu *UsernameBlacklistUpdate) SetUsername(s string) *UsernameBlacklistUpdate {
	ubu.mutation.SetUsername(s)
	return ubu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (ubu *UsernameBlacklistUpdate) SetNillableUsername(s *string) *UsernameBlacklistUpdate {
	if s != nil {
		ubu.SetUsername(*s)
	}
	return ubu
}

// SetUpdatedAt sets the "updated_at" field.
func (ubu *UsernameBlacklistUpdate) SetUpdatedAt(t time.Time) *UsernameBlacklistUpdate {
	ubu.mutation.SetUpdatedAt(t)
	return ubu
}

// Mutation returns the UsernameBlacklistMutation object of the builder.
func (ubu *UsernameBlacklistUpdate) Mutation() *UsernameBlacklistMutation {
	return ubu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ubu *UsernameBlacklistUpdate) Save(ctx context.Context) (int, error) {
	ubu.defaults()
	return withHooks(ctx, ubu.sqlSave, ubu.mutation, ubu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ubu *UsernameBlacklistUpdate) SaveX(ctx context.Context) int {
	affected, err := ubu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ubu *UsernameBlacklistUpdate) Exec(ctx context.Context) error {
	_, err := ubu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubu *UsernameBlacklistUpdate) ExecX(ctx context.Context) {
	if err := ubu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ubu *UsernameBlacklistUpdate) defaults() {
	if _, ok := ubu.mutation.UpdatedAt(); !ok {
		v := usernameblacklist.UpdateDefaultUpdatedAt()
		ubu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ubu *UsernameBlacklistUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UsernameBlacklistUpdate {
	ubu.modifiers = append(ubu.modifiers, modifiers...)
	return ubu
}

func (ubu *UsernameBlacklistUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(usernameblacklist.Table, usernameblacklist.Columns, sqlgraph.NewFieldSpec(usernameblacklist.FieldID, field.TypeUUID))
	if ps := ubu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ubu.mutation.Username(); ok {
		_spec.SetField(usernameblacklist.FieldUsername, field.TypeString, value)
	}
	if value, ok := ubu.mutation.UpdatedAt(); ok {
		_spec.SetField(usernameblacklist.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(ubu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ubu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usernameblacklist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ubu.mutation.done = true
	return n, nil
}

// UsernameBlacklistUpdateOne is the builder for updating a single UsernameBlacklist entity.
type UsernameBlacklistUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UsernameBlacklistMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUsername sets the "username" field.
func (ubuo *UsernameBlacklistUpdateOne) SetUsername(s string) *UsernameBlacklistUpdateOne {
	ubuo.mutation.SetUsername(s)
	return ubuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (ubuo *UsernameBlacklistUpdateOne) SetNillableUsername(s *string) *UsernameBlacklistUpdateOne {
	if s != nil {
		ubuo.SetUsername(*s)
	}
	return ubuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ubuo *UsernameBlacklistUpdateOne) SetUpdatedAt(t time.Time) *UsernameBlacklistUpdateOne {
	ubuo.mutation.SetUpdatedAt(t)
	return ubuo
}

// Mutation returns the UsernameBlacklistMutation object of the builder.
func (ubuo *UsernameBlacklistUpdateOne) Mutation() *UsernameBlacklistMutation {
	return ubuo.mutation
}

// Where appends a list predicates to the UsernameBlacklistUpdate builder.
func (ubuo *UsernameBlacklistUpdateOne) Where(ps ...predicate.UsernameBlacklist) *UsernameBlacklistUpdateOne {
	ubuo.mutation.Where(ps...)
	return ubuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ubuo *UsernameBlacklistUpdateOne) Select(field string, fields ...string) *UsernameBlacklistUpdateOne {
	ubuo.fields = append([]string{field}, fields...)
	return ubuo
}

// Save executes the query and returns the updated UsernameBlacklist entity.
func (ubuo *UsernameBlacklistUpdateOne) Save(ctx context.Context) (*UsernameBlacklist, error) {
	ubuo.defaults()
	return withHooks(ctx, ubuo.sqlSave, ubuo.mutation, ubuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ubuo *UsernameBlacklistUpdateOne) SaveX(ctx context.Context) *UsernameBlacklist {
	node, err := ubuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ubuo *UsernameBlacklistUpdateOne) Exec(ctx context.Context) error {
	_, err := ubuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubuo *UsernameBlacklistUpdateOne) ExecX(ctx context.Context) {
	if err := ubuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ubuo *UsernameBlacklistUpdateOne) defaults() {
	if _, ok := ubuo.mutation.UpdatedAt(); !ok {
		v := usernameblacklist.UpdateDefaultUpdatedAt()
		ubuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ubuo *UsernameBlacklistUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UsernameBlacklistUpdateOne {
	ubuo.modifiers = append(ubuo.modifiers, modifiers...)
	return ubuo
}

func (ubuo *UsernameBlacklistUpdateOne) sqlSave(ctx context.Context) (_node *UsernameBlacklist, err error) {
	_spec := sqlgraph.NewUpdateSpec(usernameblacklist.Table, usernameblacklist.Columns, sqlgraph.NewFieldSpec(usernameblacklist.FieldID, field.TypeUUID))
	id, ok := ubuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UsernameBlacklist.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ubuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usernameblacklist.FieldID)
		for _, f := range fields {
			if !usernameblacklist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usernameblacklist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ubuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ubuo.mutation.Username(); ok {
		_spec.SetField(usernameblacklist.FieldUsername, field.TypeString, value)
	}
	if value, ok := ubuo.mutation.UpdatedAt(); ok {
		_spec.SetField(usernameblacklist.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(ubuo.modifiers...)
	_node = &UsernameBlacklist{config: ubuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ubuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usernameblacklist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ubuo.mutation.done = true
	return _node, nil
}
