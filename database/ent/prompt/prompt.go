// Code generated by ent, DO NOT EDIT.

package prompt

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the prompt type in the database.
	Label = "prompt"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldTranslatedText holds the string denoting the translated_text field in the database.
	FieldTranslatedText = "translated_text"
	// FieldRanTranslation holds the string denoting the ran_translation field in the database.
	FieldRanTranslation = "ran_translation"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeGenerations holds the string denoting the generations edge name in mutations.
	EdgeGenerations = "generations"
	// EdgeVoiceovers holds the string denoting the voiceovers edge name in mutations.
	EdgeVoiceovers = "voiceovers"
	// Table holds the table name of the prompt in the database.
	Table = "prompts"
	// GenerationsTable is the table that holds the generations relation/edge.
	GenerationsTable = "generations"
	// GenerationsInverseTable is the table name for the Generation entity.
	// It exists in this package in order to avoid circular dependency with the "generation" package.
	GenerationsInverseTable = "generations"
	// GenerationsColumn is the table column denoting the generations relation/edge.
	GenerationsColumn = "prompt_id"
	// VoiceoversTable is the table that holds the voiceovers relation/edge.
	VoiceoversTable = "voiceovers"
	// VoiceoversInverseTable is the table name for the Voiceover entity.
	// It exists in this package in order to avoid circular dependency with the "voiceover" package.
	VoiceoversInverseTable = "voiceovers"
	// VoiceoversColumn is the table column denoting the voiceovers relation/edge.
	VoiceoversColumn = "prompt_id"
)

// Columns holds all SQL columns for prompt fields.
var Columns = []string{
	FieldID,
	FieldText,
	FieldTranslatedText,
	FieldRanTranslation,
	FieldType,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultRanTranslation holds the default value on creation for the "ran_translation" field.
	DefaultRanTranslation bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeImage     Type = "image"
	TypeVoiceover Type = "voiceover"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeImage, TypeVoiceover:
		return nil
	default:
		return fmt.Errorf("prompt: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Prompt queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByTranslatedText orders the results by the translated_text field.
func ByTranslatedText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTranslatedText, opts...).ToFunc()
}

// ByRanTranslation orders the results by the ran_translation field.
func ByRanTranslation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRanTranslation, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByGenerationsCount orders the results by generations count.
func ByGenerationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGenerationsStep(), opts...)
	}
}

// ByGenerations orders the results by generations terms.
func ByGenerations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGenerationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVoiceoversCount orders the results by voiceovers count.
func ByVoiceoversCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVoiceoversStep(), opts...)
	}
}

// ByVoiceovers orders the results by voiceovers terms.
func ByVoiceovers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVoiceoversStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newGenerationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GenerationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GenerationsTable, GenerationsColumn),
	)
}
func newVoiceoversStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VoiceoversInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VoiceoversTable, VoiceoversColumn),
	)
}
