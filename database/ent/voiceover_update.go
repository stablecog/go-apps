// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/apitoken"
	"github.com/stablecog/sc-go/database/ent/deviceinfo"
	"github.com/stablecog/sc-go/database/ent/predicate"
	"github.com/stablecog/sc-go/database/ent/prompt"
	"github.com/stablecog/sc-go/database/ent/user"
	"github.com/stablecog/sc-go/database/ent/voiceover"
	"github.com/stablecog/sc-go/database/ent/voiceovermodel"
	"github.com/stablecog/sc-go/database/ent/voiceoveroutput"
	"github.com/stablecog/sc-go/database/ent/voiceoverspeaker"
	"github.com/stablecog/sc-go/database/enttypes"
)

// VoiceoverUpdate is the builder for updating Voiceover entities.
type VoiceoverUpdate struct {
	config
	hooks     []Hook
	mutation  *VoiceoverMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the VoiceoverUpdate builder.
func (vu *VoiceoverUpdate) Where(ps ...predicate.Voiceover) *VoiceoverUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetCountryCode sets the "country_code" field.
func (vu *VoiceoverUpdate) SetCountryCode(s string) *VoiceoverUpdate {
	vu.mutation.SetCountryCode(s)
	return vu
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (vu *VoiceoverUpdate) SetNillableCountryCode(s *string) *VoiceoverUpdate {
	if s != nil {
		vu.SetCountryCode(*s)
	}
	return vu
}

// ClearCountryCode clears the value of the "country_code" field.
func (vu *VoiceoverUpdate) ClearCountryCode() *VoiceoverUpdate {
	vu.mutation.ClearCountryCode()
	return vu
}

// SetStatus sets the "status" field.
func (vu *VoiceoverUpdate) SetStatus(v voiceover.Status) *VoiceoverUpdate {
	vu.mutation.SetStatus(v)
	return vu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vu *VoiceoverUpdate) SetNillableStatus(v *voiceover.Status) *VoiceoverUpdate {
	if v != nil {
		vu.SetStatus(*v)
	}
	return vu
}

// SetFailureReason sets the "failure_reason" field.
func (vu *VoiceoverUpdate) SetFailureReason(s string) *VoiceoverUpdate {
	vu.mutation.SetFailureReason(s)
	return vu
}

// SetNillableFailureReason sets the "failure_reason" field if the given value is not nil.
func (vu *VoiceoverUpdate) SetNillableFailureReason(s *string) *VoiceoverUpdate {
	if s != nil {
		vu.SetFailureReason(*s)
	}
	return vu
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (vu *VoiceoverUpdate) ClearFailureReason() *VoiceoverUpdate {
	vu.mutation.ClearFailureReason()
	return vu
}

// SetStripeProductID sets the "stripe_product_id" field.
func (vu *VoiceoverUpdate) SetStripeProductID(s string) *VoiceoverUpdate {
	vu.mutation.SetStripeProductID(s)
	return vu
}

// SetNillableStripeProductID sets the "stripe_product_id" field if the given value is not nil.
func (vu *VoiceoverUpdate) SetNillableStripeProductID(s *string) *VoiceoverUpdate {
	if s != nil {
		vu.SetStripeProductID(*s)
	}
	return vu
}

// ClearStripeProductID clears the value of the "stripe_product_id" field.
func (vu *VoiceoverUpdate) ClearStripeProductID() *VoiceoverUpdate {
	vu.mutation.ClearStripeProductID()
	return vu
}

// SetTemperature sets the "temperature" field.
func (vu *VoiceoverUpdate) SetTemperature(f float32) *VoiceoverUpdate {
	vu.mutation.ResetTemperature()
	vu.mutation.SetTemperature(f)
	return vu
}

// SetNillableTemperature sets the "temperature" field if the given value is not nil.
func (vu *VoiceoverUpdate) SetNillableTemperature(f *float32) *VoiceoverUpdate {
	if f != nil {
		vu.SetTemperature(*f)
	}
	return vu
}

// AddTemperature adds f to the "temperature" field.
func (vu *VoiceoverUpdate) AddTemperature(f float32) *VoiceoverUpdate {
	vu.mutation.AddTemperature(f)
	return vu
}

// SetSeed sets the "seed" field.
func (vu *VoiceoverUpdate) SetSeed(i int) *VoiceoverUpdate {
	vu.mutation.ResetSeed()
	vu.mutation.SetSeed(i)
	return vu
}

// SetNillableSeed sets the "seed" field if the given value is not nil.
func (vu *VoiceoverUpdate) SetNillableSeed(i *int) *VoiceoverUpdate {
	if i != nil {
		vu.SetSeed(*i)
	}
	return vu
}

// AddSeed adds i to the "seed" field.
func (vu *VoiceoverUpdate) AddSeed(i int) *VoiceoverUpdate {
	vu.mutation.AddSeed(i)
	return vu
}

// SetWasAutoSubmitted sets the "was_auto_submitted" field.
func (vu *VoiceoverUpdate) SetWasAutoSubmitted(b bool) *VoiceoverUpdate {
	vu.mutation.SetWasAutoSubmitted(b)
	return vu
}

// SetNillableWasAutoSubmitted sets the "was_auto_submitted" field if the given value is not nil.
func (vu *VoiceoverUpdate) SetNillableWasAutoSubmitted(b *bool) *VoiceoverUpdate {
	if b != nil {
		vu.SetWasAutoSubmitted(*b)
	}
	return vu
}

// SetDenoiseAudio sets the "denoise_audio" field.
func (vu *VoiceoverUpdate) SetDenoiseAudio(b bool) *VoiceoverUpdate {
	vu.mutation.SetDenoiseAudio(b)
	return vu
}

// SetNillableDenoiseAudio sets the "denoise_audio" field if the given value is not nil.
func (vu *VoiceoverUpdate) SetNillableDenoiseAudio(b *bool) *VoiceoverUpdate {
	if b != nil {
		vu.SetDenoiseAudio(*b)
	}
	return vu
}

// SetRemoveSilence sets the "remove_silence" field.
func (vu *VoiceoverUpdate) SetRemoveSilence(b bool) *VoiceoverUpdate {
	vu.mutation.SetRemoveSilence(b)
	return vu
}

// SetNillableRemoveSilence sets the "remove_silence" field if the given value is not nil.
func (vu *VoiceoverUpdate) SetNillableRemoveSilence(b *bool) *VoiceoverUpdate {
	if b != nil {
		vu.SetRemoveSilence(*b)
	}
	return vu
}

// SetCost sets the "cost" field.
func (vu *VoiceoverUpdate) SetCost(i int32) *VoiceoverUpdate {
	vu.mutation.ResetCost()
	vu.mutation.SetCost(i)
	return vu
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (vu *VoiceoverUpdate) SetNillableCost(i *int32) *VoiceoverUpdate {
	if i != nil {
		vu.SetCost(*i)
	}
	return vu
}

// AddCost adds i to the "cost" field.
func (vu *VoiceoverUpdate) AddCost(i int32) *VoiceoverUpdate {
	vu.mutation.AddCost(i)
	return vu
}

// SetSourceType sets the "source_type" field.
func (vu *VoiceoverUpdate) SetSourceType(et enttypes.SourceType) *VoiceoverUpdate {
	vu.mutation.SetSourceType(et)
	return vu
}

// SetNillableSourceType sets the "source_type" field if the given value is not nil.
func (vu *VoiceoverUpdate) SetNillableSourceType(et *enttypes.SourceType) *VoiceoverUpdate {
	if et != nil {
		vu.SetSourceType(*et)
	}
	return vu
}

// SetPromptID sets the "prompt_id" field.
func (vu *VoiceoverUpdate) SetPromptID(u uuid.UUID) *VoiceoverUpdate {
	vu.mutation.SetPromptID(u)
	return vu
}

// SetNillablePromptID sets the "prompt_id" field if the given value is not nil.
func (vu *VoiceoverUpdate) SetNillablePromptID(u *uuid.UUID) *VoiceoverUpdate {
	if u != nil {
		vu.SetPromptID(*u)
	}
	return vu
}

// ClearPromptID clears the value of the "prompt_id" field.
func (vu *VoiceoverUpdate) ClearPromptID() *VoiceoverUpdate {
	vu.mutation.ClearPromptID()
	return vu
}

// SetUserID sets the "user_id" field.
func (vu *VoiceoverUpdate) SetUserID(u uuid.UUID) *VoiceoverUpdate {
	vu.mutation.SetUserID(u)
	return vu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (vu *VoiceoverUpdate) SetNillableUserID(u *uuid.UUID) *VoiceoverUpdate {
	if u != nil {
		vu.SetUserID(*u)
	}
	return vu
}

// SetDeviceInfoID sets the "device_info_id" field.
func (vu *VoiceoverUpdate) SetDeviceInfoID(u uuid.UUID) *VoiceoverUpdate {
	vu.mutation.SetDeviceInfoID(u)
	return vu
}

// SetNillableDeviceInfoID sets the "device_info_id" field if the given value is not nil.
func (vu *VoiceoverUpdate) SetNillableDeviceInfoID(u *uuid.UUID) *VoiceoverUpdate {
	if u != nil {
		vu.SetDeviceInfoID(*u)
	}
	return vu
}

// SetModelID sets the "model_id" field.
func (vu *VoiceoverUpdate) SetModelID(u uuid.UUID) *VoiceoverUpdate {
	vu.mutation.SetModelID(u)
	return vu
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (vu *VoiceoverUpdate) SetNillableModelID(u *uuid.UUID) *VoiceoverUpdate {
	if u != nil {
		vu.SetModelID(*u)
	}
	return vu
}

// SetSpeakerID sets the "speaker_id" field.
func (vu *VoiceoverUpdate) SetSpeakerID(u uuid.UUID) *VoiceoverUpdate {
	vu.mutation.SetSpeakerID(u)
	return vu
}

// SetNillableSpeakerID sets the "speaker_id" field if the given value is not nil.
func (vu *VoiceoverUpdate) SetNillableSpeakerID(u *uuid.UUID) *VoiceoverUpdate {
	if u != nil {
		vu.SetSpeakerID(*u)
	}
	return vu
}

// SetAPITokenID sets the "api_token_id" field.
func (vu *VoiceoverUpdate) SetAPITokenID(u uuid.UUID) *VoiceoverUpdate {
	vu.mutation.SetAPITokenID(u)
	return vu
}

// SetNillableAPITokenID sets the "api_token_id" field if the given value is not nil.
func (vu *VoiceoverUpdate) SetNillableAPITokenID(u *uuid.UUID) *VoiceoverUpdate {
	if u != nil {
		vu.SetAPITokenID(*u)
	}
	return vu
}

// ClearAPITokenID clears the value of the "api_token_id" field.
func (vu *VoiceoverUpdate) ClearAPITokenID() *VoiceoverUpdate {
	vu.mutation.ClearAPITokenID()
	return vu
}

// SetStartedAt sets the "started_at" field.
func (vu *VoiceoverUpdate) SetStartedAt(t time.Time) *VoiceoverUpdate {
	vu.mutation.SetStartedAt(t)
	return vu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (vu *VoiceoverUpdate) SetNillableStartedAt(t *time.Time) *VoiceoverUpdate {
	if t != nil {
		vu.SetStartedAt(*t)
	}
	return vu
}

// ClearStartedAt clears the value of the "started_at" field.
func (vu *VoiceoverUpdate) ClearStartedAt() *VoiceoverUpdate {
	vu.mutation.ClearStartedAt()
	return vu
}

// SetCompletedAt sets the "completed_at" field.
func (vu *VoiceoverUpdate) SetCompletedAt(t time.Time) *VoiceoverUpdate {
	vu.mutation.SetCompletedAt(t)
	return vu
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (vu *VoiceoverUpdate) SetNillableCompletedAt(t *time.Time) *VoiceoverUpdate {
	if t != nil {
		vu.SetCompletedAt(*t)
	}
	return vu
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (vu *VoiceoverUpdate) ClearCompletedAt() *VoiceoverUpdate {
	vu.mutation.ClearCompletedAt()
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VoiceoverUpdate) SetUpdatedAt(t time.Time) *VoiceoverUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetUser sets the "user" edge to the User entity.
func (vu *VoiceoverUpdate) SetUser(u *User) *VoiceoverUpdate {
	return vu.SetUserID(u.ID)
}

// SetPrompt sets the "prompt" edge to the Prompt entity.
func (vu *VoiceoverUpdate) SetPrompt(p *Prompt) *VoiceoverUpdate {
	return vu.SetPromptID(p.ID)
}

// SetDeviceInfo sets the "device_info" edge to the DeviceInfo entity.
func (vu *VoiceoverUpdate) SetDeviceInfo(d *DeviceInfo) *VoiceoverUpdate {
	return vu.SetDeviceInfoID(d.ID)
}

// SetVoiceoverModelsID sets the "voiceover_models" edge to the VoiceoverModel entity by ID.
func (vu *VoiceoverUpdate) SetVoiceoverModelsID(id uuid.UUID) *VoiceoverUpdate {
	vu.mutation.SetVoiceoverModelsID(id)
	return vu
}

// SetVoiceoverModels sets the "voiceover_models" edge to the VoiceoverModel entity.
func (vu *VoiceoverUpdate) SetVoiceoverModels(v *VoiceoverModel) *VoiceoverUpdate {
	return vu.SetVoiceoverModelsID(v.ID)
}

// SetVoiceoverSpeakersID sets the "voiceover_speakers" edge to the VoiceoverSpeaker entity by ID.
func (vu *VoiceoverUpdate) SetVoiceoverSpeakersID(id uuid.UUID) *VoiceoverUpdate {
	vu.mutation.SetVoiceoverSpeakersID(id)
	return vu
}

// SetVoiceoverSpeakers sets the "voiceover_speakers" edge to the VoiceoverSpeaker entity.
func (vu *VoiceoverUpdate) SetVoiceoverSpeakers(v *VoiceoverSpeaker) *VoiceoverUpdate {
	return vu.SetVoiceoverSpeakersID(v.ID)
}

// SetAPITokensID sets the "api_tokens" edge to the ApiToken entity by ID.
func (vu *VoiceoverUpdate) SetAPITokensID(id uuid.UUID) *VoiceoverUpdate {
	vu.mutation.SetAPITokensID(id)
	return vu
}

// SetNillableAPITokensID sets the "api_tokens" edge to the ApiToken entity by ID if the given value is not nil.
func (vu *VoiceoverUpdate) SetNillableAPITokensID(id *uuid.UUID) *VoiceoverUpdate {
	if id != nil {
		vu = vu.SetAPITokensID(*id)
	}
	return vu
}

// SetAPITokens sets the "api_tokens" edge to the ApiToken entity.
func (vu *VoiceoverUpdate) SetAPITokens(a *ApiToken) *VoiceoverUpdate {
	return vu.SetAPITokensID(a.ID)
}

// AddVoiceoverOutputIDs adds the "voiceover_outputs" edge to the VoiceoverOutput entity by IDs.
func (vu *VoiceoverUpdate) AddVoiceoverOutputIDs(ids ...uuid.UUID) *VoiceoverUpdate {
	vu.mutation.AddVoiceoverOutputIDs(ids...)
	return vu
}

// AddVoiceoverOutputs adds the "voiceover_outputs" edges to the VoiceoverOutput entity.
func (vu *VoiceoverUpdate) AddVoiceoverOutputs(v ...*VoiceoverOutput) *VoiceoverUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.AddVoiceoverOutputIDs(ids...)
}

// Mutation returns the VoiceoverMutation object of the builder.
func (vu *VoiceoverUpdate) Mutation() *VoiceoverMutation {
	return vu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (vu *VoiceoverUpdate) ClearUser() *VoiceoverUpdate {
	vu.mutation.ClearUser()
	return vu
}

// ClearPrompt clears the "prompt" edge to the Prompt entity.
func (vu *VoiceoverUpdate) ClearPrompt() *VoiceoverUpdate {
	vu.mutation.ClearPrompt()
	return vu
}

// ClearDeviceInfo clears the "device_info" edge to the DeviceInfo entity.
func (vu *VoiceoverUpdate) ClearDeviceInfo() *VoiceoverUpdate {
	vu.mutation.ClearDeviceInfo()
	return vu
}

// ClearVoiceoverModels clears the "voiceover_models" edge to the VoiceoverModel entity.
func (vu *VoiceoverUpdate) ClearVoiceoverModels() *VoiceoverUpdate {
	vu.mutation.ClearVoiceoverModels()
	return vu
}

// ClearVoiceoverSpeakers clears the "voiceover_speakers" edge to the VoiceoverSpeaker entity.
func (vu *VoiceoverUpdate) ClearVoiceoverSpeakers() *VoiceoverUpdate {
	vu.mutation.ClearVoiceoverSpeakers()
	return vu
}

// ClearAPITokens clears the "api_tokens" edge to the ApiToken entity.
func (vu *VoiceoverUpdate) ClearAPITokens() *VoiceoverUpdate {
	vu.mutation.ClearAPITokens()
	return vu
}

// ClearVoiceoverOutputs clears all "voiceover_outputs" edges to the VoiceoverOutput entity.
func (vu *VoiceoverUpdate) ClearVoiceoverOutputs() *VoiceoverUpdate {
	vu.mutation.ClearVoiceoverOutputs()
	return vu
}

// RemoveVoiceoverOutputIDs removes the "voiceover_outputs" edge to VoiceoverOutput entities by IDs.
func (vu *VoiceoverUpdate) RemoveVoiceoverOutputIDs(ids ...uuid.UUID) *VoiceoverUpdate {
	vu.mutation.RemoveVoiceoverOutputIDs(ids...)
	return vu
}

// RemoveVoiceoverOutputs removes "voiceover_outputs" edges to VoiceoverOutput entities.
func (vu *VoiceoverUpdate) RemoveVoiceoverOutputs(v ...*VoiceoverOutput) *VoiceoverUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.RemoveVoiceoverOutputIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VoiceoverUpdate) Save(ctx context.Context) (int, error) {
	vu.defaults()
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VoiceoverUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VoiceoverUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VoiceoverUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VoiceoverUpdate) defaults() {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		v := voiceover.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VoiceoverUpdate) check() error {
	if v, ok := vu.mutation.Status(); ok {
		if err := voiceover.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Voiceover.status": %w`, err)}
		}
	}
	if v, ok := vu.mutation.SourceType(); ok {
		if err := voiceover.SourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "source_type", err: fmt.Errorf(`ent: validator failed for field "Voiceover.source_type": %w`, err)}
		}
	}
	if vu.mutation.UserCleared() && len(vu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Voiceover.user"`)
	}
	if vu.mutation.DeviceInfoCleared() && len(vu.mutation.DeviceInfoIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Voiceover.device_info"`)
	}
	if vu.mutation.VoiceoverModelsCleared() && len(vu.mutation.VoiceoverModelsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Voiceover.voiceover_models"`)
	}
	if vu.mutation.VoiceoverSpeakersCleared() && len(vu.mutation.VoiceoverSpeakersIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Voiceover.voiceover_speakers"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vu *VoiceoverUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VoiceoverUpdate {
	vu.modifiers = append(vu.modifiers, modifiers...)
	return vu
}

func (vu *VoiceoverUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(voiceover.Table, voiceover.Columns, sqlgraph.NewFieldSpec(voiceover.FieldID, field.TypeUUID))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.CountryCode(); ok {
		_spec.SetField(voiceover.FieldCountryCode, field.TypeString, value)
	}
	if vu.mutation.CountryCodeCleared() {
		_spec.ClearField(voiceover.FieldCountryCode, field.TypeString)
	}
	if value, ok := vu.mutation.Status(); ok {
		_spec.SetField(voiceover.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := vu.mutation.FailureReason(); ok {
		_spec.SetField(voiceover.FieldFailureReason, field.TypeString, value)
	}
	if vu.mutation.FailureReasonCleared() {
		_spec.ClearField(voiceover.FieldFailureReason, field.TypeString)
	}
	if value, ok := vu.mutation.StripeProductID(); ok {
		_spec.SetField(voiceover.FieldStripeProductID, field.TypeString, value)
	}
	if vu.mutation.StripeProductIDCleared() {
		_spec.ClearField(voiceover.FieldStripeProductID, field.TypeString)
	}
	if value, ok := vu.mutation.Temperature(); ok {
		_spec.SetField(voiceover.FieldTemperature, field.TypeFloat32, value)
	}
	if value, ok := vu.mutation.AddedTemperature(); ok {
		_spec.AddField(voiceover.FieldTemperature, field.TypeFloat32, value)
	}
	if value, ok := vu.mutation.Seed(); ok {
		_spec.SetField(voiceover.FieldSeed, field.TypeInt, value)
	}
	if value, ok := vu.mutation.AddedSeed(); ok {
		_spec.AddField(voiceover.FieldSeed, field.TypeInt, value)
	}
	if value, ok := vu.mutation.WasAutoSubmitted(); ok {
		_spec.SetField(voiceover.FieldWasAutoSubmitted, field.TypeBool, value)
	}
	if value, ok := vu.mutation.DenoiseAudio(); ok {
		_spec.SetField(voiceover.FieldDenoiseAudio, field.TypeBool, value)
	}
	if value, ok := vu.mutation.RemoveSilence(); ok {
		_spec.SetField(voiceover.FieldRemoveSilence, field.TypeBool, value)
	}
	if value, ok := vu.mutation.Cost(); ok {
		_spec.SetField(voiceover.FieldCost, field.TypeInt32, value)
	}
	if value, ok := vu.mutation.AddedCost(); ok {
		_spec.AddField(voiceover.FieldCost, field.TypeInt32, value)
	}
	if value, ok := vu.mutation.SourceType(); ok {
		_spec.SetField(voiceover.FieldSourceType, field.TypeEnum, value)
	}
	if value, ok := vu.mutation.StartedAt(); ok {
		_spec.SetField(voiceover.FieldStartedAt, field.TypeTime, value)
	}
	if vu.mutation.StartedAtCleared() {
		_spec.ClearField(voiceover.FieldStartedAt, field.TypeTime)
	}
	if value, ok := vu.mutation.CompletedAt(); ok {
		_spec.SetField(voiceover.FieldCompletedAt, field.TypeTime, value)
	}
	if vu.mutation.CompletedAtCleared() {
		_spec.ClearField(voiceover.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(voiceover.FieldUpdatedAt, field.TypeTime, value)
	}
	if vu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.UserTable,
			Columns: []string{voiceover.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.UserTable,
			Columns: []string{voiceover.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.PromptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.PromptTable,
			Columns: []string{voiceover.PromptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.PromptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.PromptTable,
			Columns: []string{voiceover.PromptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.DeviceInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.DeviceInfoTable,
			Columns: []string{voiceover.DeviceInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinfo.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.DeviceInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.DeviceInfoTable,
			Columns: []string{voiceover.DeviceInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinfo.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.VoiceoverModelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.VoiceoverModelsTable,
			Columns: []string{voiceover.VoiceoverModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceovermodel.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.VoiceoverModelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.VoiceoverModelsTable,
			Columns: []string{voiceover.VoiceoverModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceovermodel.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.VoiceoverSpeakersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.VoiceoverSpeakersTable,
			Columns: []string{voiceover.VoiceoverSpeakersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceoverspeaker.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.VoiceoverSpeakersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.VoiceoverSpeakersTable,
			Columns: []string{voiceover.VoiceoverSpeakersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceoverspeaker.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.APITokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.APITokensTable,
			Columns: []string{voiceover.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.APITokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.APITokensTable,
			Columns: []string{voiceover.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.VoiceoverOutputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voiceover.VoiceoverOutputsTable,
			Columns: []string{voiceover.VoiceoverOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceoveroutput.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedVoiceoverOutputsIDs(); len(nodes) > 0 && !vu.mutation.VoiceoverOutputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voiceover.VoiceoverOutputsTable,
			Columns: []string{voiceover.VoiceoverOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceoveroutput.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.VoiceoverOutputsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voiceover.VoiceoverOutputsTable,
			Columns: []string{voiceover.VoiceoverOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceoveroutput.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(vu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{voiceover.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VoiceoverUpdateOne is the builder for updating a single Voiceover entity.
type VoiceoverUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *VoiceoverMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCountryCode sets the "country_code" field.
func (vuo *VoiceoverUpdateOne) SetCountryCode(s string) *VoiceoverUpdateOne {
	vuo.mutation.SetCountryCode(s)
	return vuo
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (vuo *VoiceoverUpdateOne) SetNillableCountryCode(s *string) *VoiceoverUpdateOne {
	if s != nil {
		vuo.SetCountryCode(*s)
	}
	return vuo
}

// ClearCountryCode clears the value of the "country_code" field.
func (vuo *VoiceoverUpdateOne) ClearCountryCode() *VoiceoverUpdateOne {
	vuo.mutation.ClearCountryCode()
	return vuo
}

// SetStatus sets the "status" field.
func (vuo *VoiceoverUpdateOne) SetStatus(v voiceover.Status) *VoiceoverUpdateOne {
	vuo.mutation.SetStatus(v)
	return vuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vuo *VoiceoverUpdateOne) SetNillableStatus(v *voiceover.Status) *VoiceoverUpdateOne {
	if v != nil {
		vuo.SetStatus(*v)
	}
	return vuo
}

// SetFailureReason sets the "failure_reason" field.
func (vuo *VoiceoverUpdateOne) SetFailureReason(s string) *VoiceoverUpdateOne {
	vuo.mutation.SetFailureReason(s)
	return vuo
}

// SetNillableFailureReason sets the "failure_reason" field if the given value is not nil.
func (vuo *VoiceoverUpdateOne) SetNillableFailureReason(s *string) *VoiceoverUpdateOne {
	if s != nil {
		vuo.SetFailureReason(*s)
	}
	return vuo
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (vuo *VoiceoverUpdateOne) ClearFailureReason() *VoiceoverUpdateOne {
	vuo.mutation.ClearFailureReason()
	return vuo
}

// SetStripeProductID sets the "stripe_product_id" field.
func (vuo *VoiceoverUpdateOne) SetStripeProductID(s string) *VoiceoverUpdateOne {
	vuo.mutation.SetStripeProductID(s)
	return vuo
}

// SetNillableStripeProductID sets the "stripe_product_id" field if the given value is not nil.
func (vuo *VoiceoverUpdateOne) SetNillableStripeProductID(s *string) *VoiceoverUpdateOne {
	if s != nil {
		vuo.SetStripeProductID(*s)
	}
	return vuo
}

// ClearStripeProductID clears the value of the "stripe_product_id" field.
func (vuo *VoiceoverUpdateOne) ClearStripeProductID() *VoiceoverUpdateOne {
	vuo.mutation.ClearStripeProductID()
	return vuo
}

// SetTemperature sets the "temperature" field.
func (vuo *VoiceoverUpdateOne) SetTemperature(f float32) *VoiceoverUpdateOne {
	vuo.mutation.ResetTemperature()
	vuo.mutation.SetTemperature(f)
	return vuo
}

// SetNillableTemperature sets the "temperature" field if the given value is not nil.
func (vuo *VoiceoverUpdateOne) SetNillableTemperature(f *float32) *VoiceoverUpdateOne {
	if f != nil {
		vuo.SetTemperature(*f)
	}
	return vuo
}

// AddTemperature adds f to the "temperature" field.
func (vuo *VoiceoverUpdateOne) AddTemperature(f float32) *VoiceoverUpdateOne {
	vuo.mutation.AddTemperature(f)
	return vuo
}

// SetSeed sets the "seed" field.
func (vuo *VoiceoverUpdateOne) SetSeed(i int) *VoiceoverUpdateOne {
	vuo.mutation.ResetSeed()
	vuo.mutation.SetSeed(i)
	return vuo
}

// SetNillableSeed sets the "seed" field if the given value is not nil.
func (vuo *VoiceoverUpdateOne) SetNillableSeed(i *int) *VoiceoverUpdateOne {
	if i != nil {
		vuo.SetSeed(*i)
	}
	return vuo
}

// AddSeed adds i to the "seed" field.
func (vuo *VoiceoverUpdateOne) AddSeed(i int) *VoiceoverUpdateOne {
	vuo.mutation.AddSeed(i)
	return vuo
}

// SetWasAutoSubmitted sets the "was_auto_submitted" field.
func (vuo *VoiceoverUpdateOne) SetWasAutoSubmitted(b bool) *VoiceoverUpdateOne {
	vuo.mutation.SetWasAutoSubmitted(b)
	return vuo
}

// SetNillableWasAutoSubmitted sets the "was_auto_submitted" field if the given value is not nil.
func (vuo *VoiceoverUpdateOne) SetNillableWasAutoSubmitted(b *bool) *VoiceoverUpdateOne {
	if b != nil {
		vuo.SetWasAutoSubmitted(*b)
	}
	return vuo
}

// SetDenoiseAudio sets the "denoise_audio" field.
func (vuo *VoiceoverUpdateOne) SetDenoiseAudio(b bool) *VoiceoverUpdateOne {
	vuo.mutation.SetDenoiseAudio(b)
	return vuo
}

// SetNillableDenoiseAudio sets the "denoise_audio" field if the given value is not nil.
func (vuo *VoiceoverUpdateOne) SetNillableDenoiseAudio(b *bool) *VoiceoverUpdateOne {
	if b != nil {
		vuo.SetDenoiseAudio(*b)
	}
	return vuo
}

// SetRemoveSilence sets the "remove_silence" field.
func (vuo *VoiceoverUpdateOne) SetRemoveSilence(b bool) *VoiceoverUpdateOne {
	vuo.mutation.SetRemoveSilence(b)
	return vuo
}

// SetNillableRemoveSilence sets the "remove_silence" field if the given value is not nil.
func (vuo *VoiceoverUpdateOne) SetNillableRemoveSilence(b *bool) *VoiceoverUpdateOne {
	if b != nil {
		vuo.SetRemoveSilence(*b)
	}
	return vuo
}

// SetCost sets the "cost" field.
func (vuo *VoiceoverUpdateOne) SetCost(i int32) *VoiceoverUpdateOne {
	vuo.mutation.ResetCost()
	vuo.mutation.SetCost(i)
	return vuo
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (vuo *VoiceoverUpdateOne) SetNillableCost(i *int32) *VoiceoverUpdateOne {
	if i != nil {
		vuo.SetCost(*i)
	}
	return vuo
}

// AddCost adds i to the "cost" field.
func (vuo *VoiceoverUpdateOne) AddCost(i int32) *VoiceoverUpdateOne {
	vuo.mutation.AddCost(i)
	return vuo
}

// SetSourceType sets the "source_type" field.
func (vuo *VoiceoverUpdateOne) SetSourceType(et enttypes.SourceType) *VoiceoverUpdateOne {
	vuo.mutation.SetSourceType(et)
	return vuo
}

// SetNillableSourceType sets the "source_type" field if the given value is not nil.
func (vuo *VoiceoverUpdateOne) SetNillableSourceType(et *enttypes.SourceType) *VoiceoverUpdateOne {
	if et != nil {
		vuo.SetSourceType(*et)
	}
	return vuo
}

// SetPromptID sets the "prompt_id" field.
func (vuo *VoiceoverUpdateOne) SetPromptID(u uuid.UUID) *VoiceoverUpdateOne {
	vuo.mutation.SetPromptID(u)
	return vuo
}

// SetNillablePromptID sets the "prompt_id" field if the given value is not nil.
func (vuo *VoiceoverUpdateOne) SetNillablePromptID(u *uuid.UUID) *VoiceoverUpdateOne {
	if u != nil {
		vuo.SetPromptID(*u)
	}
	return vuo
}

// ClearPromptID clears the value of the "prompt_id" field.
func (vuo *VoiceoverUpdateOne) ClearPromptID() *VoiceoverUpdateOne {
	vuo.mutation.ClearPromptID()
	return vuo
}

// SetUserID sets the "user_id" field.
func (vuo *VoiceoverUpdateOne) SetUserID(u uuid.UUID) *VoiceoverUpdateOne {
	vuo.mutation.SetUserID(u)
	return vuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (vuo *VoiceoverUpdateOne) SetNillableUserID(u *uuid.UUID) *VoiceoverUpdateOne {
	if u != nil {
		vuo.SetUserID(*u)
	}
	return vuo
}

// SetDeviceInfoID sets the "device_info_id" field.
func (vuo *VoiceoverUpdateOne) SetDeviceInfoID(u uuid.UUID) *VoiceoverUpdateOne {
	vuo.mutation.SetDeviceInfoID(u)
	return vuo
}

// SetNillableDeviceInfoID sets the "device_info_id" field if the given value is not nil.
func (vuo *VoiceoverUpdateOne) SetNillableDeviceInfoID(u *uuid.UUID) *VoiceoverUpdateOne {
	if u != nil {
		vuo.SetDeviceInfoID(*u)
	}
	return vuo
}

// SetModelID sets the "model_id" field.
func (vuo *VoiceoverUpdateOne) SetModelID(u uuid.UUID) *VoiceoverUpdateOne {
	vuo.mutation.SetModelID(u)
	return vuo
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (vuo *VoiceoverUpdateOne) SetNillableModelID(u *uuid.UUID) *VoiceoverUpdateOne {
	if u != nil {
		vuo.SetModelID(*u)
	}
	return vuo
}

// SetSpeakerID sets the "speaker_id" field.
func (vuo *VoiceoverUpdateOne) SetSpeakerID(u uuid.UUID) *VoiceoverUpdateOne {
	vuo.mutation.SetSpeakerID(u)
	return vuo
}

// SetNillableSpeakerID sets the "speaker_id" field if the given value is not nil.
func (vuo *VoiceoverUpdateOne) SetNillableSpeakerID(u *uuid.UUID) *VoiceoverUpdateOne {
	if u != nil {
		vuo.SetSpeakerID(*u)
	}
	return vuo
}

// SetAPITokenID sets the "api_token_id" field.
func (vuo *VoiceoverUpdateOne) SetAPITokenID(u uuid.UUID) *VoiceoverUpdateOne {
	vuo.mutation.SetAPITokenID(u)
	return vuo
}

// SetNillableAPITokenID sets the "api_token_id" field if the given value is not nil.
func (vuo *VoiceoverUpdateOne) SetNillableAPITokenID(u *uuid.UUID) *VoiceoverUpdateOne {
	if u != nil {
		vuo.SetAPITokenID(*u)
	}
	return vuo
}

// ClearAPITokenID clears the value of the "api_token_id" field.
func (vuo *VoiceoverUpdateOne) ClearAPITokenID() *VoiceoverUpdateOne {
	vuo.mutation.ClearAPITokenID()
	return vuo
}

// SetStartedAt sets the "started_at" field.
func (vuo *VoiceoverUpdateOne) SetStartedAt(t time.Time) *VoiceoverUpdateOne {
	vuo.mutation.SetStartedAt(t)
	return vuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (vuo *VoiceoverUpdateOne) SetNillableStartedAt(t *time.Time) *VoiceoverUpdateOne {
	if t != nil {
		vuo.SetStartedAt(*t)
	}
	return vuo
}

// ClearStartedAt clears the value of the "started_at" field.
func (vuo *VoiceoverUpdateOne) ClearStartedAt() *VoiceoverUpdateOne {
	vuo.mutation.ClearStartedAt()
	return vuo
}

// SetCompletedAt sets the "completed_at" field.
func (vuo *VoiceoverUpdateOne) SetCompletedAt(t time.Time) *VoiceoverUpdateOne {
	vuo.mutation.SetCompletedAt(t)
	return vuo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (vuo *VoiceoverUpdateOne) SetNillableCompletedAt(t *time.Time) *VoiceoverUpdateOne {
	if t != nil {
		vuo.SetCompletedAt(*t)
	}
	return vuo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (vuo *VoiceoverUpdateOne) ClearCompletedAt() *VoiceoverUpdateOne {
	vuo.mutation.ClearCompletedAt()
	return vuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VoiceoverUpdateOne) SetUpdatedAt(t time.Time) *VoiceoverUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetUser sets the "user" edge to the User entity.
func (vuo *VoiceoverUpdateOne) SetUser(u *User) *VoiceoverUpdateOne {
	return vuo.SetUserID(u.ID)
}

// SetPrompt sets the "prompt" edge to the Prompt entity.
func (vuo *VoiceoverUpdateOne) SetPrompt(p *Prompt) *VoiceoverUpdateOne {
	return vuo.SetPromptID(p.ID)
}

// SetDeviceInfo sets the "device_info" edge to the DeviceInfo entity.
func (vuo *VoiceoverUpdateOne) SetDeviceInfo(d *DeviceInfo) *VoiceoverUpdateOne {
	return vuo.SetDeviceInfoID(d.ID)
}

// SetVoiceoverModelsID sets the "voiceover_models" edge to the VoiceoverModel entity by ID.
func (vuo *VoiceoverUpdateOne) SetVoiceoverModelsID(id uuid.UUID) *VoiceoverUpdateOne {
	vuo.mutation.SetVoiceoverModelsID(id)
	return vuo
}

// SetVoiceoverModels sets the "voiceover_models" edge to the VoiceoverModel entity.
func (vuo *VoiceoverUpdateOne) SetVoiceoverModels(v *VoiceoverModel) *VoiceoverUpdateOne {
	return vuo.SetVoiceoverModelsID(v.ID)
}

// SetVoiceoverSpeakersID sets the "voiceover_speakers" edge to the VoiceoverSpeaker entity by ID.
func (vuo *VoiceoverUpdateOne) SetVoiceoverSpeakersID(id uuid.UUID) *VoiceoverUpdateOne {
	vuo.mutation.SetVoiceoverSpeakersID(id)
	return vuo
}

// SetVoiceoverSpeakers sets the "voiceover_speakers" edge to the VoiceoverSpeaker entity.
func (vuo *VoiceoverUpdateOne) SetVoiceoverSpeakers(v *VoiceoverSpeaker) *VoiceoverUpdateOne {
	return vuo.SetVoiceoverSpeakersID(v.ID)
}

// SetAPITokensID sets the "api_tokens" edge to the ApiToken entity by ID.
func (vuo *VoiceoverUpdateOne) SetAPITokensID(id uuid.UUID) *VoiceoverUpdateOne {
	vuo.mutation.SetAPITokensID(id)
	return vuo
}

// SetNillableAPITokensID sets the "api_tokens" edge to the ApiToken entity by ID if the given value is not nil.
func (vuo *VoiceoverUpdateOne) SetNillableAPITokensID(id *uuid.UUID) *VoiceoverUpdateOne {
	if id != nil {
		vuo = vuo.SetAPITokensID(*id)
	}
	return vuo
}

// SetAPITokens sets the "api_tokens" edge to the ApiToken entity.
func (vuo *VoiceoverUpdateOne) SetAPITokens(a *ApiToken) *VoiceoverUpdateOne {
	return vuo.SetAPITokensID(a.ID)
}

// AddVoiceoverOutputIDs adds the "voiceover_outputs" edge to the VoiceoverOutput entity by IDs.
func (vuo *VoiceoverUpdateOne) AddVoiceoverOutputIDs(ids ...uuid.UUID) *VoiceoverUpdateOne {
	vuo.mutation.AddVoiceoverOutputIDs(ids...)
	return vuo
}

// AddVoiceoverOutputs adds the "voiceover_outputs" edges to the VoiceoverOutput entity.
func (vuo *VoiceoverUpdateOne) AddVoiceoverOutputs(v ...*VoiceoverOutput) *VoiceoverUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.AddVoiceoverOutputIDs(ids...)
}

// Mutation returns the VoiceoverMutation object of the builder.
func (vuo *VoiceoverUpdateOne) Mutation() *VoiceoverMutation {
	return vuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (vuo *VoiceoverUpdateOne) ClearUser() *VoiceoverUpdateOne {
	vuo.mutation.ClearUser()
	return vuo
}

// ClearPrompt clears the "prompt" edge to the Prompt entity.
func (vuo *VoiceoverUpdateOne) ClearPrompt() *VoiceoverUpdateOne {
	vuo.mutation.ClearPrompt()
	return vuo
}

// ClearDeviceInfo clears the "device_info" edge to the DeviceInfo entity.
func (vuo *VoiceoverUpdateOne) ClearDeviceInfo() *VoiceoverUpdateOne {
	vuo.mutation.ClearDeviceInfo()
	return vuo
}

// ClearVoiceoverModels clears the "voiceover_models" edge to the VoiceoverModel entity.
func (vuo *VoiceoverUpdateOne) ClearVoiceoverModels() *VoiceoverUpdateOne {
	vuo.mutation.ClearVoiceoverModels()
	return vuo
}

// ClearVoiceoverSpeakers clears the "voiceover_speakers" edge to the VoiceoverSpeaker entity.
func (vuo *VoiceoverUpdateOne) ClearVoiceoverSpeakers() *VoiceoverUpdateOne {
	vuo.mutation.ClearVoiceoverSpeakers()
	return vuo
}

// ClearAPITokens clears the "api_tokens" edge to the ApiToken entity.
func (vuo *VoiceoverUpdateOne) ClearAPITokens() *VoiceoverUpdateOne {
	vuo.mutation.ClearAPITokens()
	return vuo
}

// ClearVoiceoverOutputs clears all "voiceover_outputs" edges to the VoiceoverOutput entity.
func (vuo *VoiceoverUpdateOne) ClearVoiceoverOutputs() *VoiceoverUpdateOne {
	vuo.mutation.ClearVoiceoverOutputs()
	return vuo
}

// RemoveVoiceoverOutputIDs removes the "voiceover_outputs" edge to VoiceoverOutput entities by IDs.
func (vuo *VoiceoverUpdateOne) RemoveVoiceoverOutputIDs(ids ...uuid.UUID) *VoiceoverUpdateOne {
	vuo.mutation.RemoveVoiceoverOutputIDs(ids...)
	return vuo
}

// RemoveVoiceoverOutputs removes "voiceover_outputs" edges to VoiceoverOutput entities.
func (vuo *VoiceoverUpdateOne) RemoveVoiceoverOutputs(v ...*VoiceoverOutput) *VoiceoverUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.RemoveVoiceoverOutputIDs(ids...)
}

// Where appends a list predicates to the VoiceoverUpdate builder.
func (vuo *VoiceoverUpdateOne) Where(ps ...predicate.Voiceover) *VoiceoverUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VoiceoverUpdateOne) Select(field string, fields ...string) *VoiceoverUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Voiceover entity.
func (vuo *VoiceoverUpdateOne) Save(ctx context.Context) (*Voiceover, error) {
	vuo.defaults()
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VoiceoverUpdateOne) SaveX(ctx context.Context) *Voiceover {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VoiceoverUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VoiceoverUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VoiceoverUpdateOne) defaults() {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		v := voiceover.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VoiceoverUpdateOne) check() error {
	if v, ok := vuo.mutation.Status(); ok {
		if err := voiceover.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Voiceover.status": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.SourceType(); ok {
		if err := voiceover.SourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "source_type", err: fmt.Errorf(`ent: validator failed for field "Voiceover.source_type": %w`, err)}
		}
	}
	if vuo.mutation.UserCleared() && len(vuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Voiceover.user"`)
	}
	if vuo.mutation.DeviceInfoCleared() && len(vuo.mutation.DeviceInfoIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Voiceover.device_info"`)
	}
	if vuo.mutation.VoiceoverModelsCleared() && len(vuo.mutation.VoiceoverModelsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Voiceover.voiceover_models"`)
	}
	if vuo.mutation.VoiceoverSpeakersCleared() && len(vuo.mutation.VoiceoverSpeakersIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Voiceover.voiceover_speakers"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vuo *VoiceoverUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VoiceoverUpdateOne {
	vuo.modifiers = append(vuo.modifiers, modifiers...)
	return vuo
}

func (vuo *VoiceoverUpdateOne) sqlSave(ctx context.Context) (_node *Voiceover, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(voiceover.Table, voiceover.Columns, sqlgraph.NewFieldSpec(voiceover.FieldID, field.TypeUUID))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Voiceover.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, voiceover.FieldID)
		for _, f := range fields {
			if !voiceover.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != voiceover.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.CountryCode(); ok {
		_spec.SetField(voiceover.FieldCountryCode, field.TypeString, value)
	}
	if vuo.mutation.CountryCodeCleared() {
		_spec.ClearField(voiceover.FieldCountryCode, field.TypeString)
	}
	if value, ok := vuo.mutation.Status(); ok {
		_spec.SetField(voiceover.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := vuo.mutation.FailureReason(); ok {
		_spec.SetField(voiceover.FieldFailureReason, field.TypeString, value)
	}
	if vuo.mutation.FailureReasonCleared() {
		_spec.ClearField(voiceover.FieldFailureReason, field.TypeString)
	}
	if value, ok := vuo.mutation.StripeProductID(); ok {
		_spec.SetField(voiceover.FieldStripeProductID, field.TypeString, value)
	}
	if vuo.mutation.StripeProductIDCleared() {
		_spec.ClearField(voiceover.FieldStripeProductID, field.TypeString)
	}
	if value, ok := vuo.mutation.Temperature(); ok {
		_spec.SetField(voiceover.FieldTemperature, field.TypeFloat32, value)
	}
	if value, ok := vuo.mutation.AddedTemperature(); ok {
		_spec.AddField(voiceover.FieldTemperature, field.TypeFloat32, value)
	}
	if value, ok := vuo.mutation.Seed(); ok {
		_spec.SetField(voiceover.FieldSeed, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.AddedSeed(); ok {
		_spec.AddField(voiceover.FieldSeed, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.WasAutoSubmitted(); ok {
		_spec.SetField(voiceover.FieldWasAutoSubmitted, field.TypeBool, value)
	}
	if value, ok := vuo.mutation.DenoiseAudio(); ok {
		_spec.SetField(voiceover.FieldDenoiseAudio, field.TypeBool, value)
	}
	if value, ok := vuo.mutation.RemoveSilence(); ok {
		_spec.SetField(voiceover.FieldRemoveSilence, field.TypeBool, value)
	}
	if value, ok := vuo.mutation.Cost(); ok {
		_spec.SetField(voiceover.FieldCost, field.TypeInt32, value)
	}
	if value, ok := vuo.mutation.AddedCost(); ok {
		_spec.AddField(voiceover.FieldCost, field.TypeInt32, value)
	}
	if value, ok := vuo.mutation.SourceType(); ok {
		_spec.SetField(voiceover.FieldSourceType, field.TypeEnum, value)
	}
	if value, ok := vuo.mutation.StartedAt(); ok {
		_spec.SetField(voiceover.FieldStartedAt, field.TypeTime, value)
	}
	if vuo.mutation.StartedAtCleared() {
		_spec.ClearField(voiceover.FieldStartedAt, field.TypeTime)
	}
	if value, ok := vuo.mutation.CompletedAt(); ok {
		_spec.SetField(voiceover.FieldCompletedAt, field.TypeTime, value)
	}
	if vuo.mutation.CompletedAtCleared() {
		_spec.ClearField(voiceover.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(voiceover.FieldUpdatedAt, field.TypeTime, value)
	}
	if vuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.UserTable,
			Columns: []string{voiceover.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.UserTable,
			Columns: []string{voiceover.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.PromptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.PromptTable,
			Columns: []string{voiceover.PromptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.PromptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.PromptTable,
			Columns: []string{voiceover.PromptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.DeviceInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.DeviceInfoTable,
			Columns: []string{voiceover.DeviceInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinfo.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.DeviceInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.DeviceInfoTable,
			Columns: []string{voiceover.DeviceInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinfo.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.VoiceoverModelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.VoiceoverModelsTable,
			Columns: []string{voiceover.VoiceoverModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceovermodel.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.VoiceoverModelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.VoiceoverModelsTable,
			Columns: []string{voiceover.VoiceoverModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceovermodel.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.VoiceoverSpeakersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.VoiceoverSpeakersTable,
			Columns: []string{voiceover.VoiceoverSpeakersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceoverspeaker.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.VoiceoverSpeakersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.VoiceoverSpeakersTable,
			Columns: []string{voiceover.VoiceoverSpeakersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceoverspeaker.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.APITokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.APITokensTable,
			Columns: []string{voiceover.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.APITokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.APITokensTable,
			Columns: []string{voiceover.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.VoiceoverOutputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voiceover.VoiceoverOutputsTable,
			Columns: []string{voiceover.VoiceoverOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceoveroutput.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedVoiceoverOutputsIDs(); len(nodes) > 0 && !vuo.mutation.VoiceoverOutputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voiceover.VoiceoverOutputsTable,
			Columns: []string{voiceover.VoiceoverOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceoveroutput.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.VoiceoverOutputsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voiceover.VoiceoverOutputsTable,
			Columns: []string{voiceover.VoiceoverOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceoveroutput.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(vuo.modifiers...)
	_node = &Voiceover{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{voiceover.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
