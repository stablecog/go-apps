// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/voiceover"
	"github.com/stablecog/sc-go/database/ent/voiceoveroutput"
)

// VoiceoverOutput is the model entity for the VoiceoverOutput schema.
type VoiceoverOutput struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AudioPath holds the value of the "audio_path" field.
	AudioPath string `json:"audio_path,omitempty"`
	// VideoPath holds the value of the "video_path" field.
	VideoPath *string `json:"video_path,omitempty"`
	// AudioArray holds the value of the "audio_array" field.
	AudioArray []float64 `json:"audio_array,omitempty"`
	// IsFavorited holds the value of the "is_favorited" field.
	IsFavorited bool `json:"is_favorited,omitempty"`
	// AudioDuration holds the value of the "audio_duration" field.
	AudioDuration float32 `json:"audio_duration,omitempty"`
	// GalleryStatus holds the value of the "gallery_status" field.
	GalleryStatus voiceoveroutput.GalleryStatus `json:"gallery_status,omitempty"`
	// VoiceoverID holds the value of the "voiceover_id" field.
	VoiceoverID uuid.UUID `json:"voiceover_id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VoiceoverOutputQuery when eager-loading is set.
	Edges        VoiceoverOutputEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VoiceoverOutputEdges holds the relations/edges for other nodes in the graph.
type VoiceoverOutputEdges struct {
	// Voiceovers holds the value of the voiceovers edge.
	Voiceovers *Voiceover `json:"voiceovers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// VoiceoversOrErr returns the Voiceovers value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VoiceoverOutputEdges) VoiceoversOrErr() (*Voiceover, error) {
	if e.Voiceovers != nil {
		return e.Voiceovers, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: voiceover.Label}
	}
	return nil, &NotLoadedError{edge: "voiceovers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VoiceoverOutput) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case voiceoveroutput.FieldAudioArray:
			values[i] = new([]byte)
		case voiceoveroutput.FieldIsFavorited:
			values[i] = new(sql.NullBool)
		case voiceoveroutput.FieldAudioDuration:
			values[i] = new(sql.NullFloat64)
		case voiceoveroutput.FieldAudioPath, voiceoveroutput.FieldVideoPath, voiceoveroutput.FieldGalleryStatus:
			values[i] = new(sql.NullString)
		case voiceoveroutput.FieldDeletedAt, voiceoveroutput.FieldCreatedAt, voiceoveroutput.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case voiceoveroutput.FieldID, voiceoveroutput.FieldVoiceoverID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VoiceoverOutput fields.
func (vo *VoiceoverOutput) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case voiceoveroutput.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				vo.ID = *value
			}
		case voiceoveroutput.FieldAudioPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field audio_path", values[i])
			} else if value.Valid {
				vo.AudioPath = value.String
			}
		case voiceoveroutput.FieldVideoPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field video_path", values[i])
			} else if value.Valid {
				vo.VideoPath = new(string)
				*vo.VideoPath = value.String
			}
		case voiceoveroutput.FieldAudioArray:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field audio_array", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &vo.AudioArray); err != nil {
					return fmt.Errorf("unmarshal field audio_array: %w", err)
				}
			}
		case voiceoveroutput.FieldIsFavorited:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_favorited", values[i])
			} else if value.Valid {
				vo.IsFavorited = value.Bool
			}
		case voiceoveroutput.FieldAudioDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field audio_duration", values[i])
			} else if value.Valid {
				vo.AudioDuration = float32(value.Float64)
			}
		case voiceoveroutput.FieldGalleryStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gallery_status", values[i])
			} else if value.Valid {
				vo.GalleryStatus = voiceoveroutput.GalleryStatus(value.String)
			}
		case voiceoveroutput.FieldVoiceoverID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field voiceover_id", values[i])
			} else if value != nil {
				vo.VoiceoverID = *value
			}
		case voiceoveroutput.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				vo.DeletedAt = new(time.Time)
				*vo.DeletedAt = value.Time
			}
		case voiceoveroutput.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vo.CreatedAt = value.Time
			}
		case voiceoveroutput.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vo.UpdatedAt = value.Time
			}
		default:
			vo.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VoiceoverOutput.
// This includes values selected through modifiers, order, etc.
func (vo *VoiceoverOutput) Value(name string) (ent.Value, error) {
	return vo.selectValues.Get(name)
}

// QueryVoiceovers queries the "voiceovers" edge of the VoiceoverOutput entity.
func (vo *VoiceoverOutput) QueryVoiceovers() *VoiceoverQuery {
	return NewVoiceoverOutputClient(vo.config).QueryVoiceovers(vo)
}

// Update returns a builder for updating this VoiceoverOutput.
// Note that you need to call VoiceoverOutput.Unwrap() before calling this method if this VoiceoverOutput
// was returned from a transaction, and the transaction was committed or rolled back.
func (vo *VoiceoverOutput) Update() *VoiceoverOutputUpdateOne {
	return NewVoiceoverOutputClient(vo.config).UpdateOne(vo)
}

// Unwrap unwraps the VoiceoverOutput entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vo *VoiceoverOutput) Unwrap() *VoiceoverOutput {
	_tx, ok := vo.config.driver.(*txDriver)
	if !ok {
		panic("ent: VoiceoverOutput is not a transactional entity")
	}
	vo.config.driver = _tx.drv
	return vo
}

// String implements the fmt.Stringer.
func (vo *VoiceoverOutput) String() string {
	var builder strings.Builder
	builder.WriteString("VoiceoverOutput(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vo.ID))
	builder.WriteString("audio_path=")
	builder.WriteString(vo.AudioPath)
	builder.WriteString(", ")
	if v := vo.VideoPath; v != nil {
		builder.WriteString("video_path=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("audio_array=")
	builder.WriteString(fmt.Sprintf("%v", vo.AudioArray))
	builder.WriteString(", ")
	builder.WriteString("is_favorited=")
	builder.WriteString(fmt.Sprintf("%v", vo.IsFavorited))
	builder.WriteString(", ")
	builder.WriteString("audio_duration=")
	builder.WriteString(fmt.Sprintf("%v", vo.AudioDuration))
	builder.WriteString(", ")
	builder.WriteString("gallery_status=")
	builder.WriteString(fmt.Sprintf("%v", vo.GalleryStatus))
	builder.WriteString(", ")
	builder.WriteString("voiceover_id=")
	builder.WriteString(fmt.Sprintf("%v", vo.VoiceoverID))
	builder.WriteString(", ")
	if v := vo.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(vo.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(vo.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// VoiceoverOutputs is a parsable slice of VoiceoverOutput.
type VoiceoverOutputs []*VoiceoverOutput
