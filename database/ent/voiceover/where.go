// Code generated by ent, DO NOT EDIT.

package voiceover

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/predicate"
	"github.com/stablecog/sc-go/database/enttypes"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldLTE(FieldID, id))
}

// CountryCode applies equality check predicate on the "country_code" field. It's identical to CountryCodeEQ.
func CountryCode(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldCountryCode, v))
}

// FailureReason applies equality check predicate on the "failure_reason" field. It's identical to FailureReasonEQ.
func FailureReason(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldFailureReason, v))
}

// StripeProductID applies equality check predicate on the "stripe_product_id" field. It's identical to StripeProductIDEQ.
func StripeProductID(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldStripeProductID, v))
}

// Temperature applies equality check predicate on the "temperature" field. It's identical to TemperatureEQ.
func Temperature(v float32) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldTemperature, v))
}

// Seed applies equality check predicate on the "seed" field. It's identical to SeedEQ.
func Seed(v int) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldSeed, v))
}

// WasAutoSubmitted applies equality check predicate on the "was_auto_submitted" field. It's identical to WasAutoSubmittedEQ.
func WasAutoSubmitted(v bool) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldWasAutoSubmitted, v))
}

// DenoiseAudio applies equality check predicate on the "denoise_audio" field. It's identical to DenoiseAudioEQ.
func DenoiseAudio(v bool) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldDenoiseAudio, v))
}

// RemoveSilence applies equality check predicate on the "remove_silence" field. It's identical to RemoveSilenceEQ.
func RemoveSilence(v bool) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldRemoveSilence, v))
}

// Cost applies equality check predicate on the "cost" field. It's identical to CostEQ.
func Cost(v int32) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldCost, v))
}

// PromptID applies equality check predicate on the "prompt_id" field. It's identical to PromptIDEQ.
func PromptID(v uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldPromptID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldUserID, v))
}

// DeviceInfoID applies equality check predicate on the "device_info_id" field. It's identical to DeviceInfoIDEQ.
func DeviceInfoID(v uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldDeviceInfoID, v))
}

// ModelID applies equality check predicate on the "model_id" field. It's identical to ModelIDEQ.
func ModelID(v uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldModelID, v))
}

// SpeakerID applies equality check predicate on the "speaker_id" field. It's identical to SpeakerIDEQ.
func SpeakerID(v uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldSpeakerID, v))
}

// APITokenID applies equality check predicate on the "api_token_id" field. It's identical to APITokenIDEQ.
func APITokenID(v uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldAPITokenID, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldStartedAt, v))
}

// CompletedAt applies equality check predicate on the "completed_at" field. It's identical to CompletedAtEQ.
func CompletedAt(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldCompletedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldUpdatedAt, v))
}

// CountryCodeEQ applies the EQ predicate on the "country_code" field.
func CountryCodeEQ(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldCountryCode, v))
}

// CountryCodeNEQ applies the NEQ predicate on the "country_code" field.
func CountryCodeNEQ(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNEQ(FieldCountryCode, v))
}

// CountryCodeIn applies the In predicate on the "country_code" field.
func CountryCodeIn(vs ...string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIn(FieldCountryCode, vs...))
}

// CountryCodeNotIn applies the NotIn predicate on the "country_code" field.
func CountryCodeNotIn(vs ...string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotIn(FieldCountryCode, vs...))
}

// CountryCodeGT applies the GT predicate on the "country_code" field.
func CountryCodeGT(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldGT(FieldCountryCode, v))
}

// CountryCodeGTE applies the GTE predicate on the "country_code" field.
func CountryCodeGTE(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldGTE(FieldCountryCode, v))
}

// CountryCodeLT applies the LT predicate on the "country_code" field.
func CountryCodeLT(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldLT(FieldCountryCode, v))
}

// CountryCodeLTE applies the LTE predicate on the "country_code" field.
func CountryCodeLTE(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldLTE(FieldCountryCode, v))
}

// CountryCodeContains applies the Contains predicate on the "country_code" field.
func CountryCodeContains(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldContains(FieldCountryCode, v))
}

// CountryCodeHasPrefix applies the HasPrefix predicate on the "country_code" field.
func CountryCodeHasPrefix(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldHasPrefix(FieldCountryCode, v))
}

// CountryCodeHasSuffix applies the HasSuffix predicate on the "country_code" field.
func CountryCodeHasSuffix(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldHasSuffix(FieldCountryCode, v))
}

// CountryCodeIsNil applies the IsNil predicate on the "country_code" field.
func CountryCodeIsNil() predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIsNull(FieldCountryCode))
}

// CountryCodeNotNil applies the NotNil predicate on the "country_code" field.
func CountryCodeNotNil() predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotNull(FieldCountryCode))
}

// CountryCodeEqualFold applies the EqualFold predicate on the "country_code" field.
func CountryCodeEqualFold(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEqualFold(FieldCountryCode, v))
}

// CountryCodeContainsFold applies the ContainsFold predicate on the "country_code" field.
func CountryCodeContainsFold(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldContainsFold(FieldCountryCode, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotIn(FieldStatus, vs...))
}

// FailureReasonEQ applies the EQ predicate on the "failure_reason" field.
func FailureReasonEQ(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldFailureReason, v))
}

// FailureReasonNEQ applies the NEQ predicate on the "failure_reason" field.
func FailureReasonNEQ(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNEQ(FieldFailureReason, v))
}

// FailureReasonIn applies the In predicate on the "failure_reason" field.
func FailureReasonIn(vs ...string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIn(FieldFailureReason, vs...))
}

// FailureReasonNotIn applies the NotIn predicate on the "failure_reason" field.
func FailureReasonNotIn(vs ...string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotIn(FieldFailureReason, vs...))
}

// FailureReasonGT applies the GT predicate on the "failure_reason" field.
func FailureReasonGT(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldGT(FieldFailureReason, v))
}

// FailureReasonGTE applies the GTE predicate on the "failure_reason" field.
func FailureReasonGTE(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldGTE(FieldFailureReason, v))
}

// FailureReasonLT applies the LT predicate on the "failure_reason" field.
func FailureReasonLT(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldLT(FieldFailureReason, v))
}

// FailureReasonLTE applies the LTE predicate on the "failure_reason" field.
func FailureReasonLTE(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldLTE(FieldFailureReason, v))
}

// FailureReasonContains applies the Contains predicate on the "failure_reason" field.
func FailureReasonContains(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldContains(FieldFailureReason, v))
}

// FailureReasonHasPrefix applies the HasPrefix predicate on the "failure_reason" field.
func FailureReasonHasPrefix(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldHasPrefix(FieldFailureReason, v))
}

// FailureReasonHasSuffix applies the HasSuffix predicate on the "failure_reason" field.
func FailureReasonHasSuffix(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldHasSuffix(FieldFailureReason, v))
}

// FailureReasonIsNil applies the IsNil predicate on the "failure_reason" field.
func FailureReasonIsNil() predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIsNull(FieldFailureReason))
}

// FailureReasonNotNil applies the NotNil predicate on the "failure_reason" field.
func FailureReasonNotNil() predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotNull(FieldFailureReason))
}

// FailureReasonEqualFold applies the EqualFold predicate on the "failure_reason" field.
func FailureReasonEqualFold(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEqualFold(FieldFailureReason, v))
}

// FailureReasonContainsFold applies the ContainsFold predicate on the "failure_reason" field.
func FailureReasonContainsFold(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldContainsFold(FieldFailureReason, v))
}

// StripeProductIDEQ applies the EQ predicate on the "stripe_product_id" field.
func StripeProductIDEQ(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldStripeProductID, v))
}

// StripeProductIDNEQ applies the NEQ predicate on the "stripe_product_id" field.
func StripeProductIDNEQ(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNEQ(FieldStripeProductID, v))
}

// StripeProductIDIn applies the In predicate on the "stripe_product_id" field.
func StripeProductIDIn(vs ...string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIn(FieldStripeProductID, vs...))
}

// StripeProductIDNotIn applies the NotIn predicate on the "stripe_product_id" field.
func StripeProductIDNotIn(vs ...string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotIn(FieldStripeProductID, vs...))
}

// StripeProductIDGT applies the GT predicate on the "stripe_product_id" field.
func StripeProductIDGT(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldGT(FieldStripeProductID, v))
}

// StripeProductIDGTE applies the GTE predicate on the "stripe_product_id" field.
func StripeProductIDGTE(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldGTE(FieldStripeProductID, v))
}

// StripeProductIDLT applies the LT predicate on the "stripe_product_id" field.
func StripeProductIDLT(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldLT(FieldStripeProductID, v))
}

// StripeProductIDLTE applies the LTE predicate on the "stripe_product_id" field.
func StripeProductIDLTE(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldLTE(FieldStripeProductID, v))
}

// StripeProductIDContains applies the Contains predicate on the "stripe_product_id" field.
func StripeProductIDContains(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldContains(FieldStripeProductID, v))
}

// StripeProductIDHasPrefix applies the HasPrefix predicate on the "stripe_product_id" field.
func StripeProductIDHasPrefix(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldHasPrefix(FieldStripeProductID, v))
}

// StripeProductIDHasSuffix applies the HasSuffix predicate on the "stripe_product_id" field.
func StripeProductIDHasSuffix(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldHasSuffix(FieldStripeProductID, v))
}

// StripeProductIDIsNil applies the IsNil predicate on the "stripe_product_id" field.
func StripeProductIDIsNil() predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIsNull(FieldStripeProductID))
}

// StripeProductIDNotNil applies the NotNil predicate on the "stripe_product_id" field.
func StripeProductIDNotNil() predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotNull(FieldStripeProductID))
}

// StripeProductIDEqualFold applies the EqualFold predicate on the "stripe_product_id" field.
func StripeProductIDEqualFold(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEqualFold(FieldStripeProductID, v))
}

// StripeProductIDContainsFold applies the ContainsFold predicate on the "stripe_product_id" field.
func StripeProductIDContainsFold(v string) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldContainsFold(FieldStripeProductID, v))
}

// TemperatureEQ applies the EQ predicate on the "temperature" field.
func TemperatureEQ(v float32) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldTemperature, v))
}

// TemperatureNEQ applies the NEQ predicate on the "temperature" field.
func TemperatureNEQ(v float32) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNEQ(FieldTemperature, v))
}

// TemperatureIn applies the In predicate on the "temperature" field.
func TemperatureIn(vs ...float32) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIn(FieldTemperature, vs...))
}

// TemperatureNotIn applies the NotIn predicate on the "temperature" field.
func TemperatureNotIn(vs ...float32) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotIn(FieldTemperature, vs...))
}

// TemperatureGT applies the GT predicate on the "temperature" field.
func TemperatureGT(v float32) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldGT(FieldTemperature, v))
}

// TemperatureGTE applies the GTE predicate on the "temperature" field.
func TemperatureGTE(v float32) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldGTE(FieldTemperature, v))
}

// TemperatureLT applies the LT predicate on the "temperature" field.
func TemperatureLT(v float32) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldLT(FieldTemperature, v))
}

// TemperatureLTE applies the LTE predicate on the "temperature" field.
func TemperatureLTE(v float32) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldLTE(FieldTemperature, v))
}

// SeedEQ applies the EQ predicate on the "seed" field.
func SeedEQ(v int) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldSeed, v))
}

// SeedNEQ applies the NEQ predicate on the "seed" field.
func SeedNEQ(v int) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNEQ(FieldSeed, v))
}

// SeedIn applies the In predicate on the "seed" field.
func SeedIn(vs ...int) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIn(FieldSeed, vs...))
}

// SeedNotIn applies the NotIn predicate on the "seed" field.
func SeedNotIn(vs ...int) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotIn(FieldSeed, vs...))
}

// SeedGT applies the GT predicate on the "seed" field.
func SeedGT(v int) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldGT(FieldSeed, v))
}

// SeedGTE applies the GTE predicate on the "seed" field.
func SeedGTE(v int) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldGTE(FieldSeed, v))
}

// SeedLT applies the LT predicate on the "seed" field.
func SeedLT(v int) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldLT(FieldSeed, v))
}

// SeedLTE applies the LTE predicate on the "seed" field.
func SeedLTE(v int) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldLTE(FieldSeed, v))
}

// WasAutoSubmittedEQ applies the EQ predicate on the "was_auto_submitted" field.
func WasAutoSubmittedEQ(v bool) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldWasAutoSubmitted, v))
}

// WasAutoSubmittedNEQ applies the NEQ predicate on the "was_auto_submitted" field.
func WasAutoSubmittedNEQ(v bool) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNEQ(FieldWasAutoSubmitted, v))
}

// DenoiseAudioEQ applies the EQ predicate on the "denoise_audio" field.
func DenoiseAudioEQ(v bool) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldDenoiseAudio, v))
}

// DenoiseAudioNEQ applies the NEQ predicate on the "denoise_audio" field.
func DenoiseAudioNEQ(v bool) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNEQ(FieldDenoiseAudio, v))
}

// RemoveSilenceEQ applies the EQ predicate on the "remove_silence" field.
func RemoveSilenceEQ(v bool) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldRemoveSilence, v))
}

// RemoveSilenceNEQ applies the NEQ predicate on the "remove_silence" field.
func RemoveSilenceNEQ(v bool) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNEQ(FieldRemoveSilence, v))
}

// CostEQ applies the EQ predicate on the "cost" field.
func CostEQ(v int32) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldCost, v))
}

// CostNEQ applies the NEQ predicate on the "cost" field.
func CostNEQ(v int32) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNEQ(FieldCost, v))
}

// CostIn applies the In predicate on the "cost" field.
func CostIn(vs ...int32) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIn(FieldCost, vs...))
}

// CostNotIn applies the NotIn predicate on the "cost" field.
func CostNotIn(vs ...int32) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotIn(FieldCost, vs...))
}

// CostGT applies the GT predicate on the "cost" field.
func CostGT(v int32) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldGT(FieldCost, v))
}

// CostGTE applies the GTE predicate on the "cost" field.
func CostGTE(v int32) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldGTE(FieldCost, v))
}

// CostLT applies the LT predicate on the "cost" field.
func CostLT(v int32) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldLT(FieldCost, v))
}

// CostLTE applies the LTE predicate on the "cost" field.
func CostLTE(v int32) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldLTE(FieldCost, v))
}

// SourceTypeEQ applies the EQ predicate on the "source_type" field.
func SourceTypeEQ(v enttypes.SourceType) predicate.Voiceover {
	vc := v
	return predicate.Voiceover(sql.FieldEQ(FieldSourceType, vc))
}

// SourceTypeNEQ applies the NEQ predicate on the "source_type" field.
func SourceTypeNEQ(v enttypes.SourceType) predicate.Voiceover {
	vc := v
	return predicate.Voiceover(sql.FieldNEQ(FieldSourceType, vc))
}

// SourceTypeIn applies the In predicate on the "source_type" field.
func SourceTypeIn(vs ...enttypes.SourceType) predicate.Voiceover {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voiceover(sql.FieldIn(FieldSourceType, v...))
}

// SourceTypeNotIn applies the NotIn predicate on the "source_type" field.
func SourceTypeNotIn(vs ...enttypes.SourceType) predicate.Voiceover {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voiceover(sql.FieldNotIn(FieldSourceType, v...))
}

// PromptIDEQ applies the EQ predicate on the "prompt_id" field.
func PromptIDEQ(v uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldPromptID, v))
}

// PromptIDNEQ applies the NEQ predicate on the "prompt_id" field.
func PromptIDNEQ(v uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNEQ(FieldPromptID, v))
}

// PromptIDIn applies the In predicate on the "prompt_id" field.
func PromptIDIn(vs ...uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIn(FieldPromptID, vs...))
}

// PromptIDNotIn applies the NotIn predicate on the "prompt_id" field.
func PromptIDNotIn(vs ...uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotIn(FieldPromptID, vs...))
}

// PromptIDIsNil applies the IsNil predicate on the "prompt_id" field.
func PromptIDIsNil() predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIsNull(FieldPromptID))
}

// PromptIDNotNil applies the NotNil predicate on the "prompt_id" field.
func PromptIDNotNil() predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotNull(FieldPromptID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotIn(FieldUserID, vs...))
}

// DeviceInfoIDEQ applies the EQ predicate on the "device_info_id" field.
func DeviceInfoIDEQ(v uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldDeviceInfoID, v))
}

// DeviceInfoIDNEQ applies the NEQ predicate on the "device_info_id" field.
func DeviceInfoIDNEQ(v uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNEQ(FieldDeviceInfoID, v))
}

// DeviceInfoIDIn applies the In predicate on the "device_info_id" field.
func DeviceInfoIDIn(vs ...uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIn(FieldDeviceInfoID, vs...))
}

// DeviceInfoIDNotIn applies the NotIn predicate on the "device_info_id" field.
func DeviceInfoIDNotIn(vs ...uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotIn(FieldDeviceInfoID, vs...))
}

// ModelIDEQ applies the EQ predicate on the "model_id" field.
func ModelIDEQ(v uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldModelID, v))
}

// ModelIDNEQ applies the NEQ predicate on the "model_id" field.
func ModelIDNEQ(v uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNEQ(FieldModelID, v))
}

// ModelIDIn applies the In predicate on the "model_id" field.
func ModelIDIn(vs ...uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIn(FieldModelID, vs...))
}

// ModelIDNotIn applies the NotIn predicate on the "model_id" field.
func ModelIDNotIn(vs ...uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotIn(FieldModelID, vs...))
}

// SpeakerIDEQ applies the EQ predicate on the "speaker_id" field.
func SpeakerIDEQ(v uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldSpeakerID, v))
}

// SpeakerIDNEQ applies the NEQ predicate on the "speaker_id" field.
func SpeakerIDNEQ(v uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNEQ(FieldSpeakerID, v))
}

// SpeakerIDIn applies the In predicate on the "speaker_id" field.
func SpeakerIDIn(vs ...uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIn(FieldSpeakerID, vs...))
}

// SpeakerIDNotIn applies the NotIn predicate on the "speaker_id" field.
func SpeakerIDNotIn(vs ...uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotIn(FieldSpeakerID, vs...))
}

// APITokenIDEQ applies the EQ predicate on the "api_token_id" field.
func APITokenIDEQ(v uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldAPITokenID, v))
}

// APITokenIDNEQ applies the NEQ predicate on the "api_token_id" field.
func APITokenIDNEQ(v uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNEQ(FieldAPITokenID, v))
}

// APITokenIDIn applies the In predicate on the "api_token_id" field.
func APITokenIDIn(vs ...uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIn(FieldAPITokenID, vs...))
}

// APITokenIDNotIn applies the NotIn predicate on the "api_token_id" field.
func APITokenIDNotIn(vs ...uuid.UUID) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotIn(FieldAPITokenID, vs...))
}

// APITokenIDIsNil applies the IsNil predicate on the "api_token_id" field.
func APITokenIDIsNil() predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIsNull(FieldAPITokenID))
}

// APITokenIDNotNil applies the NotNil predicate on the "api_token_id" field.
func APITokenIDNotNil() predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotNull(FieldAPITokenID))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotNull(FieldStartedAt))
}

// CompletedAtEQ applies the EQ predicate on the "completed_at" field.
func CompletedAtEQ(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldCompletedAt, v))
}

// CompletedAtNEQ applies the NEQ predicate on the "completed_at" field.
func CompletedAtNEQ(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNEQ(FieldCompletedAt, v))
}

// CompletedAtIn applies the In predicate on the "completed_at" field.
func CompletedAtIn(vs ...time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIn(FieldCompletedAt, vs...))
}

// CompletedAtNotIn applies the NotIn predicate on the "completed_at" field.
func CompletedAtNotIn(vs ...time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotIn(FieldCompletedAt, vs...))
}

// CompletedAtGT applies the GT predicate on the "completed_at" field.
func CompletedAtGT(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldGT(FieldCompletedAt, v))
}

// CompletedAtGTE applies the GTE predicate on the "completed_at" field.
func CompletedAtGTE(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldGTE(FieldCompletedAt, v))
}

// CompletedAtLT applies the LT predicate on the "completed_at" field.
func CompletedAtLT(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldLT(FieldCompletedAt, v))
}

// CompletedAtLTE applies the LTE predicate on the "completed_at" field.
func CompletedAtLTE(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldLTE(FieldCompletedAt, v))
}

// CompletedAtIsNil applies the IsNil predicate on the "completed_at" field.
func CompletedAtIsNil() predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIsNull(FieldCompletedAt))
}

// CompletedAtNotNil applies the NotNil predicate on the "completed_at" field.
func CompletedAtNotNil() predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotNull(FieldCompletedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Voiceover {
	return predicate.Voiceover(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Voiceover {
	return predicate.Voiceover(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Voiceover {
	return predicate.Voiceover(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrompt applies the HasEdge predicate on the "prompt" edge.
func HasPrompt() predicate.Voiceover {
	return predicate.Voiceover(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PromptTable, PromptColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPromptWith applies the HasEdge predicate on the "prompt" edge with a given conditions (other predicates).
func HasPromptWith(preds ...predicate.Prompt) predicate.Voiceover {
	return predicate.Voiceover(func(s *sql.Selector) {
		step := newPromptStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeviceInfo applies the HasEdge predicate on the "device_info" edge.
func HasDeviceInfo() predicate.Voiceover {
	return predicate.Voiceover(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DeviceInfoTable, DeviceInfoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeviceInfoWith applies the HasEdge predicate on the "device_info" edge with a given conditions (other predicates).
func HasDeviceInfoWith(preds ...predicate.DeviceInfo) predicate.Voiceover {
	return predicate.Voiceover(func(s *sql.Selector) {
		step := newDeviceInfoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVoiceoverModels applies the HasEdge predicate on the "voiceover_models" edge.
func HasVoiceoverModels() predicate.Voiceover {
	return predicate.Voiceover(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VoiceoverModelsTable, VoiceoverModelsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVoiceoverModelsWith applies the HasEdge predicate on the "voiceover_models" edge with a given conditions (other predicates).
func HasVoiceoverModelsWith(preds ...predicate.VoiceoverModel) predicate.Voiceover {
	return predicate.Voiceover(func(s *sql.Selector) {
		step := newVoiceoverModelsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVoiceoverSpeakers applies the HasEdge predicate on the "voiceover_speakers" edge.
func HasVoiceoverSpeakers() predicate.Voiceover {
	return predicate.Voiceover(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VoiceoverSpeakersTable, VoiceoverSpeakersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVoiceoverSpeakersWith applies the HasEdge predicate on the "voiceover_speakers" edge with a given conditions (other predicates).
func HasVoiceoverSpeakersWith(preds ...predicate.VoiceoverSpeaker) predicate.Voiceover {
	return predicate.Voiceover(func(s *sql.Selector) {
		step := newVoiceoverSpeakersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAPITokens applies the HasEdge predicate on the "api_tokens" edge.
func HasAPITokens() predicate.Voiceover {
	return predicate.Voiceover(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, APITokensTable, APITokensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAPITokensWith applies the HasEdge predicate on the "api_tokens" edge with a given conditions (other predicates).
func HasAPITokensWith(preds ...predicate.ApiToken) predicate.Voiceover {
	return predicate.Voiceover(func(s *sql.Selector) {
		step := newAPITokensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVoiceoverOutputs applies the HasEdge predicate on the "voiceover_outputs" edge.
func HasVoiceoverOutputs() predicate.Voiceover {
	return predicate.Voiceover(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VoiceoverOutputsTable, VoiceoverOutputsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVoiceoverOutputsWith applies the HasEdge predicate on the "voiceover_outputs" edge with a given conditions (other predicates).
func HasVoiceoverOutputsWith(preds ...predicate.VoiceoverOutput) predicate.Voiceover {
	return predicate.Voiceover(func(s *sql.Selector) {
		step := newVoiceoverOutputsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Voiceover) predicate.Voiceover {
	return predicate.Voiceover(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Voiceover) predicate.Voiceover {
	return predicate.Voiceover(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Voiceover) predicate.Voiceover {
	return predicate.Voiceover(sql.NotPredicates(p))
}
