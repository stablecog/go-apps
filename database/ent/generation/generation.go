// Code generated by ent, DO NOT EDIT.

package generation

import (
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/enttypes"
)

const (
	// Label holds the string label denoting the generation type in the database.
	Label = "generation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldWidth holds the string denoting the width field in the database.
	FieldWidth = "width"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// FieldInferenceSteps holds the string denoting the inference_steps field in the database.
	FieldInferenceSteps = "inference_steps"
	// FieldGuidanceScale holds the string denoting the guidance_scale field in the database.
	FieldGuidanceScale = "guidance_scale"
	// FieldNumOutputs holds the string denoting the num_outputs field in the database.
	FieldNumOutputs = "num_outputs"
	// FieldNsfwCount holds the string denoting the nsfw_count field in the database.
	FieldNsfwCount = "nsfw_count"
	// FieldSeed holds the string denoting the seed field in the database.
	FieldSeed = "seed"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldFailureReason holds the string denoting the failure_reason field in the database.
	FieldFailureReason = "failure_reason"
	// FieldCountryCode holds the string denoting the country_code field in the database.
	FieldCountryCode = "country_code"
	// FieldInitImageURL holds the string denoting the init_image_url field in the database.
	FieldInitImageURL = "init_image_url"
	// FieldMaskImageURL holds the string denoting the mask_image_url field in the database.
	FieldMaskImageURL = "mask_image_url"
	// FieldPromptStrength holds the string denoting the prompt_strength field in the database.
	FieldPromptStrength = "prompt_strength"
	// FieldWasAutoSubmitted holds the string denoting the was_auto_submitted field in the database.
	FieldWasAutoSubmitted = "was_auto_submitted"
	// FieldStripeProductID holds the string denoting the stripe_product_id field in the database.
	FieldStripeProductID = "stripe_product_id"
	// FieldSourceType holds the string denoting the source_type field in the database.
	FieldSourceType = "source_type"
	// FieldWebhookToken holds the string denoting the webhook_token field in the database.
	FieldWebhookToken = "webhook_token"
	// FieldPromptID holds the string denoting the prompt_id field in the database.
	FieldPromptID = "prompt_id"
	// FieldNegativePromptID holds the string denoting the negative_prompt_id field in the database.
	FieldNegativePromptID = "negative_prompt_id"
	// FieldModelID holds the string denoting the model_id field in the database.
	FieldModelID = "model_id"
	// FieldSchedulerID holds the string denoting the scheduler_id field in the database.
	FieldSchedulerID = "scheduler_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldDeviceInfoID holds the string denoting the device_info_id field in the database.
	FieldDeviceInfoID = "device_info_id"
	// FieldAPITokenID holds the string denoting the api_token_id field in the database.
	FieldAPITokenID = "api_token_id"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldCompletedAt holds the string denoting the completed_at field in the database.
	FieldCompletedAt = "completed_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeDeviceInfo holds the string denoting the device_info edge name in mutations.
	EdgeDeviceInfo = "device_info"
	// EdgeScheduler holds the string denoting the scheduler edge name in mutations.
	EdgeScheduler = "scheduler"
	// EdgePrompt holds the string denoting the prompt edge name in mutations.
	EdgePrompt = "prompt"
	// EdgeNegativePrompt holds the string denoting the negative_prompt edge name in mutations.
	EdgeNegativePrompt = "negative_prompt"
	// EdgeGenerationModel holds the string denoting the generation_model edge name in mutations.
	EdgeGenerationModel = "generation_model"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeAPITokens holds the string denoting the api_tokens edge name in mutations.
	EdgeAPITokens = "api_tokens"
	// EdgeGenerationOutputs holds the string denoting the generation_outputs edge name in mutations.
	EdgeGenerationOutputs = "generation_outputs"
	// Table holds the table name of the generation in the database.
	Table = "generations"
	// DeviceInfoTable is the table that holds the device_info relation/edge.
	DeviceInfoTable = "generations"
	// DeviceInfoInverseTable is the table name for the DeviceInfo entity.
	// It exists in this package in order to avoid circular dependency with the "deviceinfo" package.
	DeviceInfoInverseTable = "device_info"
	// DeviceInfoColumn is the table column denoting the device_info relation/edge.
	DeviceInfoColumn = "device_info_id"
	// SchedulerTable is the table that holds the scheduler relation/edge.
	SchedulerTable = "generations"
	// SchedulerInverseTable is the table name for the Scheduler entity.
	// It exists in this package in order to avoid circular dependency with the "scheduler" package.
	SchedulerInverseTable = "schedulers"
	// SchedulerColumn is the table column denoting the scheduler relation/edge.
	SchedulerColumn = "scheduler_id"
	// PromptTable is the table that holds the prompt relation/edge.
	PromptTable = "generations"
	// PromptInverseTable is the table name for the Prompt entity.
	// It exists in this package in order to avoid circular dependency with the "prompt" package.
	PromptInverseTable = "prompts"
	// PromptColumn is the table column denoting the prompt relation/edge.
	PromptColumn = "prompt_id"
	// NegativePromptTable is the table that holds the negative_prompt relation/edge.
	NegativePromptTable = "generations"
	// NegativePromptInverseTable is the table name for the NegativePrompt entity.
	// It exists in this package in order to avoid circular dependency with the "negativeprompt" package.
	NegativePromptInverseTable = "negative_prompts"
	// NegativePromptColumn is the table column denoting the negative_prompt relation/edge.
	NegativePromptColumn = "negative_prompt_id"
	// GenerationModelTable is the table that holds the generation_model relation/edge.
	GenerationModelTable = "generations"
	// GenerationModelInverseTable is the table name for the GenerationModel entity.
	// It exists in this package in order to avoid circular dependency with the "generationmodel" package.
	GenerationModelInverseTable = "generation_models"
	// GenerationModelColumn is the table column denoting the generation_model relation/edge.
	GenerationModelColumn = "model_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "generations"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// APITokensTable is the table that holds the api_tokens relation/edge.
	APITokensTable = "generations"
	// APITokensInverseTable is the table name for the ApiToken entity.
	// It exists in this package in order to avoid circular dependency with the "apitoken" package.
	APITokensInverseTable = "api_tokens"
	// APITokensColumn is the table column denoting the api_tokens relation/edge.
	APITokensColumn = "api_token_id"
	// GenerationOutputsTable is the table that holds the generation_outputs relation/edge.
	GenerationOutputsTable = "generation_outputs"
	// GenerationOutputsInverseTable is the table name for the GenerationOutput entity.
	// It exists in this package in order to avoid circular dependency with the "generationoutput" package.
	GenerationOutputsInverseTable = "generation_outputs"
	// GenerationOutputsColumn is the table column denoting the generation_outputs relation/edge.
	GenerationOutputsColumn = "generation_id"
)

// Columns holds all SQL columns for generation fields.
var Columns = []string{
	FieldID,
	FieldWidth,
	FieldHeight,
	FieldInferenceSteps,
	FieldGuidanceScale,
	FieldNumOutputs,
	FieldNsfwCount,
	FieldSeed,
	FieldStatus,
	FieldFailureReason,
	FieldCountryCode,
	FieldInitImageURL,
	FieldMaskImageURL,
	FieldPromptStrength,
	FieldWasAutoSubmitted,
	FieldStripeProductID,
	FieldSourceType,
	FieldWebhookToken,
	FieldPromptID,
	FieldNegativePromptID,
	FieldModelID,
	FieldSchedulerID,
	FieldUserID,
	FieldDeviceInfoID,
	FieldAPITokenID,
	FieldStartedAt,
	FieldCompletedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultNsfwCount holds the default value on creation for the "nsfw_count" field.
	DefaultNsfwCount int32
	// DefaultWasAutoSubmitted holds the default value on creation for the "was_auto_submitted" field.
	DefaultWasAutoSubmitted bool
	// DefaultWebhookToken holds the default value on creation for the "webhook_token" field.
	DefaultWebhookToken func() uuid.UUID
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusQueued    Status = "queued"
	StatusStarted   Status = "started"
	StatusSucceeded Status = "succeeded"
	StatusFailed    Status = "failed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusQueued, StatusStarted, StatusSucceeded, StatusFailed:
		return nil
	default:
		return fmt.Errorf("generation: invalid enum value for status field: %q", s)
	}
}

const DefaultSourceType enttypes.SourceType = "web-ui"

// SourceTypeValidator is a validator for the "source_type" field enum values. It is called by the builders before save.
func SourceTypeValidator(st enttypes.SourceType) error {
	switch st {
	case "web-ui", "api", "discord", "internal":
		return nil
	default:
		return fmt.Errorf("generation: invalid enum value for source_type field: %q", st)
	}
}
