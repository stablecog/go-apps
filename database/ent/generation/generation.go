// Code generated by ent, DO NOT EDIT.

package generation

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/enttypes"
)

const (
	// Label holds the string label denoting the generation type in the database.
	Label = "generation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldWidth holds the string denoting the width field in the database.
	FieldWidth = "width"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// FieldInferenceSteps holds the string denoting the inference_steps field in the database.
	FieldInferenceSteps = "inference_steps"
	// FieldGuidanceScale holds the string denoting the guidance_scale field in the database.
	FieldGuidanceScale = "guidance_scale"
	// FieldNumOutputs holds the string denoting the num_outputs field in the database.
	FieldNumOutputs = "num_outputs"
	// FieldNsfwCount holds the string denoting the nsfw_count field in the database.
	FieldNsfwCount = "nsfw_count"
	// FieldSeed holds the string denoting the seed field in the database.
	FieldSeed = "seed"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldFailureReason holds the string denoting the failure_reason field in the database.
	FieldFailureReason = "failure_reason"
	// FieldCountryCode holds the string denoting the country_code field in the database.
	FieldCountryCode = "country_code"
	// FieldInitImageURL holds the string denoting the init_image_url field in the database.
	FieldInitImageURL = "init_image_url"
	// FieldMaskImageURL holds the string denoting the mask_image_url field in the database.
	FieldMaskImageURL = "mask_image_url"
	// FieldPromptStrength holds the string denoting the prompt_strength field in the database.
	FieldPromptStrength = "prompt_strength"
	// FieldWasAutoSubmitted holds the string denoting the was_auto_submitted field in the database.
	FieldWasAutoSubmitted = "was_auto_submitted"
	// FieldStripeProductID holds the string denoting the stripe_product_id field in the database.
	FieldStripeProductID = "stripe_product_id"
	// FieldSourceType holds the string denoting the source_type field in the database.
	FieldSourceType = "source_type"
	// FieldWebhookToken holds the string denoting the webhook_token field in the database.
	FieldWebhookToken = "webhook_token"
	// FieldPromptID holds the string denoting the prompt_id field in the database.
	FieldPromptID = "prompt_id"
	// FieldNegativePromptID holds the string denoting the negative_prompt_id field in the database.
	FieldNegativePromptID = "negative_prompt_id"
	// FieldModelID holds the string denoting the model_id field in the database.
	FieldModelID = "model_id"
	// FieldSchedulerID holds the string denoting the scheduler_id field in the database.
	FieldSchedulerID = "scheduler_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldDeviceInfoID holds the string denoting the device_info_id field in the database.
	FieldDeviceInfoID = "device_info_id"
	// FieldAPITokenID holds the string denoting the api_token_id field in the database.
	FieldAPITokenID = "api_token_id"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldCompletedAt holds the string denoting the completed_at field in the database.
	FieldCompletedAt = "completed_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeDeviceInfo holds the string denoting the device_info edge name in mutations.
	EdgeDeviceInfo = "device_info"
	// EdgeScheduler holds the string denoting the scheduler edge name in mutations.
	EdgeScheduler = "scheduler"
	// EdgePrompt holds the string denoting the prompt edge name in mutations.
	EdgePrompt = "prompt"
	// EdgeNegativePrompt holds the string denoting the negative_prompt edge name in mutations.
	EdgeNegativePrompt = "negative_prompt"
	// EdgeGenerationModel holds the string denoting the generation_model edge name in mutations.
	EdgeGenerationModel = "generation_model"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeAPITokens holds the string denoting the api_tokens edge name in mutations.
	EdgeAPITokens = "api_tokens"
	// EdgeGenerationOutputs holds the string denoting the generation_outputs edge name in mutations.
	EdgeGenerationOutputs = "generation_outputs"
	// Table holds the table name of the generation in the database.
	Table = "generations"
	// DeviceInfoTable is the table that holds the device_info relation/edge.
	DeviceInfoTable = "generations"
	// DeviceInfoInverseTable is the table name for the DeviceInfo entity.
	// It exists in this package in order to avoid circular dependency with the "deviceinfo" package.
	DeviceInfoInverseTable = "device_info"
	// DeviceInfoColumn is the table column denoting the device_info relation/edge.
	DeviceInfoColumn = "device_info_id"
	// SchedulerTable is the table that holds the scheduler relation/edge.
	SchedulerTable = "generations"
	// SchedulerInverseTable is the table name for the Scheduler entity.
	// It exists in this package in order to avoid circular dependency with the "scheduler" package.
	SchedulerInverseTable = "schedulers"
	// SchedulerColumn is the table column denoting the scheduler relation/edge.
	SchedulerColumn = "scheduler_id"
	// PromptTable is the table that holds the prompt relation/edge.
	PromptTable = "generations"
	// PromptInverseTable is the table name for the Prompt entity.
	// It exists in this package in order to avoid circular dependency with the "prompt" package.
	PromptInverseTable = "prompts"
	// PromptColumn is the table column denoting the prompt relation/edge.
	PromptColumn = "prompt_id"
	// NegativePromptTable is the table that holds the negative_prompt relation/edge.
	NegativePromptTable = "generations"
	// NegativePromptInverseTable is the table name for the NegativePrompt entity.
	// It exists in this package in order to avoid circular dependency with the "negativeprompt" package.
	NegativePromptInverseTable = "negative_prompts"
	// NegativePromptColumn is the table column denoting the negative_prompt relation/edge.
	NegativePromptColumn = "negative_prompt_id"
	// GenerationModelTable is the table that holds the generation_model relation/edge.
	GenerationModelTable = "generations"
	// GenerationModelInverseTable is the table name for the GenerationModel entity.
	// It exists in this package in order to avoid circular dependency with the "generationmodel" package.
	GenerationModelInverseTable = "generation_models"
	// GenerationModelColumn is the table column denoting the generation_model relation/edge.
	GenerationModelColumn = "model_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "generations"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// APITokensTable is the table that holds the api_tokens relation/edge.
	APITokensTable = "generations"
	// APITokensInverseTable is the table name for the ApiToken entity.
	// It exists in this package in order to avoid circular dependency with the "apitoken" package.
	APITokensInverseTable = "api_tokens"
	// APITokensColumn is the table column denoting the api_tokens relation/edge.
	APITokensColumn = "api_token_id"
	// GenerationOutputsTable is the table that holds the generation_outputs relation/edge.
	GenerationOutputsTable = "generation_outputs"
	// GenerationOutputsInverseTable is the table name for the GenerationOutput entity.
	// It exists in this package in order to avoid circular dependency with the "generationoutput" package.
	GenerationOutputsInverseTable = "generation_outputs"
	// GenerationOutputsColumn is the table column denoting the generation_outputs relation/edge.
	GenerationOutputsColumn = "generation_id"
)

// Columns holds all SQL columns for generation fields.
var Columns = []string{
	FieldID,
	FieldWidth,
	FieldHeight,
	FieldInferenceSteps,
	FieldGuidanceScale,
	FieldNumOutputs,
	FieldNsfwCount,
	FieldSeed,
	FieldStatus,
	FieldFailureReason,
	FieldCountryCode,
	FieldInitImageURL,
	FieldMaskImageURL,
	FieldPromptStrength,
	FieldWasAutoSubmitted,
	FieldStripeProductID,
	FieldSourceType,
	FieldWebhookToken,
	FieldPromptID,
	FieldNegativePromptID,
	FieldModelID,
	FieldSchedulerID,
	FieldUserID,
	FieldDeviceInfoID,
	FieldAPITokenID,
	FieldStartedAt,
	FieldCompletedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultNsfwCount holds the default value on creation for the "nsfw_count" field.
	DefaultNsfwCount int32
	// DefaultWasAutoSubmitted holds the default value on creation for the "was_auto_submitted" field.
	DefaultWasAutoSubmitted bool
	// DefaultWebhookToken holds the default value on creation for the "webhook_token" field.
	DefaultWebhookToken func() uuid.UUID
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusQueued    Status = "queued"
	StatusStarted   Status = "started"
	StatusSucceeded Status = "succeeded"
	StatusFailed    Status = "failed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusQueued, StatusStarted, StatusSucceeded, StatusFailed:
		return nil
	default:
		return fmt.Errorf("generation: invalid enum value for status field: %q", s)
	}
}

const DefaultSourceType enttypes.SourceType = "web-ui"

// SourceTypeValidator is a validator for the "source_type" field enum values. It is called by the builders before save.
func SourceTypeValidator(st enttypes.SourceType) error {
	switch st {
	case "web-ui", "api", "discord", "internal":
		return nil
	default:
		return fmt.Errorf("generation: invalid enum value for source_type field: %q", st)
	}
}

// OrderOption defines the ordering options for the Generation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByWidth orders the results by the width field.
func ByWidth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWidth, opts...).ToFunc()
}

// ByHeight orders the results by the height field.
func ByHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeight, opts...).ToFunc()
}

// ByInferenceSteps orders the results by the inference_steps field.
func ByInferenceSteps(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInferenceSteps, opts...).ToFunc()
}

// ByGuidanceScale orders the results by the guidance_scale field.
func ByGuidanceScale(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGuidanceScale, opts...).ToFunc()
}

// ByNumOutputs orders the results by the num_outputs field.
func ByNumOutputs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumOutputs, opts...).ToFunc()
}

// ByNsfwCount orders the results by the nsfw_count field.
func ByNsfwCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNsfwCount, opts...).ToFunc()
}

// BySeed orders the results by the seed field.
func BySeed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeed, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByFailureReason orders the results by the failure_reason field.
func ByFailureReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFailureReason, opts...).ToFunc()
}

// ByCountryCode orders the results by the country_code field.
func ByCountryCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountryCode, opts...).ToFunc()
}

// ByInitImageURL orders the results by the init_image_url field.
func ByInitImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInitImageURL, opts...).ToFunc()
}

// ByMaskImageURL orders the results by the mask_image_url field.
func ByMaskImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaskImageURL, opts...).ToFunc()
}

// ByPromptStrength orders the results by the prompt_strength field.
func ByPromptStrength(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPromptStrength, opts...).ToFunc()
}

// ByWasAutoSubmitted orders the results by the was_auto_submitted field.
func ByWasAutoSubmitted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWasAutoSubmitted, opts...).ToFunc()
}

// ByStripeProductID orders the results by the stripe_product_id field.
func ByStripeProductID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStripeProductID, opts...).ToFunc()
}

// BySourceType orders the results by the source_type field.
func BySourceType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceType, opts...).ToFunc()
}

// ByWebhookToken orders the results by the webhook_token field.
func ByWebhookToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebhookToken, opts...).ToFunc()
}

// ByPromptID orders the results by the prompt_id field.
func ByPromptID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPromptID, opts...).ToFunc()
}

// ByNegativePromptID orders the results by the negative_prompt_id field.
func ByNegativePromptID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNegativePromptID, opts...).ToFunc()
}

// ByModelID orders the results by the model_id field.
func ByModelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelID, opts...).ToFunc()
}

// BySchedulerID orders the results by the scheduler_id field.
func BySchedulerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSchedulerID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByDeviceInfoID orders the results by the device_info_id field.
func ByDeviceInfoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceInfoID, opts...).ToFunc()
}

// ByAPITokenID orders the results by the api_token_id field.
func ByAPITokenID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPITokenID, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByCompletedAt orders the results by the completed_at field.
func ByCompletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeviceInfoField orders the results by device_info field.
func ByDeviceInfoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeviceInfoStep(), sql.OrderByField(field, opts...))
	}
}

// BySchedulerField orders the results by scheduler field.
func BySchedulerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSchedulerStep(), sql.OrderByField(field, opts...))
	}
}

// ByPromptField orders the results by prompt field.
func ByPromptField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPromptStep(), sql.OrderByField(field, opts...))
	}
}

// ByNegativePromptField orders the results by negative_prompt field.
func ByNegativePromptField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNegativePromptStep(), sql.OrderByField(field, opts...))
	}
}

// ByGenerationModelField orders the results by generation_model field.
func ByGenerationModelField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGenerationModelStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByAPITokensField orders the results by api_tokens field.
func ByAPITokensField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAPITokensStep(), sql.OrderByField(field, opts...))
	}
}

// ByGenerationOutputsCount orders the results by generation_outputs count.
func ByGenerationOutputsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGenerationOutputsStep(), opts...)
	}
}

// ByGenerationOutputs orders the results by generation_outputs terms.
func ByGenerationOutputs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGenerationOutputsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDeviceInfoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeviceInfoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DeviceInfoTable, DeviceInfoColumn),
	)
}
func newSchedulerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SchedulerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SchedulerTable, SchedulerColumn),
	)
}
func newPromptStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PromptInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PromptTable, PromptColumn),
	)
}
func newNegativePromptStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NegativePromptInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, NegativePromptTable, NegativePromptColumn),
	)
}
func newGenerationModelStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GenerationModelInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GenerationModelTable, GenerationModelColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newAPITokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(APITokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, APITokensTable, APITokensColumn),
	)
}
func newGenerationOutputsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GenerationOutputsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GenerationOutputsTable, GenerationOutputsColumn),
	)
}
