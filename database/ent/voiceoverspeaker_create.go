// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/voiceover"
	"github.com/stablecog/sc-go/database/ent/voiceovermodel"
	"github.com/stablecog/sc-go/database/ent/voiceoverspeaker"
)

// VoiceoverSpeakerCreate is the builder for creating a VoiceoverSpeaker entity.
type VoiceoverSpeakerCreate struct {
	config
	mutation *VoiceoverSpeakerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNameInWorker sets the "name_in_worker" field.
func (vsc *VoiceoverSpeakerCreate) SetNameInWorker(s string) *VoiceoverSpeakerCreate {
	vsc.mutation.SetNameInWorker(s)
	return vsc
}

// SetName sets the "name" field.
func (vsc *VoiceoverSpeakerCreate) SetName(s string) *VoiceoverSpeakerCreate {
	vsc.mutation.SetName(s)
	return vsc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vsc *VoiceoverSpeakerCreate) SetNillableName(s *string) *VoiceoverSpeakerCreate {
	if s != nil {
		vsc.SetName(*s)
	}
	return vsc
}

// SetIsActive sets the "is_active" field.
func (vsc *VoiceoverSpeakerCreate) SetIsActive(b bool) *VoiceoverSpeakerCreate {
	vsc.mutation.SetIsActive(b)
	return vsc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (vsc *VoiceoverSpeakerCreate) SetNillableIsActive(b *bool) *VoiceoverSpeakerCreate {
	if b != nil {
		vsc.SetIsActive(*b)
	}
	return vsc
}

// SetIsDefault sets the "is_default" field.
func (vsc *VoiceoverSpeakerCreate) SetIsDefault(b bool) *VoiceoverSpeakerCreate {
	vsc.mutation.SetIsDefault(b)
	return vsc
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (vsc *VoiceoverSpeakerCreate) SetNillableIsDefault(b *bool) *VoiceoverSpeakerCreate {
	if b != nil {
		vsc.SetIsDefault(*b)
	}
	return vsc
}

// SetIsHidden sets the "is_hidden" field.
func (vsc *VoiceoverSpeakerCreate) SetIsHidden(b bool) *VoiceoverSpeakerCreate {
	vsc.mutation.SetIsHidden(b)
	return vsc
}

// SetNillableIsHidden sets the "is_hidden" field if the given value is not nil.
func (vsc *VoiceoverSpeakerCreate) SetNillableIsHidden(b *bool) *VoiceoverSpeakerCreate {
	if b != nil {
		vsc.SetIsHidden(*b)
	}
	return vsc
}

// SetLocale sets the "locale" field.
func (vsc *VoiceoverSpeakerCreate) SetLocale(s string) *VoiceoverSpeakerCreate {
	vsc.mutation.SetLocale(s)
	return vsc
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (vsc *VoiceoverSpeakerCreate) SetNillableLocale(s *string) *VoiceoverSpeakerCreate {
	if s != nil {
		vsc.SetLocale(*s)
	}
	return vsc
}

// SetModelID sets the "model_id" field.
func (vsc *VoiceoverSpeakerCreate) SetModelID(u uuid.UUID) *VoiceoverSpeakerCreate {
	vsc.mutation.SetModelID(u)
	return vsc
}

// SetCreatedAt sets the "created_at" field.
func (vsc *VoiceoverSpeakerCreate) SetCreatedAt(t time.Time) *VoiceoverSpeakerCreate {
	vsc.mutation.SetCreatedAt(t)
	return vsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vsc *VoiceoverSpeakerCreate) SetNillableCreatedAt(t *time.Time) *VoiceoverSpeakerCreate {
	if t != nil {
		vsc.SetCreatedAt(*t)
	}
	return vsc
}

// SetUpdatedAt sets the "updated_at" field.
func (vsc *VoiceoverSpeakerCreate) SetUpdatedAt(t time.Time) *VoiceoverSpeakerCreate {
	vsc.mutation.SetUpdatedAt(t)
	return vsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vsc *VoiceoverSpeakerCreate) SetNillableUpdatedAt(t *time.Time) *VoiceoverSpeakerCreate {
	if t != nil {
		vsc.SetUpdatedAt(*t)
	}
	return vsc
}

// SetID sets the "id" field.
func (vsc *VoiceoverSpeakerCreate) SetID(u uuid.UUID) *VoiceoverSpeakerCreate {
	vsc.mutation.SetID(u)
	return vsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vsc *VoiceoverSpeakerCreate) SetNillableID(u *uuid.UUID) *VoiceoverSpeakerCreate {
	if u != nil {
		vsc.SetID(*u)
	}
	return vsc
}

// AddVoiceoverIDs adds the "voiceovers" edge to the Voiceover entity by IDs.
func (vsc *VoiceoverSpeakerCreate) AddVoiceoverIDs(ids ...uuid.UUID) *VoiceoverSpeakerCreate {
	vsc.mutation.AddVoiceoverIDs(ids...)
	return vsc
}

// AddVoiceovers adds the "voiceovers" edges to the Voiceover entity.
func (vsc *VoiceoverSpeakerCreate) AddVoiceovers(v ...*Voiceover) *VoiceoverSpeakerCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vsc.AddVoiceoverIDs(ids...)
}

// SetVoiceoverModelsID sets the "voiceover_models" edge to the VoiceoverModel entity by ID.
func (vsc *VoiceoverSpeakerCreate) SetVoiceoverModelsID(id uuid.UUID) *VoiceoverSpeakerCreate {
	vsc.mutation.SetVoiceoverModelsID(id)
	return vsc
}

// SetVoiceoverModels sets the "voiceover_models" edge to the VoiceoverModel entity.
func (vsc *VoiceoverSpeakerCreate) SetVoiceoverModels(v *VoiceoverModel) *VoiceoverSpeakerCreate {
	return vsc.SetVoiceoverModelsID(v.ID)
}

// Mutation returns the VoiceoverSpeakerMutation object of the builder.
func (vsc *VoiceoverSpeakerCreate) Mutation() *VoiceoverSpeakerMutation {
	return vsc.mutation
}

// Save creates the VoiceoverSpeaker in the database.
func (vsc *VoiceoverSpeakerCreate) Save(ctx context.Context) (*VoiceoverSpeaker, error) {
	vsc.defaults()
	return withHooks(ctx, vsc.sqlSave, vsc.mutation, vsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vsc *VoiceoverSpeakerCreate) SaveX(ctx context.Context) *VoiceoverSpeaker {
	v, err := vsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vsc *VoiceoverSpeakerCreate) Exec(ctx context.Context) error {
	_, err := vsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vsc *VoiceoverSpeakerCreate) ExecX(ctx context.Context) {
	if err := vsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vsc *VoiceoverSpeakerCreate) defaults() {
	if _, ok := vsc.mutation.IsActive(); !ok {
		v := voiceoverspeaker.DefaultIsActive
		vsc.mutation.SetIsActive(v)
	}
	if _, ok := vsc.mutation.IsDefault(); !ok {
		v := voiceoverspeaker.DefaultIsDefault
		vsc.mutation.SetIsDefault(v)
	}
	if _, ok := vsc.mutation.IsHidden(); !ok {
		v := voiceoverspeaker.DefaultIsHidden
		vsc.mutation.SetIsHidden(v)
	}
	if _, ok := vsc.mutation.Locale(); !ok {
		v := voiceoverspeaker.DefaultLocale
		vsc.mutation.SetLocale(v)
	}
	if _, ok := vsc.mutation.CreatedAt(); !ok {
		v := voiceoverspeaker.DefaultCreatedAt()
		vsc.mutation.SetCreatedAt(v)
	}
	if _, ok := vsc.mutation.UpdatedAt(); !ok {
		v := voiceoverspeaker.DefaultUpdatedAt()
		vsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vsc.mutation.ID(); !ok {
		v := voiceoverspeaker.DefaultID()
		vsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vsc *VoiceoverSpeakerCreate) check() error {
	if _, ok := vsc.mutation.NameInWorker(); !ok {
		return &ValidationError{Name: "name_in_worker", err: errors.New(`ent: missing required field "VoiceoverSpeaker.name_in_worker"`)}
	}
	if _, ok := vsc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "VoiceoverSpeaker.is_active"`)}
	}
	if _, ok := vsc.mutation.IsDefault(); !ok {
		return &ValidationError{Name: "is_default", err: errors.New(`ent: missing required field "VoiceoverSpeaker.is_default"`)}
	}
	if _, ok := vsc.mutation.IsHidden(); !ok {
		return &ValidationError{Name: "is_hidden", err: errors.New(`ent: missing required field "VoiceoverSpeaker.is_hidden"`)}
	}
	if _, ok := vsc.mutation.Locale(); !ok {
		return &ValidationError{Name: "locale", err: errors.New(`ent: missing required field "VoiceoverSpeaker.locale"`)}
	}
	if _, ok := vsc.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model_id", err: errors.New(`ent: missing required field "VoiceoverSpeaker.model_id"`)}
	}
	if _, ok := vsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "VoiceoverSpeaker.created_at"`)}
	}
	if _, ok := vsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "VoiceoverSpeaker.updated_at"`)}
	}
	if len(vsc.mutation.VoiceoverModelsIDs()) == 0 {
		return &ValidationError{Name: "voiceover_models", err: errors.New(`ent: missing required edge "VoiceoverSpeaker.voiceover_models"`)}
	}
	return nil
}

func (vsc *VoiceoverSpeakerCreate) sqlSave(ctx context.Context) (*VoiceoverSpeaker, error) {
	if err := vsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	vsc.mutation.id = &_node.ID
	vsc.mutation.done = true
	return _node, nil
}

func (vsc *VoiceoverSpeakerCreate) createSpec() (*VoiceoverSpeaker, *sqlgraph.CreateSpec) {
	var (
		_node = &VoiceoverSpeaker{config: vsc.config}
		_spec = sqlgraph.NewCreateSpec(voiceoverspeaker.Table, sqlgraph.NewFieldSpec(voiceoverspeaker.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = vsc.conflict
	if id, ok := vsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := vsc.mutation.NameInWorker(); ok {
		_spec.SetField(voiceoverspeaker.FieldNameInWorker, field.TypeString, value)
		_node.NameInWorker = value
	}
	if value, ok := vsc.mutation.Name(); ok {
		_spec.SetField(voiceoverspeaker.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := vsc.mutation.IsActive(); ok {
		_spec.SetField(voiceoverspeaker.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := vsc.mutation.IsDefault(); ok {
		_spec.SetField(voiceoverspeaker.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = value
	}
	if value, ok := vsc.mutation.IsHidden(); ok {
		_spec.SetField(voiceoverspeaker.FieldIsHidden, field.TypeBool, value)
		_node.IsHidden = value
	}
	if value, ok := vsc.mutation.Locale(); ok {
		_spec.SetField(voiceoverspeaker.FieldLocale, field.TypeString, value)
		_node.Locale = value
	}
	if value, ok := vsc.mutation.CreatedAt(); ok {
		_spec.SetField(voiceoverspeaker.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vsc.mutation.UpdatedAt(); ok {
		_spec.SetField(voiceoverspeaker.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := vsc.mutation.VoiceoversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voiceoverspeaker.VoiceoversTable,
			Columns: []string{voiceoverspeaker.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vsc.mutation.VoiceoverModelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceoverspeaker.VoiceoverModelsTable,
			Columns: []string{voiceoverspeaker.VoiceoverModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voiceovermodel.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ModelID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VoiceoverSpeaker.Create().
//		SetNameInWorker(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VoiceoverSpeakerUpsert) {
//			SetNameInWorker(v+v).
//		}).
//		Exec(ctx)
func (vsc *VoiceoverSpeakerCreate) OnConflict(opts ...sql.ConflictOption) *VoiceoverSpeakerUpsertOne {
	vsc.conflict = opts
	return &VoiceoverSpeakerUpsertOne{
		create: vsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VoiceoverSpeaker.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vsc *VoiceoverSpeakerCreate) OnConflictColumns(columns ...string) *VoiceoverSpeakerUpsertOne {
	vsc.conflict = append(vsc.conflict, sql.ConflictColumns(columns...))
	return &VoiceoverSpeakerUpsertOne{
		create: vsc,
	}
}

type (
	// VoiceoverSpeakerUpsertOne is the builder for "upsert"-ing
	//  one VoiceoverSpeaker node.
	VoiceoverSpeakerUpsertOne struct {
		create *VoiceoverSpeakerCreate
	}

	// VoiceoverSpeakerUpsert is the "OnConflict" setter.
	VoiceoverSpeakerUpsert struct {
		*sql.UpdateSet
	}
)

// SetNameInWorker sets the "name_in_worker" field.
func (u *VoiceoverSpeakerUpsert) SetNameInWorker(v string) *VoiceoverSpeakerUpsert {
	u.Set(voiceoverspeaker.FieldNameInWorker, v)
	return u
}

// UpdateNameInWorker sets the "name_in_worker" field to the value that was provided on create.
func (u *VoiceoverSpeakerUpsert) UpdateNameInWorker() *VoiceoverSpeakerUpsert {
	u.SetExcluded(voiceoverspeaker.FieldNameInWorker)
	return u
}

// SetName sets the "name" field.
func (u *VoiceoverSpeakerUpsert) SetName(v string) *VoiceoverSpeakerUpsert {
	u.Set(voiceoverspeaker.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *VoiceoverSpeakerUpsert) UpdateName() *VoiceoverSpeakerUpsert {
	u.SetExcluded(voiceoverspeaker.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *VoiceoverSpeakerUpsert) ClearName() *VoiceoverSpeakerUpsert {
	u.SetNull(voiceoverspeaker.FieldName)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *VoiceoverSpeakerUpsert) SetIsActive(v bool) *VoiceoverSpeakerUpsert {
	u.Set(voiceoverspeaker.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *VoiceoverSpeakerUpsert) UpdateIsActive() *VoiceoverSpeakerUpsert {
	u.SetExcluded(voiceoverspeaker.FieldIsActive)
	return u
}

// SetIsDefault sets the "is_default" field.
func (u *VoiceoverSpeakerUpsert) SetIsDefault(v bool) *VoiceoverSpeakerUpsert {
	u.Set(voiceoverspeaker.FieldIsDefault, v)
	return u
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *VoiceoverSpeakerUpsert) UpdateIsDefault() *VoiceoverSpeakerUpsert {
	u.SetExcluded(voiceoverspeaker.FieldIsDefault)
	return u
}

// SetIsHidden sets the "is_hidden" field.
func (u *VoiceoverSpeakerUpsert) SetIsHidden(v bool) *VoiceoverSpeakerUpsert {
	u.Set(voiceoverspeaker.FieldIsHidden, v)
	return u
}

// UpdateIsHidden sets the "is_hidden" field to the value that was provided on create.
func (u *VoiceoverSpeakerUpsert) UpdateIsHidden() *VoiceoverSpeakerUpsert {
	u.SetExcluded(voiceoverspeaker.FieldIsHidden)
	return u
}

// SetLocale sets the "locale" field.
func (u *VoiceoverSpeakerUpsert) SetLocale(v string) *VoiceoverSpeakerUpsert {
	u.Set(voiceoverspeaker.FieldLocale, v)
	return u
}

// UpdateLocale sets the "locale" field to the value that was provided on create.
func (u *VoiceoverSpeakerUpsert) UpdateLocale() *VoiceoverSpeakerUpsert {
	u.SetExcluded(voiceoverspeaker.FieldLocale)
	return u
}

// SetModelID sets the "model_id" field.
func (u *VoiceoverSpeakerUpsert) SetModelID(v uuid.UUID) *VoiceoverSpeakerUpsert {
	u.Set(voiceoverspeaker.FieldModelID, v)
	return u
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *VoiceoverSpeakerUpsert) UpdateModelID() *VoiceoverSpeakerUpsert {
	u.SetExcluded(voiceoverspeaker.FieldModelID)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VoiceoverSpeakerUpsert) SetUpdatedAt(v time.Time) *VoiceoverSpeakerUpsert {
	u.Set(voiceoverspeaker.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VoiceoverSpeakerUpsert) UpdateUpdatedAt() *VoiceoverSpeakerUpsert {
	u.SetExcluded(voiceoverspeaker.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.VoiceoverSpeaker.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(voiceoverspeaker.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *VoiceoverSpeakerUpsertOne) UpdateNewValues() *VoiceoverSpeakerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(voiceoverspeaker.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(voiceoverspeaker.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VoiceoverSpeaker.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VoiceoverSpeakerUpsertOne) Ignore() *VoiceoverSpeakerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VoiceoverSpeakerUpsertOne) DoNothing() *VoiceoverSpeakerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VoiceoverSpeakerCreate.OnConflict
// documentation for more info.
func (u *VoiceoverSpeakerUpsertOne) Update(set func(*VoiceoverSpeakerUpsert)) *VoiceoverSpeakerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VoiceoverSpeakerUpsert{UpdateSet: update})
	}))
	return u
}

// SetNameInWorker sets the "name_in_worker" field.
func (u *VoiceoverSpeakerUpsertOne) SetNameInWorker(v string) *VoiceoverSpeakerUpsertOne {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.SetNameInWorker(v)
	})
}

// UpdateNameInWorker sets the "name_in_worker" field to the value that was provided on create.
func (u *VoiceoverSpeakerUpsertOne) UpdateNameInWorker() *VoiceoverSpeakerUpsertOne {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.UpdateNameInWorker()
	})
}

// SetName sets the "name" field.
func (u *VoiceoverSpeakerUpsertOne) SetName(v string) *VoiceoverSpeakerUpsertOne {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *VoiceoverSpeakerUpsertOne) UpdateName() *VoiceoverSpeakerUpsertOne {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *VoiceoverSpeakerUpsertOne) ClearName() *VoiceoverSpeakerUpsertOne {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.ClearName()
	})
}

// SetIsActive sets the "is_active" field.
func (u *VoiceoverSpeakerUpsertOne) SetIsActive(v bool) *VoiceoverSpeakerUpsertOne {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *VoiceoverSpeakerUpsertOne) UpdateIsActive() *VoiceoverSpeakerUpsertOne {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.UpdateIsActive()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *VoiceoverSpeakerUpsertOne) SetIsDefault(v bool) *VoiceoverSpeakerUpsertOne {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *VoiceoverSpeakerUpsertOne) UpdateIsDefault() *VoiceoverSpeakerUpsertOne {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.UpdateIsDefault()
	})
}

// SetIsHidden sets the "is_hidden" field.
func (u *VoiceoverSpeakerUpsertOne) SetIsHidden(v bool) *VoiceoverSpeakerUpsertOne {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.SetIsHidden(v)
	})
}

// UpdateIsHidden sets the "is_hidden" field to the value that was provided on create.
func (u *VoiceoverSpeakerUpsertOne) UpdateIsHidden() *VoiceoverSpeakerUpsertOne {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.UpdateIsHidden()
	})
}

// SetLocale sets the "locale" field.
func (u *VoiceoverSpeakerUpsertOne) SetLocale(v string) *VoiceoverSpeakerUpsertOne {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.SetLocale(v)
	})
}

// UpdateLocale sets the "locale" field to the value that was provided on create.
func (u *VoiceoverSpeakerUpsertOne) UpdateLocale() *VoiceoverSpeakerUpsertOne {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.UpdateLocale()
	})
}

// SetModelID sets the "model_id" field.
func (u *VoiceoverSpeakerUpsertOne) SetModelID(v uuid.UUID) *VoiceoverSpeakerUpsertOne {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.SetModelID(v)
	})
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *VoiceoverSpeakerUpsertOne) UpdateModelID() *VoiceoverSpeakerUpsertOne {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.UpdateModelID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VoiceoverSpeakerUpsertOne) SetUpdatedAt(v time.Time) *VoiceoverSpeakerUpsertOne {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VoiceoverSpeakerUpsertOne) UpdateUpdatedAt() *VoiceoverSpeakerUpsertOne {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *VoiceoverSpeakerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VoiceoverSpeakerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VoiceoverSpeakerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VoiceoverSpeakerUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: VoiceoverSpeakerUpsertOne.ID is not supported by MySQL driver. Use VoiceoverSpeakerUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VoiceoverSpeakerUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VoiceoverSpeakerCreateBulk is the builder for creating many VoiceoverSpeaker entities in bulk.
type VoiceoverSpeakerCreateBulk struct {
	config
	err      error
	builders []*VoiceoverSpeakerCreate
	conflict []sql.ConflictOption
}

// Save creates the VoiceoverSpeaker entities in the database.
func (vscb *VoiceoverSpeakerCreateBulk) Save(ctx context.Context) ([]*VoiceoverSpeaker, error) {
	if vscb.err != nil {
		return nil, vscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vscb.builders))
	nodes := make([]*VoiceoverSpeaker, len(vscb.builders))
	mutators := make([]Mutator, len(vscb.builders))
	for i := range vscb.builders {
		func(i int, root context.Context) {
			builder := vscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VoiceoverSpeakerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vscb *VoiceoverSpeakerCreateBulk) SaveX(ctx context.Context) []*VoiceoverSpeaker {
	v, err := vscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vscb *VoiceoverSpeakerCreateBulk) Exec(ctx context.Context) error {
	_, err := vscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vscb *VoiceoverSpeakerCreateBulk) ExecX(ctx context.Context) {
	if err := vscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VoiceoverSpeaker.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VoiceoverSpeakerUpsert) {
//			SetNameInWorker(v+v).
//		}).
//		Exec(ctx)
func (vscb *VoiceoverSpeakerCreateBulk) OnConflict(opts ...sql.ConflictOption) *VoiceoverSpeakerUpsertBulk {
	vscb.conflict = opts
	return &VoiceoverSpeakerUpsertBulk{
		create: vscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VoiceoverSpeaker.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vscb *VoiceoverSpeakerCreateBulk) OnConflictColumns(columns ...string) *VoiceoverSpeakerUpsertBulk {
	vscb.conflict = append(vscb.conflict, sql.ConflictColumns(columns...))
	return &VoiceoverSpeakerUpsertBulk{
		create: vscb,
	}
}

// VoiceoverSpeakerUpsertBulk is the builder for "upsert"-ing
// a bulk of VoiceoverSpeaker nodes.
type VoiceoverSpeakerUpsertBulk struct {
	create *VoiceoverSpeakerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.VoiceoverSpeaker.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(voiceoverspeaker.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *VoiceoverSpeakerUpsertBulk) UpdateNewValues() *VoiceoverSpeakerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(voiceoverspeaker.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(voiceoverspeaker.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VoiceoverSpeaker.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VoiceoverSpeakerUpsertBulk) Ignore() *VoiceoverSpeakerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VoiceoverSpeakerUpsertBulk) DoNothing() *VoiceoverSpeakerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VoiceoverSpeakerCreateBulk.OnConflict
// documentation for more info.
func (u *VoiceoverSpeakerUpsertBulk) Update(set func(*VoiceoverSpeakerUpsert)) *VoiceoverSpeakerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VoiceoverSpeakerUpsert{UpdateSet: update})
	}))
	return u
}

// SetNameInWorker sets the "name_in_worker" field.
func (u *VoiceoverSpeakerUpsertBulk) SetNameInWorker(v string) *VoiceoverSpeakerUpsertBulk {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.SetNameInWorker(v)
	})
}

// UpdateNameInWorker sets the "name_in_worker" field to the value that was provided on create.
func (u *VoiceoverSpeakerUpsertBulk) UpdateNameInWorker() *VoiceoverSpeakerUpsertBulk {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.UpdateNameInWorker()
	})
}

// SetName sets the "name" field.
func (u *VoiceoverSpeakerUpsertBulk) SetName(v string) *VoiceoverSpeakerUpsertBulk {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *VoiceoverSpeakerUpsertBulk) UpdateName() *VoiceoverSpeakerUpsertBulk {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *VoiceoverSpeakerUpsertBulk) ClearName() *VoiceoverSpeakerUpsertBulk {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.ClearName()
	})
}

// SetIsActive sets the "is_active" field.
func (u *VoiceoverSpeakerUpsertBulk) SetIsActive(v bool) *VoiceoverSpeakerUpsertBulk {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *VoiceoverSpeakerUpsertBulk) UpdateIsActive() *VoiceoverSpeakerUpsertBulk {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.UpdateIsActive()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *VoiceoverSpeakerUpsertBulk) SetIsDefault(v bool) *VoiceoverSpeakerUpsertBulk {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *VoiceoverSpeakerUpsertBulk) UpdateIsDefault() *VoiceoverSpeakerUpsertBulk {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.UpdateIsDefault()
	})
}

// SetIsHidden sets the "is_hidden" field.
func (u *VoiceoverSpeakerUpsertBulk) SetIsHidden(v bool) *VoiceoverSpeakerUpsertBulk {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.SetIsHidden(v)
	})
}

// UpdateIsHidden sets the "is_hidden" field to the value that was provided on create.
func (u *VoiceoverSpeakerUpsertBulk) UpdateIsHidden() *VoiceoverSpeakerUpsertBulk {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.UpdateIsHidden()
	})
}

// SetLocale sets the "locale" field.
func (u *VoiceoverSpeakerUpsertBulk) SetLocale(v string) *VoiceoverSpeakerUpsertBulk {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.SetLocale(v)
	})
}

// UpdateLocale sets the "locale" field to the value that was provided on create.
func (u *VoiceoverSpeakerUpsertBulk) UpdateLocale() *VoiceoverSpeakerUpsertBulk {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.UpdateLocale()
	})
}

// SetModelID sets the "model_id" field.
func (u *VoiceoverSpeakerUpsertBulk) SetModelID(v uuid.UUID) *VoiceoverSpeakerUpsertBulk {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.SetModelID(v)
	})
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *VoiceoverSpeakerUpsertBulk) UpdateModelID() *VoiceoverSpeakerUpsertBulk {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.UpdateModelID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VoiceoverSpeakerUpsertBulk) SetUpdatedAt(v time.Time) *VoiceoverSpeakerUpsertBulk {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VoiceoverSpeakerUpsertBulk) UpdateUpdatedAt() *VoiceoverSpeakerUpsertBulk {
	return u.Update(func(s *VoiceoverSpeakerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *VoiceoverSpeakerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VoiceoverSpeakerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VoiceoverSpeakerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VoiceoverSpeakerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
