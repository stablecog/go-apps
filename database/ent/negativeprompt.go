// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/negativeprompt"
)

// NegativePrompt is the model entity for the NegativePrompt schema.
type NegativePrompt struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// TranslatedText holds the value of the "translated_text" field.
	TranslatedText *string `json:"translated_text,omitempty"`
	// RanTranslation holds the value of the "ran_translation" field.
	RanTranslation bool `json:"ran_translation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NegativePromptQuery when eager-loading is set.
	Edges        NegativePromptEdges `json:"edges"`
	selectValues sql.SelectValues
}

// NegativePromptEdges holds the relations/edges for other nodes in the graph.
type NegativePromptEdges struct {
	// Generations holds the value of the generations edge.
	Generations []*Generation `json:"generations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GenerationsOrErr returns the Generations value or an error if the edge
// was not loaded in eager-loading.
func (e NegativePromptEdges) GenerationsOrErr() ([]*Generation, error) {
	if e.loadedTypes[0] {
		return e.Generations, nil
	}
	return nil, &NotLoadedError{edge: "generations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NegativePrompt) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case negativeprompt.FieldRanTranslation:
			values[i] = new(sql.NullBool)
		case negativeprompt.FieldText, negativeprompt.FieldTranslatedText:
			values[i] = new(sql.NullString)
		case negativeprompt.FieldCreatedAt, negativeprompt.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case negativeprompt.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NegativePrompt fields.
func (np *NegativePrompt) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case negativeprompt.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				np.ID = *value
			}
		case negativeprompt.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				np.Text = value.String
			}
		case negativeprompt.FieldTranslatedText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field translated_text", values[i])
			} else if value.Valid {
				np.TranslatedText = new(string)
				*np.TranslatedText = value.String
			}
		case negativeprompt.FieldRanTranslation:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field ran_translation", values[i])
			} else if value.Valid {
				np.RanTranslation = value.Bool
			}
		case negativeprompt.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				np.CreatedAt = value.Time
			}
		case negativeprompt.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				np.UpdatedAt = value.Time
			}
		default:
			np.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NegativePrompt.
// This includes values selected through modifiers, order, etc.
func (np *NegativePrompt) Value(name string) (ent.Value, error) {
	return np.selectValues.Get(name)
}

// QueryGenerations queries the "generations" edge of the NegativePrompt entity.
func (np *NegativePrompt) QueryGenerations() *GenerationQuery {
	return NewNegativePromptClient(np.config).QueryGenerations(np)
}

// Update returns a builder for updating this NegativePrompt.
// Note that you need to call NegativePrompt.Unwrap() before calling this method if this NegativePrompt
// was returned from a transaction, and the transaction was committed or rolled back.
func (np *NegativePrompt) Update() *NegativePromptUpdateOne {
	return NewNegativePromptClient(np.config).UpdateOne(np)
}

// Unwrap unwraps the NegativePrompt entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (np *NegativePrompt) Unwrap() *NegativePrompt {
	_tx, ok := np.config.driver.(*txDriver)
	if !ok {
		panic("ent: NegativePrompt is not a transactional entity")
	}
	np.config.driver = _tx.drv
	return np
}

// String implements the fmt.Stringer.
func (np *NegativePrompt) String() string {
	var builder strings.Builder
	builder.WriteString("NegativePrompt(")
	builder.WriteString(fmt.Sprintf("id=%v, ", np.ID))
	builder.WriteString("text=")
	builder.WriteString(np.Text)
	builder.WriteString(", ")
	if v := np.TranslatedText; v != nil {
		builder.WriteString("translated_text=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("ran_translation=")
	builder.WriteString(fmt.Sprintf("%v", np.RanTranslation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(np.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(np.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NegativePrompts is a parsable slice of NegativePrompt.
type NegativePrompts []*NegativePrompt
