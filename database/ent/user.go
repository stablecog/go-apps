// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// EmailNormalized holds the value of the "email_normalized" field.
	EmailNormalized *string `json:"email_normalized,omitempty"`
	// StripeCustomerID holds the value of the "stripe_customer_id" field.
	StripeCustomerID string `json:"stripe_customer_id,omitempty"`
	// ActiveProductID holds the value of the "active_product_id" field.
	ActiveProductID *string `json:"active_product_id,omitempty"`
	// LastSignInAt holds the value of the "last_sign_in_at" field.
	LastSignInAt *time.Time `json:"last_sign_in_at,omitempty"`
	// LastSeenAt holds the value of the "last_seen_at" field.
	LastSeenAt time.Time `json:"last_seen_at,omitempty"`
	// BannedAt holds the value of the "banned_at" field.
	BannedAt *time.Time `json:"banned_at,omitempty"`
	// ScheduledForDeletionOn holds the value of the "scheduled_for_deletion_on" field.
	ScheduledForDeletionOn *time.Time `json:"scheduled_for_deletion_on,omitempty"`
	// DataDeletedAt holds the value of the "data_deleted_at" field.
	DataDeletedAt *time.Time `json:"data_deleted_at,omitempty"`
	// WantsEmail holds the value of the "wants_email" field.
	WantsEmail *bool `json:"wants_email,omitempty"`
	// DiscordID holds the value of the "discord_id" field.
	DiscordID *string `json:"discord_id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// UsernameChangedAt holds the value of the "username_changed_at" field.
	UsernameChangedAt *time.Time `json:"username_changed_at,omitempty"`
	// UsernameNormalized holds the value of the "username_normalized" field.
	UsernameNormalized *string `json:"username_normalized,omitempty"`
	// StripeHighestProductID holds the value of the "stripe_highest_product_id" field.
	StripeHighestProductID *string `json:"stripe_highest_product_id,omitempty"`
	// StripeHighestPriceID holds the value of the "stripe_highest_price_id" field.
	StripeHighestPriceID *string `json:"stripe_highest_price_id,omitempty"`
	// StripeCancelsAt holds the value of the "stripe_cancels_at" field.
	StripeCancelsAt *time.Time `json:"stripe_cancels_at,omitempty"`
	// StripeSyncedAt holds the value of the "stripe_synced_at" field.
	StripeSyncedAt *time.Time `json:"stripe_synced_at,omitempty"`
	// StripeRenewsAt holds the value of the "stripe_renews_at" field.
	StripeRenewsAt *time.Time `json:"stripe_renews_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Generations holds the value of the generations edge.
	Generations []*Generation `json:"generations,omitempty"`
	// Upscales holds the value of the upscales edge.
	Upscales []*Upscale `json:"upscales,omitempty"`
	// Voiceovers holds the value of the voiceovers edge.
	Voiceovers []*Voiceover `json:"voiceovers,omitempty"`
	// Credits holds the value of the credits edge.
	Credits []*Credit `json:"credits,omitempty"`
	// APITokens holds the value of the api_tokens edge.
	APITokens []*ApiToken `json:"api_tokens,omitempty"`
	// TipsGiven holds the value of the tips_given edge.
	TipsGiven []*TipLog `json:"tips_given,omitempty"`
	// TipsReceived holds the value of the tips_received edge.
	TipsReceived []*TipLog `json:"tips_received,omitempty"`
	// Roles holds the value of the roles edge.
	Roles []*Role `json:"roles,omitempty"`
	// GenerationOutputLikes holds the value of the generation_output_likes edge.
	GenerationOutputLikes []*GenerationOutputLike `json:"generation_output_likes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// GenerationsOrErr returns the Generations value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) GenerationsOrErr() ([]*Generation, error) {
	if e.loadedTypes[0] {
		return e.Generations, nil
	}
	return nil, &NotLoadedError{edge: "generations"}
}

// UpscalesOrErr returns the Upscales value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UpscalesOrErr() ([]*Upscale, error) {
	if e.loadedTypes[1] {
		return e.Upscales, nil
	}
	return nil, &NotLoadedError{edge: "upscales"}
}

// VoiceoversOrErr returns the Voiceovers value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) VoiceoversOrErr() ([]*Voiceover, error) {
	if e.loadedTypes[2] {
		return e.Voiceovers, nil
	}
	return nil, &NotLoadedError{edge: "voiceovers"}
}

// CreditsOrErr returns the Credits value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CreditsOrErr() ([]*Credit, error) {
	if e.loadedTypes[3] {
		return e.Credits, nil
	}
	return nil, &NotLoadedError{edge: "credits"}
}

// APITokensOrErr returns the APITokens value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) APITokensOrErr() ([]*ApiToken, error) {
	if e.loadedTypes[4] {
		return e.APITokens, nil
	}
	return nil, &NotLoadedError{edge: "api_tokens"}
}

// TipsGivenOrErr returns the TipsGiven value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) TipsGivenOrErr() ([]*TipLog, error) {
	if e.loadedTypes[5] {
		return e.TipsGiven, nil
	}
	return nil, &NotLoadedError{edge: "tips_given"}
}

// TipsReceivedOrErr returns the TipsReceived value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) TipsReceivedOrErr() ([]*TipLog, error) {
	if e.loadedTypes[6] {
		return e.TipsReceived, nil
	}
	return nil, &NotLoadedError{edge: "tips_received"}
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RolesOrErr() ([]*Role, error) {
	if e.loadedTypes[7] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// GenerationOutputLikesOrErr returns the GenerationOutputLikes value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) GenerationOutputLikesOrErr() ([]*GenerationOutputLike, error) {
	if e.loadedTypes[8] {
		return e.GenerationOutputLikes, nil
	}
	return nil, &NotLoadedError{edge: "generation_output_likes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldWantsEmail:
			values[i] = new(sql.NullBool)
		case user.FieldEmail, user.FieldEmailNormalized, user.FieldStripeCustomerID, user.FieldActiveProductID, user.FieldDiscordID, user.FieldUsername, user.FieldUsernameNormalized, user.FieldStripeHighestProductID, user.FieldStripeHighestPriceID:
			values[i] = new(sql.NullString)
		case user.FieldLastSignInAt, user.FieldLastSeenAt, user.FieldBannedAt, user.FieldScheduledForDeletionOn, user.FieldDataDeletedAt, user.FieldUsernameChangedAt, user.FieldStripeCancelsAt, user.FieldStripeSyncedAt, user.FieldStripeRenewsAt, user.FieldCreatedAt, user.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case user.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldEmailNormalized:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email_normalized", values[i])
			} else if value.Valid {
				u.EmailNormalized = new(string)
				*u.EmailNormalized = value.String
			}
		case user.FieldStripeCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_customer_id", values[i])
			} else if value.Valid {
				u.StripeCustomerID = value.String
			}
		case user.FieldActiveProductID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field active_product_id", values[i])
			} else if value.Valid {
				u.ActiveProductID = new(string)
				*u.ActiveProductID = value.String
			}
		case user.FieldLastSignInAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_sign_in_at", values[i])
			} else if value.Valid {
				u.LastSignInAt = new(time.Time)
				*u.LastSignInAt = value.Time
			}
		case user.FieldLastSeenAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_seen_at", values[i])
			} else if value.Valid {
				u.LastSeenAt = value.Time
			}
		case user.FieldBannedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field banned_at", values[i])
			} else if value.Valid {
				u.BannedAt = new(time.Time)
				*u.BannedAt = value.Time
			}
		case user.FieldScheduledForDeletionOn:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field scheduled_for_deletion_on", values[i])
			} else if value.Valid {
				u.ScheduledForDeletionOn = new(time.Time)
				*u.ScheduledForDeletionOn = value.Time
			}
		case user.FieldDataDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field data_deleted_at", values[i])
			} else if value.Valid {
				u.DataDeletedAt = new(time.Time)
				*u.DataDeletedAt = value.Time
			}
		case user.FieldWantsEmail:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field wants_email", values[i])
			} else if value.Valid {
				u.WantsEmail = new(bool)
				*u.WantsEmail = value.Bool
			}
		case user.FieldDiscordID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discord_id", values[i])
			} else if value.Valid {
				u.DiscordID = new(string)
				*u.DiscordID = value.String
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldUsernameChangedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field username_changed_at", values[i])
			} else if value.Valid {
				u.UsernameChangedAt = new(time.Time)
				*u.UsernameChangedAt = value.Time
			}
		case user.FieldUsernameNormalized:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username_normalized", values[i])
			} else if value.Valid {
				u.UsernameNormalized = new(string)
				*u.UsernameNormalized = value.String
			}
		case user.FieldStripeHighestProductID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_highest_product_id", values[i])
			} else if value.Valid {
				u.StripeHighestProductID = new(string)
				*u.StripeHighestProductID = value.String
			}
		case user.FieldStripeHighestPriceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_highest_price_id", values[i])
			} else if value.Valid {
				u.StripeHighestPriceID = new(string)
				*u.StripeHighestPriceID = value.String
			}
		case user.FieldStripeCancelsAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_cancels_at", values[i])
			} else if value.Valid {
				u.StripeCancelsAt = new(time.Time)
				*u.StripeCancelsAt = value.Time
			}
		case user.FieldStripeSyncedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_synced_at", values[i])
			} else if value.Valid {
				u.StripeSyncedAt = new(time.Time)
				*u.StripeSyncedAt = value.Time
			}
		case user.FieldStripeRenewsAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_renews_at", values[i])
			} else if value.Valid {
				u.StripeRenewsAt = new(time.Time)
				*u.StripeRenewsAt = value.Time
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryGenerations queries the "generations" edge of the User entity.
func (u *User) QueryGenerations() *GenerationQuery {
	return NewUserClient(u.config).QueryGenerations(u)
}

// QueryUpscales queries the "upscales" edge of the User entity.
func (u *User) QueryUpscales() *UpscaleQuery {
	return NewUserClient(u.config).QueryUpscales(u)
}

// QueryVoiceovers queries the "voiceovers" edge of the User entity.
func (u *User) QueryVoiceovers() *VoiceoverQuery {
	return NewUserClient(u.config).QueryVoiceovers(u)
}

// QueryCredits queries the "credits" edge of the User entity.
func (u *User) QueryCredits() *CreditQuery {
	return NewUserClient(u.config).QueryCredits(u)
}

// QueryAPITokens queries the "api_tokens" edge of the User entity.
func (u *User) QueryAPITokens() *ApiTokenQuery {
	return NewUserClient(u.config).QueryAPITokens(u)
}

// QueryTipsGiven queries the "tips_given" edge of the User entity.
func (u *User) QueryTipsGiven() *TipLogQuery {
	return NewUserClient(u.config).QueryTipsGiven(u)
}

// QueryTipsReceived queries the "tips_received" edge of the User entity.
func (u *User) QueryTipsReceived() *TipLogQuery {
	return NewUserClient(u.config).QueryTipsReceived(u)
}

// QueryRoles queries the "roles" edge of the User entity.
func (u *User) QueryRoles() *RoleQuery {
	return NewUserClient(u.config).QueryRoles(u)
}

// QueryGenerationOutputLikes queries the "generation_output_likes" edge of the User entity.
func (u *User) QueryGenerationOutputLikes() *GenerationOutputLikeQuery {
	return NewUserClient(u.config).QueryGenerationOutputLikes(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	if v := u.EmailNormalized; v != nil {
		builder.WriteString("email_normalized=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("stripe_customer_id=")
	builder.WriteString(u.StripeCustomerID)
	builder.WriteString(", ")
	if v := u.ActiveProductID; v != nil {
		builder.WriteString("active_product_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.LastSignInAt; v != nil {
		builder.WriteString("last_sign_in_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("last_seen_at=")
	builder.WriteString(u.LastSeenAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := u.BannedAt; v != nil {
		builder.WriteString("banned_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := u.ScheduledForDeletionOn; v != nil {
		builder.WriteString("scheduled_for_deletion_on=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := u.DataDeletedAt; v != nil {
		builder.WriteString("data_deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := u.WantsEmail; v != nil {
		builder.WriteString("wants_email=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := u.DiscordID; v != nil {
		builder.WriteString("discord_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	if v := u.UsernameChangedAt; v != nil {
		builder.WriteString("username_changed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := u.UsernameNormalized; v != nil {
		builder.WriteString("username_normalized=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.StripeHighestProductID; v != nil {
		builder.WriteString("stripe_highest_product_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.StripeHighestPriceID; v != nil {
		builder.WriteString("stripe_highest_price_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.StripeCancelsAt; v != nil {
		builder.WriteString("stripe_cancels_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := u.StripeSyncedAt; v != nil {
		builder.WriteString("stripe_synced_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := u.StripeRenewsAt; v != nil {
		builder.WriteString("stripe_renews_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
