// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/migrate"

	"github.com/stablecog/sc-go/database/ent/apitoken"
	"github.com/stablecog/sc-go/database/ent/authclient"
	"github.com/stablecog/sc-go/database/ent/bannedwords"
	"github.com/stablecog/sc-go/database/ent/credit"
	"github.com/stablecog/sc-go/database/ent/credittype"
	"github.com/stablecog/sc-go/database/ent/deviceinfo"
	"github.com/stablecog/sc-go/database/ent/disposableemail"
	"github.com/stablecog/sc-go/database/ent/generation"
	"github.com/stablecog/sc-go/database/ent/generationmodel"
	"github.com/stablecog/sc-go/database/ent/generationoutput"
	"github.com/stablecog/sc-go/database/ent/generationoutputlike"
	"github.com/stablecog/sc-go/database/ent/ipblacklist"
	"github.com/stablecog/sc-go/database/ent/mqlog"
	"github.com/stablecog/sc-go/database/ent/negativeprompt"
	"github.com/stablecog/sc-go/database/ent/prompt"
	"github.com/stablecog/sc-go/database/ent/role"
	"github.com/stablecog/sc-go/database/ent/scheduler"
	"github.com/stablecog/sc-go/database/ent/thumbmarkidblacklist"
	"github.com/stablecog/sc-go/database/ent/tiplog"
	"github.com/stablecog/sc-go/database/ent/upscale"
	"github.com/stablecog/sc-go/database/ent/upscalemodel"
	"github.com/stablecog/sc-go/database/ent/upscaleoutput"
	"github.com/stablecog/sc-go/database/ent/user"
	"github.com/stablecog/sc-go/database/ent/usernameblacklist"
	"github.com/stablecog/sc-go/database/ent/voiceover"
	"github.com/stablecog/sc-go/database/ent/voiceovermodel"
	"github.com/stablecog/sc-go/database/ent/voiceoveroutput"
	"github.com/stablecog/sc-go/database/ent/voiceoverspeaker"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ApiToken is the client for interacting with the ApiToken builders.
	ApiToken *ApiTokenClient
	// AuthClient is the client for interacting with the AuthClient builders.
	AuthClient *AuthClientClient
	// BannedWords is the client for interacting with the BannedWords builders.
	BannedWords *BannedWordsClient
	// Credit is the client for interacting with the Credit builders.
	Credit *CreditClient
	// CreditType is the client for interacting with the CreditType builders.
	CreditType *CreditTypeClient
	// DeviceInfo is the client for interacting with the DeviceInfo builders.
	DeviceInfo *DeviceInfoClient
	// DisposableEmail is the client for interacting with the DisposableEmail builders.
	DisposableEmail *DisposableEmailClient
	// Generation is the client for interacting with the Generation builders.
	Generation *GenerationClient
	// GenerationModel is the client for interacting with the GenerationModel builders.
	GenerationModel *GenerationModelClient
	// GenerationOutput is the client for interacting with the GenerationOutput builders.
	GenerationOutput *GenerationOutputClient
	// GenerationOutputLike is the client for interacting with the GenerationOutputLike builders.
	GenerationOutputLike *GenerationOutputLikeClient
	// IPBlackList is the client for interacting with the IPBlackList builders.
	IPBlackList *IPBlackListClient
	// MqLog is the client for interacting with the MqLog builders.
	MqLog *MqLogClient
	// NegativePrompt is the client for interacting with the NegativePrompt builders.
	NegativePrompt *NegativePromptClient
	// Prompt is the client for interacting with the Prompt builders.
	Prompt *PromptClient
	// Role is the client for interacting with the Role builders.
	Role *RoleClient
	// Scheduler is the client for interacting with the Scheduler builders.
	Scheduler *SchedulerClient
	// ThumbmarkIdBlackList is the client for interacting with the ThumbmarkIdBlackList builders.
	ThumbmarkIdBlackList *ThumbmarkIdBlackListClient
	// TipLog is the client for interacting with the TipLog builders.
	TipLog *TipLogClient
	// Upscale is the client for interacting with the Upscale builders.
	Upscale *UpscaleClient
	// UpscaleModel is the client for interacting with the UpscaleModel builders.
	UpscaleModel *UpscaleModelClient
	// UpscaleOutput is the client for interacting with the UpscaleOutput builders.
	UpscaleOutput *UpscaleOutputClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UsernameBlacklist is the client for interacting with the UsernameBlacklist builders.
	UsernameBlacklist *UsernameBlacklistClient
	// Voiceover is the client for interacting with the Voiceover builders.
	Voiceover *VoiceoverClient
	// VoiceoverModel is the client for interacting with the VoiceoverModel builders.
	VoiceoverModel *VoiceoverModelClient
	// VoiceoverOutput is the client for interacting with the VoiceoverOutput builders.
	VoiceoverOutput *VoiceoverOutputClient
	// VoiceoverSpeaker is the client for interacting with the VoiceoverSpeaker builders.
	VoiceoverSpeaker *VoiceoverSpeakerClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ApiToken = NewApiTokenClient(c.config)
	c.AuthClient = NewAuthClientClient(c.config)
	c.BannedWords = NewBannedWordsClient(c.config)
	c.Credit = NewCreditClient(c.config)
	c.CreditType = NewCreditTypeClient(c.config)
	c.DeviceInfo = NewDeviceInfoClient(c.config)
	c.DisposableEmail = NewDisposableEmailClient(c.config)
	c.Generation = NewGenerationClient(c.config)
	c.GenerationModel = NewGenerationModelClient(c.config)
	c.GenerationOutput = NewGenerationOutputClient(c.config)
	c.GenerationOutputLike = NewGenerationOutputLikeClient(c.config)
	c.IPBlackList = NewIPBlackListClient(c.config)
	c.MqLog = NewMqLogClient(c.config)
	c.NegativePrompt = NewNegativePromptClient(c.config)
	c.Prompt = NewPromptClient(c.config)
	c.Role = NewRoleClient(c.config)
	c.Scheduler = NewSchedulerClient(c.config)
	c.ThumbmarkIdBlackList = NewThumbmarkIdBlackListClient(c.config)
	c.TipLog = NewTipLogClient(c.config)
	c.Upscale = NewUpscaleClient(c.config)
	c.UpscaleModel = NewUpscaleModelClient(c.config)
	c.UpscaleOutput = NewUpscaleOutputClient(c.config)
	c.User = NewUserClient(c.config)
	c.UsernameBlacklist = NewUsernameBlacklistClient(c.config)
	c.Voiceover = NewVoiceoverClient(c.config)
	c.VoiceoverModel = NewVoiceoverModelClient(c.config)
	c.VoiceoverOutput = NewVoiceoverOutputClient(c.config)
	c.VoiceoverSpeaker = NewVoiceoverSpeakerClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		ApiToken:             NewApiTokenClient(cfg),
		AuthClient:           NewAuthClientClient(cfg),
		BannedWords:          NewBannedWordsClient(cfg),
		Credit:               NewCreditClient(cfg),
		CreditType:           NewCreditTypeClient(cfg),
		DeviceInfo:           NewDeviceInfoClient(cfg),
		DisposableEmail:      NewDisposableEmailClient(cfg),
		Generation:           NewGenerationClient(cfg),
		GenerationModel:      NewGenerationModelClient(cfg),
		GenerationOutput:     NewGenerationOutputClient(cfg),
		GenerationOutputLike: NewGenerationOutputLikeClient(cfg),
		IPBlackList:          NewIPBlackListClient(cfg),
		MqLog:                NewMqLogClient(cfg),
		NegativePrompt:       NewNegativePromptClient(cfg),
		Prompt:               NewPromptClient(cfg),
		Role:                 NewRoleClient(cfg),
		Scheduler:            NewSchedulerClient(cfg),
		ThumbmarkIdBlackList: NewThumbmarkIdBlackListClient(cfg),
		TipLog:               NewTipLogClient(cfg),
		Upscale:              NewUpscaleClient(cfg),
		UpscaleModel:         NewUpscaleModelClient(cfg),
		UpscaleOutput:        NewUpscaleOutputClient(cfg),
		User:                 NewUserClient(cfg),
		UsernameBlacklist:    NewUsernameBlacklistClient(cfg),
		Voiceover:            NewVoiceoverClient(cfg),
		VoiceoverModel:       NewVoiceoverModelClient(cfg),
		VoiceoverOutput:      NewVoiceoverOutputClient(cfg),
		VoiceoverSpeaker:     NewVoiceoverSpeakerClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		ApiToken:             NewApiTokenClient(cfg),
		AuthClient:           NewAuthClientClient(cfg),
		BannedWords:          NewBannedWordsClient(cfg),
		Credit:               NewCreditClient(cfg),
		CreditType:           NewCreditTypeClient(cfg),
		DeviceInfo:           NewDeviceInfoClient(cfg),
		DisposableEmail:      NewDisposableEmailClient(cfg),
		Generation:           NewGenerationClient(cfg),
		GenerationModel:      NewGenerationModelClient(cfg),
		GenerationOutput:     NewGenerationOutputClient(cfg),
		GenerationOutputLike: NewGenerationOutputLikeClient(cfg),
		IPBlackList:          NewIPBlackListClient(cfg),
		MqLog:                NewMqLogClient(cfg),
		NegativePrompt:       NewNegativePromptClient(cfg),
		Prompt:               NewPromptClient(cfg),
		Role:                 NewRoleClient(cfg),
		Scheduler:            NewSchedulerClient(cfg),
		ThumbmarkIdBlackList: NewThumbmarkIdBlackListClient(cfg),
		TipLog:               NewTipLogClient(cfg),
		Upscale:              NewUpscaleClient(cfg),
		UpscaleModel:         NewUpscaleModelClient(cfg),
		UpscaleOutput:        NewUpscaleOutputClient(cfg),
		User:                 NewUserClient(cfg),
		UsernameBlacklist:    NewUsernameBlacklistClient(cfg),
		Voiceover:            NewVoiceoverClient(cfg),
		VoiceoverModel:       NewVoiceoverModelClient(cfg),
		VoiceoverOutput:      NewVoiceoverOutputClient(cfg),
		VoiceoverSpeaker:     NewVoiceoverSpeakerClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ApiToken.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.ApiToken.Use(hooks...)
	c.AuthClient.Use(hooks...)
	c.BannedWords.Use(hooks...)
	c.Credit.Use(hooks...)
	c.CreditType.Use(hooks...)
	c.DeviceInfo.Use(hooks...)
	c.DisposableEmail.Use(hooks...)
	c.Generation.Use(hooks...)
	c.GenerationModel.Use(hooks...)
	c.GenerationOutput.Use(hooks...)
	c.GenerationOutputLike.Use(hooks...)
	c.IPBlackList.Use(hooks...)
	c.MqLog.Use(hooks...)
	c.NegativePrompt.Use(hooks...)
	c.Prompt.Use(hooks...)
	c.Role.Use(hooks...)
	c.Scheduler.Use(hooks...)
	c.ThumbmarkIdBlackList.Use(hooks...)
	c.TipLog.Use(hooks...)
	c.Upscale.Use(hooks...)
	c.UpscaleModel.Use(hooks...)
	c.UpscaleOutput.Use(hooks...)
	c.User.Use(hooks...)
	c.UsernameBlacklist.Use(hooks...)
	c.Voiceover.Use(hooks...)
	c.VoiceoverModel.Use(hooks...)
	c.VoiceoverOutput.Use(hooks...)
	c.VoiceoverSpeaker.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.ApiToken.Intercept(interceptors...)
	c.AuthClient.Intercept(interceptors...)
	c.BannedWords.Intercept(interceptors...)
	c.Credit.Intercept(interceptors...)
	c.CreditType.Intercept(interceptors...)
	c.DeviceInfo.Intercept(interceptors...)
	c.DisposableEmail.Intercept(interceptors...)
	c.Generation.Intercept(interceptors...)
	c.GenerationModel.Intercept(interceptors...)
	c.GenerationOutput.Intercept(interceptors...)
	c.GenerationOutputLike.Intercept(interceptors...)
	c.IPBlackList.Intercept(interceptors...)
	c.MqLog.Intercept(interceptors...)
	c.NegativePrompt.Intercept(interceptors...)
	c.Prompt.Intercept(interceptors...)
	c.Role.Intercept(interceptors...)
	c.Scheduler.Intercept(interceptors...)
	c.ThumbmarkIdBlackList.Intercept(interceptors...)
	c.TipLog.Intercept(interceptors...)
	c.Upscale.Intercept(interceptors...)
	c.UpscaleModel.Intercept(interceptors...)
	c.UpscaleOutput.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
	c.UsernameBlacklist.Intercept(interceptors...)
	c.Voiceover.Intercept(interceptors...)
	c.VoiceoverModel.Intercept(interceptors...)
	c.VoiceoverOutput.Intercept(interceptors...)
	c.VoiceoverSpeaker.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ApiTokenMutation:
		return c.ApiToken.mutate(ctx, m)
	case *AuthClientMutation:
		return c.AuthClient.mutate(ctx, m)
	case *BannedWordsMutation:
		return c.BannedWords.mutate(ctx, m)
	case *CreditMutation:
		return c.Credit.mutate(ctx, m)
	case *CreditTypeMutation:
		return c.CreditType.mutate(ctx, m)
	case *DeviceInfoMutation:
		return c.DeviceInfo.mutate(ctx, m)
	case *DisposableEmailMutation:
		return c.DisposableEmail.mutate(ctx, m)
	case *GenerationMutation:
		return c.Generation.mutate(ctx, m)
	case *GenerationModelMutation:
		return c.GenerationModel.mutate(ctx, m)
	case *GenerationOutputMutation:
		return c.GenerationOutput.mutate(ctx, m)
	case *GenerationOutputLikeMutation:
		return c.GenerationOutputLike.mutate(ctx, m)
	case *IPBlackListMutation:
		return c.IPBlackList.mutate(ctx, m)
	case *MqLogMutation:
		return c.MqLog.mutate(ctx, m)
	case *NegativePromptMutation:
		return c.NegativePrompt.mutate(ctx, m)
	case *PromptMutation:
		return c.Prompt.mutate(ctx, m)
	case *RoleMutation:
		return c.Role.mutate(ctx, m)
	case *SchedulerMutation:
		return c.Scheduler.mutate(ctx, m)
	case *ThumbmarkIdBlackListMutation:
		return c.ThumbmarkIdBlackList.mutate(ctx, m)
	case *TipLogMutation:
		return c.TipLog.mutate(ctx, m)
	case *UpscaleMutation:
		return c.Upscale.mutate(ctx, m)
	case *UpscaleModelMutation:
		return c.UpscaleModel.mutate(ctx, m)
	case *UpscaleOutputMutation:
		return c.UpscaleOutput.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UsernameBlacklistMutation:
		return c.UsernameBlacklist.mutate(ctx, m)
	case *VoiceoverMutation:
		return c.Voiceover.mutate(ctx, m)
	case *VoiceoverModelMutation:
		return c.VoiceoverModel.mutate(ctx, m)
	case *VoiceoverOutputMutation:
		return c.VoiceoverOutput.mutate(ctx, m)
	case *VoiceoverSpeakerMutation:
		return c.VoiceoverSpeaker.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ApiTokenClient is a client for the ApiToken schema.
type ApiTokenClient struct {
	config
}

// NewApiTokenClient returns a client for the ApiToken from the given config.
func NewApiTokenClient(c config) *ApiTokenClient {
	return &ApiTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apitoken.Hooks(f(g(h())))`.
func (c *ApiTokenClient) Use(hooks ...Hook) {
	c.hooks.ApiToken = append(c.hooks.ApiToken, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apitoken.Intercept(f(g(h())))`.
func (c *ApiTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.ApiToken = append(c.inters.ApiToken, interceptors...)
}

// Create returns a builder for creating a ApiToken entity.
func (c *ApiTokenClient) Create() *ApiTokenCreate {
	mutation := newApiTokenMutation(c.config, OpCreate)
	return &ApiTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ApiToken entities.
func (c *ApiTokenClient) CreateBulk(builders ...*ApiTokenCreate) *ApiTokenCreateBulk {
	return &ApiTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ApiToken.
func (c *ApiTokenClient) Update() *ApiTokenUpdate {
	mutation := newApiTokenMutation(c.config, OpUpdate)
	return &ApiTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApiTokenClient) UpdateOne(at *ApiToken) *ApiTokenUpdateOne {
	mutation := newApiTokenMutation(c.config, OpUpdateOne, withApiToken(at))
	return &ApiTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApiTokenClient) UpdateOneID(id uuid.UUID) *ApiTokenUpdateOne {
	mutation := newApiTokenMutation(c.config, OpUpdateOne, withApiTokenID(id))
	return &ApiTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ApiToken.
func (c *ApiTokenClient) Delete() *ApiTokenDelete {
	mutation := newApiTokenMutation(c.config, OpDelete)
	return &ApiTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApiTokenClient) DeleteOne(at *ApiToken) *ApiTokenDeleteOne {
	return c.DeleteOneID(at.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApiTokenClient) DeleteOneID(id uuid.UUID) *ApiTokenDeleteOne {
	builder := c.Delete().Where(apitoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApiTokenDeleteOne{builder}
}

// Query returns a query builder for ApiToken.
func (c *ApiTokenClient) Query() *ApiTokenQuery {
	return &ApiTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApiToken},
		inters: c.Interceptors(),
	}
}

// Get returns a ApiToken entity by its id.
func (c *ApiTokenClient) Get(ctx context.Context, id uuid.UUID) (*ApiToken, error) {
	return c.Query().Where(apitoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApiTokenClient) GetX(ctx context.Context, id uuid.UUID) *ApiToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a ApiToken.
func (c *ApiTokenClient) QueryUser(at *ApiToken) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apitoken.Table, apitoken.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, apitoken.UserTable, apitoken.UserColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGenerations queries the generations edge of a ApiToken.
func (c *ApiTokenClient) QueryGenerations(at *ApiToken) *GenerationQuery {
	query := (&GenerationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apitoken.Table, apitoken.FieldID, id),
			sqlgraph.To(generation.Table, generation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apitoken.GenerationsTable, apitoken.GenerationsColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpscales queries the upscales edge of a ApiToken.
func (c *ApiTokenClient) QueryUpscales(at *ApiToken) *UpscaleQuery {
	query := (&UpscaleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apitoken.Table, apitoken.FieldID, id),
			sqlgraph.To(upscale.Table, upscale.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apitoken.UpscalesTable, apitoken.UpscalesColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVoiceovers queries the voiceovers edge of a ApiToken.
func (c *ApiTokenClient) QueryVoiceovers(at *ApiToken) *VoiceoverQuery {
	query := (&VoiceoverClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apitoken.Table, apitoken.FieldID, id),
			sqlgraph.To(voiceover.Table, voiceover.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apitoken.VoiceoversTable, apitoken.VoiceoversColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAuthClients queries the auth_clients edge of a ApiToken.
func (c *ApiTokenClient) QueryAuthClients(at *ApiToken) *AuthClientQuery {
	query := (&AuthClientClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apitoken.Table, apitoken.FieldID, id),
			sqlgraph.To(authclient.Table, authclient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, apitoken.AuthClientsTable, apitoken.AuthClientsColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApiTokenClient) Hooks() []Hook {
	return c.hooks.ApiToken
}

// Interceptors returns the client interceptors.
func (c *ApiTokenClient) Interceptors() []Interceptor {
	return c.inters.ApiToken
}

func (c *ApiTokenClient) mutate(ctx context.Context, m *ApiTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApiTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApiTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApiTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApiTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ApiToken mutation op: %q", m.Op())
	}
}

// AuthClientClient is a client for the AuthClient schema.
type AuthClientClient struct {
	config
}

// NewAuthClientClient returns a client for the AuthClient from the given config.
func NewAuthClientClient(c config) *AuthClientClient {
	return &AuthClientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `authclient.Hooks(f(g(h())))`.
func (c *AuthClientClient) Use(hooks ...Hook) {
	c.hooks.AuthClient = append(c.hooks.AuthClient, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `authclient.Intercept(f(g(h())))`.
func (c *AuthClientClient) Intercept(interceptors ...Interceptor) {
	c.inters.AuthClient = append(c.inters.AuthClient, interceptors...)
}

// Create returns a builder for creating a AuthClient entity.
func (c *AuthClientClient) Create() *AuthClientCreate {
	mutation := newAuthClientMutation(c.config, OpCreate)
	return &AuthClientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuthClient entities.
func (c *AuthClientClient) CreateBulk(builders ...*AuthClientCreate) *AuthClientCreateBulk {
	return &AuthClientCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuthClient.
func (c *AuthClientClient) Update() *AuthClientUpdate {
	mutation := newAuthClientMutation(c.config, OpUpdate)
	return &AuthClientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthClientClient) UpdateOne(ac *AuthClient) *AuthClientUpdateOne {
	mutation := newAuthClientMutation(c.config, OpUpdateOne, withAuthClient(ac))
	return &AuthClientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthClientClient) UpdateOneID(id uuid.UUID) *AuthClientUpdateOne {
	mutation := newAuthClientMutation(c.config, OpUpdateOne, withAuthClientID(id))
	return &AuthClientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuthClient.
func (c *AuthClientClient) Delete() *AuthClientDelete {
	mutation := newAuthClientMutation(c.config, OpDelete)
	return &AuthClientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuthClientClient) DeleteOne(ac *AuthClient) *AuthClientDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuthClientClient) DeleteOneID(id uuid.UUID) *AuthClientDeleteOne {
	builder := c.Delete().Where(authclient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthClientDeleteOne{builder}
}

// Query returns a query builder for AuthClient.
func (c *AuthClientClient) Query() *AuthClientQuery {
	return &AuthClientQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAuthClient},
		inters: c.Interceptors(),
	}
}

// Get returns a AuthClient entity by its id.
func (c *AuthClientClient) Get(ctx context.Context, id uuid.UUID) (*AuthClient, error) {
	return c.Query().Where(authclient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthClientClient) GetX(ctx context.Context, id uuid.UUID) *AuthClient {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAPITokens queries the api_tokens edge of a AuthClient.
func (c *AuthClientClient) QueryAPITokens(ac *AuthClient) *ApiTokenQuery {
	query := (&ApiTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(authclient.Table, authclient.FieldID, id),
			sqlgraph.To(apitoken.Table, apitoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, authclient.APITokensTable, authclient.APITokensColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AuthClientClient) Hooks() []Hook {
	return c.hooks.AuthClient
}

// Interceptors returns the client interceptors.
func (c *AuthClientClient) Interceptors() []Interceptor {
	return c.inters.AuthClient
}

func (c *AuthClientClient) mutate(ctx context.Context, m *AuthClientMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuthClientCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuthClientUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuthClientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuthClientDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AuthClient mutation op: %q", m.Op())
	}
}

// BannedWordsClient is a client for the BannedWords schema.
type BannedWordsClient struct {
	config
}

// NewBannedWordsClient returns a client for the BannedWords from the given config.
func NewBannedWordsClient(c config) *BannedWordsClient {
	return &BannedWordsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bannedwords.Hooks(f(g(h())))`.
func (c *BannedWordsClient) Use(hooks ...Hook) {
	c.hooks.BannedWords = append(c.hooks.BannedWords, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bannedwords.Intercept(f(g(h())))`.
func (c *BannedWordsClient) Intercept(interceptors ...Interceptor) {
	c.inters.BannedWords = append(c.inters.BannedWords, interceptors...)
}

// Create returns a builder for creating a BannedWords entity.
func (c *BannedWordsClient) Create() *BannedWordsCreate {
	mutation := newBannedWordsMutation(c.config, OpCreate)
	return &BannedWordsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BannedWords entities.
func (c *BannedWordsClient) CreateBulk(builders ...*BannedWordsCreate) *BannedWordsCreateBulk {
	return &BannedWordsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BannedWords.
func (c *BannedWordsClient) Update() *BannedWordsUpdate {
	mutation := newBannedWordsMutation(c.config, OpUpdate)
	return &BannedWordsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BannedWordsClient) UpdateOne(bw *BannedWords) *BannedWordsUpdateOne {
	mutation := newBannedWordsMutation(c.config, OpUpdateOne, withBannedWords(bw))
	return &BannedWordsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BannedWordsClient) UpdateOneID(id uuid.UUID) *BannedWordsUpdateOne {
	mutation := newBannedWordsMutation(c.config, OpUpdateOne, withBannedWordsID(id))
	return &BannedWordsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BannedWords.
func (c *BannedWordsClient) Delete() *BannedWordsDelete {
	mutation := newBannedWordsMutation(c.config, OpDelete)
	return &BannedWordsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BannedWordsClient) DeleteOne(bw *BannedWords) *BannedWordsDeleteOne {
	return c.DeleteOneID(bw.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BannedWordsClient) DeleteOneID(id uuid.UUID) *BannedWordsDeleteOne {
	builder := c.Delete().Where(bannedwords.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BannedWordsDeleteOne{builder}
}

// Query returns a query builder for BannedWords.
func (c *BannedWordsClient) Query() *BannedWordsQuery {
	return &BannedWordsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBannedWords},
		inters: c.Interceptors(),
	}
}

// Get returns a BannedWords entity by its id.
func (c *BannedWordsClient) Get(ctx context.Context, id uuid.UUID) (*BannedWords, error) {
	return c.Query().Where(bannedwords.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BannedWordsClient) GetX(ctx context.Context, id uuid.UUID) *BannedWords {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BannedWordsClient) Hooks() []Hook {
	return c.hooks.BannedWords
}

// Interceptors returns the client interceptors.
func (c *BannedWordsClient) Interceptors() []Interceptor {
	return c.inters.BannedWords
}

func (c *BannedWordsClient) mutate(ctx context.Context, m *BannedWordsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BannedWordsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BannedWordsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BannedWordsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BannedWordsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BannedWords mutation op: %q", m.Op())
	}
}

// CreditClient is a client for the Credit schema.
type CreditClient struct {
	config
}

// NewCreditClient returns a client for the Credit from the given config.
func NewCreditClient(c config) *CreditClient {
	return &CreditClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `credit.Hooks(f(g(h())))`.
func (c *CreditClient) Use(hooks ...Hook) {
	c.hooks.Credit = append(c.hooks.Credit, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `credit.Intercept(f(g(h())))`.
func (c *CreditClient) Intercept(interceptors ...Interceptor) {
	c.inters.Credit = append(c.inters.Credit, interceptors...)
}

// Create returns a builder for creating a Credit entity.
func (c *CreditClient) Create() *CreditCreate {
	mutation := newCreditMutation(c.config, OpCreate)
	return &CreditCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Credit entities.
func (c *CreditClient) CreateBulk(builders ...*CreditCreate) *CreditCreateBulk {
	return &CreditCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Credit.
func (c *CreditClient) Update() *CreditUpdate {
	mutation := newCreditMutation(c.config, OpUpdate)
	return &CreditUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CreditClient) UpdateOne(cr *Credit) *CreditUpdateOne {
	mutation := newCreditMutation(c.config, OpUpdateOne, withCredit(cr))
	return &CreditUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CreditClient) UpdateOneID(id uuid.UUID) *CreditUpdateOne {
	mutation := newCreditMutation(c.config, OpUpdateOne, withCreditID(id))
	return &CreditUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Credit.
func (c *CreditClient) Delete() *CreditDelete {
	mutation := newCreditMutation(c.config, OpDelete)
	return &CreditDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CreditClient) DeleteOne(cr *Credit) *CreditDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CreditClient) DeleteOneID(id uuid.UUID) *CreditDeleteOne {
	builder := c.Delete().Where(credit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CreditDeleteOne{builder}
}

// Query returns a query builder for Credit.
func (c *CreditClient) Query() *CreditQuery {
	return &CreditQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCredit},
		inters: c.Interceptors(),
	}
}

// Get returns a Credit entity by its id.
func (c *CreditClient) Get(ctx context.Context, id uuid.UUID) (*Credit, error) {
	return c.Query().Where(credit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CreditClient) GetX(ctx context.Context, id uuid.UUID) *Credit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Credit.
func (c *CreditClient) QueryUsers(cr *Credit) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(credit.Table, credit.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, credit.UsersTable, credit.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(cr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreditType queries the credit_type edge of a Credit.
func (c *CreditClient) QueryCreditType(cr *Credit) *CreditTypeQuery {
	query := (&CreditTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(credit.Table, credit.FieldID, id),
			sqlgraph.To(credittype.Table, credittype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, credit.CreditTypeTable, credit.CreditTypeColumn),
		)
		fromV = sqlgraph.Neighbors(cr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CreditClient) Hooks() []Hook {
	return c.hooks.Credit
}

// Interceptors returns the client interceptors.
func (c *CreditClient) Interceptors() []Interceptor {
	return c.inters.Credit
}

func (c *CreditClient) mutate(ctx context.Context, m *CreditMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CreditCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CreditUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CreditUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CreditDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Credit mutation op: %q", m.Op())
	}
}

// CreditTypeClient is a client for the CreditType schema.
type CreditTypeClient struct {
	config
}

// NewCreditTypeClient returns a client for the CreditType from the given config.
func NewCreditTypeClient(c config) *CreditTypeClient {
	return &CreditTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `credittype.Hooks(f(g(h())))`.
func (c *CreditTypeClient) Use(hooks ...Hook) {
	c.hooks.CreditType = append(c.hooks.CreditType, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `credittype.Intercept(f(g(h())))`.
func (c *CreditTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.CreditType = append(c.inters.CreditType, interceptors...)
}

// Create returns a builder for creating a CreditType entity.
func (c *CreditTypeClient) Create() *CreditTypeCreate {
	mutation := newCreditTypeMutation(c.config, OpCreate)
	return &CreditTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CreditType entities.
func (c *CreditTypeClient) CreateBulk(builders ...*CreditTypeCreate) *CreditTypeCreateBulk {
	return &CreditTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CreditType.
func (c *CreditTypeClient) Update() *CreditTypeUpdate {
	mutation := newCreditTypeMutation(c.config, OpUpdate)
	return &CreditTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CreditTypeClient) UpdateOne(ct *CreditType) *CreditTypeUpdateOne {
	mutation := newCreditTypeMutation(c.config, OpUpdateOne, withCreditType(ct))
	return &CreditTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CreditTypeClient) UpdateOneID(id uuid.UUID) *CreditTypeUpdateOne {
	mutation := newCreditTypeMutation(c.config, OpUpdateOne, withCreditTypeID(id))
	return &CreditTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CreditType.
func (c *CreditTypeClient) Delete() *CreditTypeDelete {
	mutation := newCreditTypeMutation(c.config, OpDelete)
	return &CreditTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CreditTypeClient) DeleteOne(ct *CreditType) *CreditTypeDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CreditTypeClient) DeleteOneID(id uuid.UUID) *CreditTypeDeleteOne {
	builder := c.Delete().Where(credittype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CreditTypeDeleteOne{builder}
}

// Query returns a query builder for CreditType.
func (c *CreditTypeClient) Query() *CreditTypeQuery {
	return &CreditTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCreditType},
		inters: c.Interceptors(),
	}
}

// Get returns a CreditType entity by its id.
func (c *CreditTypeClient) Get(ctx context.Context, id uuid.UUID) (*CreditType, error) {
	return c.Query().Where(credittype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CreditTypeClient) GetX(ctx context.Context, id uuid.UUID) *CreditType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCredits queries the credits edge of a CreditType.
func (c *CreditTypeClient) QueryCredits(ct *CreditType) *CreditQuery {
	query := (&CreditClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(credittype.Table, credittype.FieldID, id),
			sqlgraph.To(credit.Table, credit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, credittype.CreditsTable, credittype.CreditsColumn),
		)
		fromV = sqlgraph.Neighbors(ct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CreditTypeClient) Hooks() []Hook {
	return c.hooks.CreditType
}

// Interceptors returns the client interceptors.
func (c *CreditTypeClient) Interceptors() []Interceptor {
	return c.inters.CreditType
}

func (c *CreditTypeClient) mutate(ctx context.Context, m *CreditTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CreditTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CreditTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CreditTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CreditTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CreditType mutation op: %q", m.Op())
	}
}

// DeviceInfoClient is a client for the DeviceInfo schema.
type DeviceInfoClient struct {
	config
}

// NewDeviceInfoClient returns a client for the DeviceInfo from the given config.
func NewDeviceInfoClient(c config) *DeviceInfoClient {
	return &DeviceInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deviceinfo.Hooks(f(g(h())))`.
func (c *DeviceInfoClient) Use(hooks ...Hook) {
	c.hooks.DeviceInfo = append(c.hooks.DeviceInfo, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deviceinfo.Intercept(f(g(h())))`.
func (c *DeviceInfoClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeviceInfo = append(c.inters.DeviceInfo, interceptors...)
}

// Create returns a builder for creating a DeviceInfo entity.
func (c *DeviceInfoClient) Create() *DeviceInfoCreate {
	mutation := newDeviceInfoMutation(c.config, OpCreate)
	return &DeviceInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeviceInfo entities.
func (c *DeviceInfoClient) CreateBulk(builders ...*DeviceInfoCreate) *DeviceInfoCreateBulk {
	return &DeviceInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeviceInfo.
func (c *DeviceInfoClient) Update() *DeviceInfoUpdate {
	mutation := newDeviceInfoMutation(c.config, OpUpdate)
	return &DeviceInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeviceInfoClient) UpdateOne(di *DeviceInfo) *DeviceInfoUpdateOne {
	mutation := newDeviceInfoMutation(c.config, OpUpdateOne, withDeviceInfo(di))
	return &DeviceInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeviceInfoClient) UpdateOneID(id uuid.UUID) *DeviceInfoUpdateOne {
	mutation := newDeviceInfoMutation(c.config, OpUpdateOne, withDeviceInfoID(id))
	return &DeviceInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeviceInfo.
func (c *DeviceInfoClient) Delete() *DeviceInfoDelete {
	mutation := newDeviceInfoMutation(c.config, OpDelete)
	return &DeviceInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeviceInfoClient) DeleteOne(di *DeviceInfo) *DeviceInfoDeleteOne {
	return c.DeleteOneID(di.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeviceInfoClient) DeleteOneID(id uuid.UUID) *DeviceInfoDeleteOne {
	builder := c.Delete().Where(deviceinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeviceInfoDeleteOne{builder}
}

// Query returns a query builder for DeviceInfo.
func (c *DeviceInfoClient) Query() *DeviceInfoQuery {
	return &DeviceInfoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeviceInfo},
		inters: c.Interceptors(),
	}
}

// Get returns a DeviceInfo entity by its id.
func (c *DeviceInfoClient) Get(ctx context.Context, id uuid.UUID) (*DeviceInfo, error) {
	return c.Query().Where(deviceinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeviceInfoClient) GetX(ctx context.Context, id uuid.UUID) *DeviceInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGenerations queries the generations edge of a DeviceInfo.
func (c *DeviceInfoClient) QueryGenerations(di *DeviceInfo) *GenerationQuery {
	query := (&GenerationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := di.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deviceinfo.Table, deviceinfo.FieldID, id),
			sqlgraph.To(generation.Table, generation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deviceinfo.GenerationsTable, deviceinfo.GenerationsColumn),
		)
		fromV = sqlgraph.Neighbors(di.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpscales queries the upscales edge of a DeviceInfo.
func (c *DeviceInfoClient) QueryUpscales(di *DeviceInfo) *UpscaleQuery {
	query := (&UpscaleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := di.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deviceinfo.Table, deviceinfo.FieldID, id),
			sqlgraph.To(upscale.Table, upscale.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deviceinfo.UpscalesTable, deviceinfo.UpscalesColumn),
		)
		fromV = sqlgraph.Neighbors(di.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVoiceovers queries the voiceovers edge of a DeviceInfo.
func (c *DeviceInfoClient) QueryVoiceovers(di *DeviceInfo) *VoiceoverQuery {
	query := (&VoiceoverClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := di.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deviceinfo.Table, deviceinfo.FieldID, id),
			sqlgraph.To(voiceover.Table, voiceover.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deviceinfo.VoiceoversTable, deviceinfo.VoiceoversColumn),
		)
		fromV = sqlgraph.Neighbors(di.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeviceInfoClient) Hooks() []Hook {
	return c.hooks.DeviceInfo
}

// Interceptors returns the client interceptors.
func (c *DeviceInfoClient) Interceptors() []Interceptor {
	return c.inters.DeviceInfo
}

func (c *DeviceInfoClient) mutate(ctx context.Context, m *DeviceInfoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeviceInfoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeviceInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeviceInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeviceInfoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DeviceInfo mutation op: %q", m.Op())
	}
}

// DisposableEmailClient is a client for the DisposableEmail schema.
type DisposableEmailClient struct {
	config
}

// NewDisposableEmailClient returns a client for the DisposableEmail from the given config.
func NewDisposableEmailClient(c config) *DisposableEmailClient {
	return &DisposableEmailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `disposableemail.Hooks(f(g(h())))`.
func (c *DisposableEmailClient) Use(hooks ...Hook) {
	c.hooks.DisposableEmail = append(c.hooks.DisposableEmail, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `disposableemail.Intercept(f(g(h())))`.
func (c *DisposableEmailClient) Intercept(interceptors ...Interceptor) {
	c.inters.DisposableEmail = append(c.inters.DisposableEmail, interceptors...)
}

// Create returns a builder for creating a DisposableEmail entity.
func (c *DisposableEmailClient) Create() *DisposableEmailCreate {
	mutation := newDisposableEmailMutation(c.config, OpCreate)
	return &DisposableEmailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DisposableEmail entities.
func (c *DisposableEmailClient) CreateBulk(builders ...*DisposableEmailCreate) *DisposableEmailCreateBulk {
	return &DisposableEmailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DisposableEmail.
func (c *DisposableEmailClient) Update() *DisposableEmailUpdate {
	mutation := newDisposableEmailMutation(c.config, OpUpdate)
	return &DisposableEmailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DisposableEmailClient) UpdateOne(de *DisposableEmail) *DisposableEmailUpdateOne {
	mutation := newDisposableEmailMutation(c.config, OpUpdateOne, withDisposableEmail(de))
	return &DisposableEmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DisposableEmailClient) UpdateOneID(id uuid.UUID) *DisposableEmailUpdateOne {
	mutation := newDisposableEmailMutation(c.config, OpUpdateOne, withDisposableEmailID(id))
	return &DisposableEmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DisposableEmail.
func (c *DisposableEmailClient) Delete() *DisposableEmailDelete {
	mutation := newDisposableEmailMutation(c.config, OpDelete)
	return &DisposableEmailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DisposableEmailClient) DeleteOne(de *DisposableEmail) *DisposableEmailDeleteOne {
	return c.DeleteOneID(de.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DisposableEmailClient) DeleteOneID(id uuid.UUID) *DisposableEmailDeleteOne {
	builder := c.Delete().Where(disposableemail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DisposableEmailDeleteOne{builder}
}

// Query returns a query builder for DisposableEmail.
func (c *DisposableEmailClient) Query() *DisposableEmailQuery {
	return &DisposableEmailQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDisposableEmail},
		inters: c.Interceptors(),
	}
}

// Get returns a DisposableEmail entity by its id.
func (c *DisposableEmailClient) Get(ctx context.Context, id uuid.UUID) (*DisposableEmail, error) {
	return c.Query().Where(disposableemail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DisposableEmailClient) GetX(ctx context.Context, id uuid.UUID) *DisposableEmail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DisposableEmailClient) Hooks() []Hook {
	return c.hooks.DisposableEmail
}

// Interceptors returns the client interceptors.
func (c *DisposableEmailClient) Interceptors() []Interceptor {
	return c.inters.DisposableEmail
}

func (c *DisposableEmailClient) mutate(ctx context.Context, m *DisposableEmailMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DisposableEmailCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DisposableEmailUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DisposableEmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DisposableEmailDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DisposableEmail mutation op: %q", m.Op())
	}
}

// GenerationClient is a client for the Generation schema.
type GenerationClient struct {
	config
}

// NewGenerationClient returns a client for the Generation from the given config.
func NewGenerationClient(c config) *GenerationClient {
	return &GenerationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `generation.Hooks(f(g(h())))`.
func (c *GenerationClient) Use(hooks ...Hook) {
	c.hooks.Generation = append(c.hooks.Generation, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `generation.Intercept(f(g(h())))`.
func (c *GenerationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Generation = append(c.inters.Generation, interceptors...)
}

// Create returns a builder for creating a Generation entity.
func (c *GenerationClient) Create() *GenerationCreate {
	mutation := newGenerationMutation(c.config, OpCreate)
	return &GenerationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Generation entities.
func (c *GenerationClient) CreateBulk(builders ...*GenerationCreate) *GenerationCreateBulk {
	return &GenerationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Generation.
func (c *GenerationClient) Update() *GenerationUpdate {
	mutation := newGenerationMutation(c.config, OpUpdate)
	return &GenerationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GenerationClient) UpdateOne(ge *Generation) *GenerationUpdateOne {
	mutation := newGenerationMutation(c.config, OpUpdateOne, withGeneration(ge))
	return &GenerationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GenerationClient) UpdateOneID(id uuid.UUID) *GenerationUpdateOne {
	mutation := newGenerationMutation(c.config, OpUpdateOne, withGenerationID(id))
	return &GenerationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Generation.
func (c *GenerationClient) Delete() *GenerationDelete {
	mutation := newGenerationMutation(c.config, OpDelete)
	return &GenerationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GenerationClient) DeleteOne(ge *Generation) *GenerationDeleteOne {
	return c.DeleteOneID(ge.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GenerationClient) DeleteOneID(id uuid.UUID) *GenerationDeleteOne {
	builder := c.Delete().Where(generation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GenerationDeleteOne{builder}
}

// Query returns a query builder for Generation.
func (c *GenerationClient) Query() *GenerationQuery {
	return &GenerationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGeneration},
		inters: c.Interceptors(),
	}
}

// Get returns a Generation entity by its id.
func (c *GenerationClient) Get(ctx context.Context, id uuid.UUID) (*Generation, error) {
	return c.Query().Where(generation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GenerationClient) GetX(ctx context.Context, id uuid.UUID) *Generation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDeviceInfo queries the device_info edge of a Generation.
func (c *GenerationClient) QueryDeviceInfo(ge *Generation) *DeviceInfoQuery {
	query := (&DeviceInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ge.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generation.Table, generation.FieldID, id),
			sqlgraph.To(deviceinfo.Table, deviceinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, generation.DeviceInfoTable, generation.DeviceInfoColumn),
		)
		fromV = sqlgraph.Neighbors(ge.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScheduler queries the scheduler edge of a Generation.
func (c *GenerationClient) QueryScheduler(ge *Generation) *SchedulerQuery {
	query := (&SchedulerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ge.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generation.Table, generation.FieldID, id),
			sqlgraph.To(scheduler.Table, scheduler.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, generation.SchedulerTable, generation.SchedulerColumn),
		)
		fromV = sqlgraph.Neighbors(ge.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrompt queries the prompt edge of a Generation.
func (c *GenerationClient) QueryPrompt(ge *Generation) *PromptQuery {
	query := (&PromptClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ge.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generation.Table, generation.FieldID, id),
			sqlgraph.To(prompt.Table, prompt.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, generation.PromptTable, generation.PromptColumn),
		)
		fromV = sqlgraph.Neighbors(ge.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNegativePrompt queries the negative_prompt edge of a Generation.
func (c *GenerationClient) QueryNegativePrompt(ge *Generation) *NegativePromptQuery {
	query := (&NegativePromptClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ge.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generation.Table, generation.FieldID, id),
			sqlgraph.To(negativeprompt.Table, negativeprompt.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, generation.NegativePromptTable, generation.NegativePromptColumn),
		)
		fromV = sqlgraph.Neighbors(ge.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGenerationModel queries the generation_model edge of a Generation.
func (c *GenerationClient) QueryGenerationModel(ge *Generation) *GenerationModelQuery {
	query := (&GenerationModelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ge.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generation.Table, generation.FieldID, id),
			sqlgraph.To(generationmodel.Table, generationmodel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, generation.GenerationModelTable, generation.GenerationModelColumn),
		)
		fromV = sqlgraph.Neighbors(ge.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Generation.
func (c *GenerationClient) QueryUser(ge *Generation) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ge.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generation.Table, generation.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, generation.UserTable, generation.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ge.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAPITokens queries the api_tokens edge of a Generation.
func (c *GenerationClient) QueryAPITokens(ge *Generation) *ApiTokenQuery {
	query := (&ApiTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ge.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generation.Table, generation.FieldID, id),
			sqlgraph.To(apitoken.Table, apitoken.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, generation.APITokensTable, generation.APITokensColumn),
		)
		fromV = sqlgraph.Neighbors(ge.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGenerationOutputs queries the generation_outputs edge of a Generation.
func (c *GenerationClient) QueryGenerationOutputs(ge *Generation) *GenerationOutputQuery {
	query := (&GenerationOutputClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ge.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generation.Table, generation.FieldID, id),
			sqlgraph.To(generationoutput.Table, generationoutput.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, generation.GenerationOutputsTable, generation.GenerationOutputsColumn),
		)
		fromV = sqlgraph.Neighbors(ge.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GenerationClient) Hooks() []Hook {
	return c.hooks.Generation
}

// Interceptors returns the client interceptors.
func (c *GenerationClient) Interceptors() []Interceptor {
	return c.inters.Generation
}

func (c *GenerationClient) mutate(ctx context.Context, m *GenerationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GenerationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GenerationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GenerationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GenerationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Generation mutation op: %q", m.Op())
	}
}

// GenerationModelClient is a client for the GenerationModel schema.
type GenerationModelClient struct {
	config
}

// NewGenerationModelClient returns a client for the GenerationModel from the given config.
func NewGenerationModelClient(c config) *GenerationModelClient {
	return &GenerationModelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `generationmodel.Hooks(f(g(h())))`.
func (c *GenerationModelClient) Use(hooks ...Hook) {
	c.hooks.GenerationModel = append(c.hooks.GenerationModel, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `generationmodel.Intercept(f(g(h())))`.
func (c *GenerationModelClient) Intercept(interceptors ...Interceptor) {
	c.inters.GenerationModel = append(c.inters.GenerationModel, interceptors...)
}

// Create returns a builder for creating a GenerationModel entity.
func (c *GenerationModelClient) Create() *GenerationModelCreate {
	mutation := newGenerationModelMutation(c.config, OpCreate)
	return &GenerationModelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GenerationModel entities.
func (c *GenerationModelClient) CreateBulk(builders ...*GenerationModelCreate) *GenerationModelCreateBulk {
	return &GenerationModelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GenerationModel.
func (c *GenerationModelClient) Update() *GenerationModelUpdate {
	mutation := newGenerationModelMutation(c.config, OpUpdate)
	return &GenerationModelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GenerationModelClient) UpdateOne(gm *GenerationModel) *GenerationModelUpdateOne {
	mutation := newGenerationModelMutation(c.config, OpUpdateOne, withGenerationModel(gm))
	return &GenerationModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GenerationModelClient) UpdateOneID(id uuid.UUID) *GenerationModelUpdateOne {
	mutation := newGenerationModelMutation(c.config, OpUpdateOne, withGenerationModelID(id))
	return &GenerationModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GenerationModel.
func (c *GenerationModelClient) Delete() *GenerationModelDelete {
	mutation := newGenerationModelMutation(c.config, OpDelete)
	return &GenerationModelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GenerationModelClient) DeleteOne(gm *GenerationModel) *GenerationModelDeleteOne {
	return c.DeleteOneID(gm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GenerationModelClient) DeleteOneID(id uuid.UUID) *GenerationModelDeleteOne {
	builder := c.Delete().Where(generationmodel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GenerationModelDeleteOne{builder}
}

// Query returns a query builder for GenerationModel.
func (c *GenerationModelClient) Query() *GenerationModelQuery {
	return &GenerationModelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGenerationModel},
		inters: c.Interceptors(),
	}
}

// Get returns a GenerationModel entity by its id.
func (c *GenerationModelClient) Get(ctx context.Context, id uuid.UUID) (*GenerationModel, error) {
	return c.Query().Where(generationmodel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GenerationModelClient) GetX(ctx context.Context, id uuid.UUID) *GenerationModel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGenerations queries the generations edge of a GenerationModel.
func (c *GenerationModelClient) QueryGenerations(gm *GenerationModel) *GenerationQuery {
	query := (&GenerationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generationmodel.Table, generationmodel.FieldID, id),
			sqlgraph.To(generation.Table, generation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, generationmodel.GenerationsTable, generationmodel.GenerationsColumn),
		)
		fromV = sqlgraph.Neighbors(gm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySchedulers queries the schedulers edge of a GenerationModel.
func (c *GenerationModelClient) QuerySchedulers(gm *GenerationModel) *SchedulerQuery {
	query := (&SchedulerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generationmodel.Table, generationmodel.FieldID, id),
			sqlgraph.To(scheduler.Table, scheduler.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, generationmodel.SchedulersTable, generationmodel.SchedulersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(gm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GenerationModelClient) Hooks() []Hook {
	return c.hooks.GenerationModel
}

// Interceptors returns the client interceptors.
func (c *GenerationModelClient) Interceptors() []Interceptor {
	return c.inters.GenerationModel
}

func (c *GenerationModelClient) mutate(ctx context.Context, m *GenerationModelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GenerationModelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GenerationModelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GenerationModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GenerationModelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GenerationModel mutation op: %q", m.Op())
	}
}

// GenerationOutputClient is a client for the GenerationOutput schema.
type GenerationOutputClient struct {
	config
}

// NewGenerationOutputClient returns a client for the GenerationOutput from the given config.
func NewGenerationOutputClient(c config) *GenerationOutputClient {
	return &GenerationOutputClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `generationoutput.Hooks(f(g(h())))`.
func (c *GenerationOutputClient) Use(hooks ...Hook) {
	c.hooks.GenerationOutput = append(c.hooks.GenerationOutput, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `generationoutput.Intercept(f(g(h())))`.
func (c *GenerationOutputClient) Intercept(interceptors ...Interceptor) {
	c.inters.GenerationOutput = append(c.inters.GenerationOutput, interceptors...)
}

// Create returns a builder for creating a GenerationOutput entity.
func (c *GenerationOutputClient) Create() *GenerationOutputCreate {
	mutation := newGenerationOutputMutation(c.config, OpCreate)
	return &GenerationOutputCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GenerationOutput entities.
func (c *GenerationOutputClient) CreateBulk(builders ...*GenerationOutputCreate) *GenerationOutputCreateBulk {
	return &GenerationOutputCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GenerationOutput.
func (c *GenerationOutputClient) Update() *GenerationOutputUpdate {
	mutation := newGenerationOutputMutation(c.config, OpUpdate)
	return &GenerationOutputUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GenerationOutputClient) UpdateOne(_go *GenerationOutput) *GenerationOutputUpdateOne {
	mutation := newGenerationOutputMutation(c.config, OpUpdateOne, withGenerationOutput(_go))
	return &GenerationOutputUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GenerationOutputClient) UpdateOneID(id uuid.UUID) *GenerationOutputUpdateOne {
	mutation := newGenerationOutputMutation(c.config, OpUpdateOne, withGenerationOutputID(id))
	return &GenerationOutputUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GenerationOutput.
func (c *GenerationOutputClient) Delete() *GenerationOutputDelete {
	mutation := newGenerationOutputMutation(c.config, OpDelete)
	return &GenerationOutputDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GenerationOutputClient) DeleteOne(_go *GenerationOutput) *GenerationOutputDeleteOne {
	return c.DeleteOneID(_go.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GenerationOutputClient) DeleteOneID(id uuid.UUID) *GenerationOutputDeleteOne {
	builder := c.Delete().Where(generationoutput.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GenerationOutputDeleteOne{builder}
}

// Query returns a query builder for GenerationOutput.
func (c *GenerationOutputClient) Query() *GenerationOutputQuery {
	return &GenerationOutputQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGenerationOutput},
		inters: c.Interceptors(),
	}
}

// Get returns a GenerationOutput entity by its id.
func (c *GenerationOutputClient) Get(ctx context.Context, id uuid.UUID) (*GenerationOutput, error) {
	return c.Query().Where(generationoutput.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GenerationOutputClient) GetX(ctx context.Context, id uuid.UUID) *GenerationOutput {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGenerations queries the generations edge of a GenerationOutput.
func (c *GenerationOutputClient) QueryGenerations(_go *GenerationOutput) *GenerationQuery {
	query := (&GenerationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _go.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generationoutput.Table, generationoutput.FieldID, id),
			sqlgraph.To(generation.Table, generation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, generationoutput.GenerationsTable, generationoutput.GenerationsColumn),
		)
		fromV = sqlgraph.Neighbors(_go.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpscaleOutputs queries the upscale_outputs edge of a GenerationOutput.
func (c *GenerationOutputClient) QueryUpscaleOutputs(_go *GenerationOutput) *UpscaleOutputQuery {
	query := (&UpscaleOutputClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _go.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generationoutput.Table, generationoutput.FieldID, id),
			sqlgraph.To(upscaleoutput.Table, upscaleoutput.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, generationoutput.UpscaleOutputsTable, generationoutput.UpscaleOutputsColumn),
		)
		fromV = sqlgraph.Neighbors(_go.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGenerationOutputLikes queries the generation_output_likes edge of a GenerationOutput.
func (c *GenerationOutputClient) QueryGenerationOutputLikes(_go *GenerationOutput) *GenerationOutputLikeQuery {
	query := (&GenerationOutputLikeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _go.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generationoutput.Table, generationoutput.FieldID, id),
			sqlgraph.To(generationoutputlike.Table, generationoutputlike.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, generationoutput.GenerationOutputLikesTable, generationoutput.GenerationOutputLikesColumn),
		)
		fromV = sqlgraph.Neighbors(_go.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GenerationOutputClient) Hooks() []Hook {
	return c.hooks.GenerationOutput
}

// Interceptors returns the client interceptors.
func (c *GenerationOutputClient) Interceptors() []Interceptor {
	return c.inters.GenerationOutput
}

func (c *GenerationOutputClient) mutate(ctx context.Context, m *GenerationOutputMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GenerationOutputCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GenerationOutputUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GenerationOutputUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GenerationOutputDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GenerationOutput mutation op: %q", m.Op())
	}
}

// GenerationOutputLikeClient is a client for the GenerationOutputLike schema.
type GenerationOutputLikeClient struct {
	config
}

// NewGenerationOutputLikeClient returns a client for the GenerationOutputLike from the given config.
func NewGenerationOutputLikeClient(c config) *GenerationOutputLikeClient {
	return &GenerationOutputLikeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `generationoutputlike.Hooks(f(g(h())))`.
func (c *GenerationOutputLikeClient) Use(hooks ...Hook) {
	c.hooks.GenerationOutputLike = append(c.hooks.GenerationOutputLike, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `generationoutputlike.Intercept(f(g(h())))`.
func (c *GenerationOutputLikeClient) Intercept(interceptors ...Interceptor) {
	c.inters.GenerationOutputLike = append(c.inters.GenerationOutputLike, interceptors...)
}

// Create returns a builder for creating a GenerationOutputLike entity.
func (c *GenerationOutputLikeClient) Create() *GenerationOutputLikeCreate {
	mutation := newGenerationOutputLikeMutation(c.config, OpCreate)
	return &GenerationOutputLikeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GenerationOutputLike entities.
func (c *GenerationOutputLikeClient) CreateBulk(builders ...*GenerationOutputLikeCreate) *GenerationOutputLikeCreateBulk {
	return &GenerationOutputLikeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GenerationOutputLike.
func (c *GenerationOutputLikeClient) Update() *GenerationOutputLikeUpdate {
	mutation := newGenerationOutputLikeMutation(c.config, OpUpdate)
	return &GenerationOutputLikeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GenerationOutputLikeClient) UpdateOne(gol *GenerationOutputLike) *GenerationOutputLikeUpdateOne {
	mutation := newGenerationOutputLikeMutation(c.config, OpUpdateOne, withGenerationOutputLike(gol))
	return &GenerationOutputLikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GenerationOutputLikeClient) UpdateOneID(id uuid.UUID) *GenerationOutputLikeUpdateOne {
	mutation := newGenerationOutputLikeMutation(c.config, OpUpdateOne, withGenerationOutputLikeID(id))
	return &GenerationOutputLikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GenerationOutputLike.
func (c *GenerationOutputLikeClient) Delete() *GenerationOutputLikeDelete {
	mutation := newGenerationOutputLikeMutation(c.config, OpDelete)
	return &GenerationOutputLikeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GenerationOutputLikeClient) DeleteOne(gol *GenerationOutputLike) *GenerationOutputLikeDeleteOne {
	return c.DeleteOneID(gol.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GenerationOutputLikeClient) DeleteOneID(id uuid.UUID) *GenerationOutputLikeDeleteOne {
	builder := c.Delete().Where(generationoutputlike.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GenerationOutputLikeDeleteOne{builder}
}

// Query returns a query builder for GenerationOutputLike.
func (c *GenerationOutputLikeClient) Query() *GenerationOutputLikeQuery {
	return &GenerationOutputLikeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGenerationOutputLike},
		inters: c.Interceptors(),
	}
}

// Get returns a GenerationOutputLike entity by its id.
func (c *GenerationOutputLikeClient) Get(ctx context.Context, id uuid.UUID) (*GenerationOutputLike, error) {
	return c.Query().Where(generationoutputlike.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GenerationOutputLikeClient) GetX(ctx context.Context, id uuid.UUID) *GenerationOutputLike {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGenerationOutputs queries the generation_outputs edge of a GenerationOutputLike.
func (c *GenerationOutputLikeClient) QueryGenerationOutputs(gol *GenerationOutputLike) *GenerationOutputQuery {
	query := (&GenerationOutputClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gol.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generationoutputlike.Table, generationoutputlike.FieldID, id),
			sqlgraph.To(generationoutput.Table, generationoutput.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, generationoutputlike.GenerationOutputsTable, generationoutputlike.GenerationOutputsColumn),
		)
		fromV = sqlgraph.Neighbors(gol.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsers queries the users edge of a GenerationOutputLike.
func (c *GenerationOutputLikeClient) QueryUsers(gol *GenerationOutputLike) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gol.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(generationoutputlike.Table, generationoutputlike.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, generationoutputlike.UsersTable, generationoutputlike.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(gol.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GenerationOutputLikeClient) Hooks() []Hook {
	return c.hooks.GenerationOutputLike
}

// Interceptors returns the client interceptors.
func (c *GenerationOutputLikeClient) Interceptors() []Interceptor {
	return c.inters.GenerationOutputLike
}

func (c *GenerationOutputLikeClient) mutate(ctx context.Context, m *GenerationOutputLikeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GenerationOutputLikeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GenerationOutputLikeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GenerationOutputLikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GenerationOutputLikeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GenerationOutputLike mutation op: %q", m.Op())
	}
}

// IPBlackListClient is a client for the IPBlackList schema.
type IPBlackListClient struct {
	config
}

// NewIPBlackListClient returns a client for the IPBlackList from the given config.
func NewIPBlackListClient(c config) *IPBlackListClient {
	return &IPBlackListClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ipblacklist.Hooks(f(g(h())))`.
func (c *IPBlackListClient) Use(hooks ...Hook) {
	c.hooks.IPBlackList = append(c.hooks.IPBlackList, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ipblacklist.Intercept(f(g(h())))`.
func (c *IPBlackListClient) Intercept(interceptors ...Interceptor) {
	c.inters.IPBlackList = append(c.inters.IPBlackList, interceptors...)
}

// Create returns a builder for creating a IPBlackList entity.
func (c *IPBlackListClient) Create() *IPBlackListCreate {
	mutation := newIPBlackListMutation(c.config, OpCreate)
	return &IPBlackListCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of IPBlackList entities.
func (c *IPBlackListClient) CreateBulk(builders ...*IPBlackListCreate) *IPBlackListCreateBulk {
	return &IPBlackListCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for IPBlackList.
func (c *IPBlackListClient) Update() *IPBlackListUpdate {
	mutation := newIPBlackListMutation(c.config, OpUpdate)
	return &IPBlackListUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IPBlackListClient) UpdateOne(ibl *IPBlackList) *IPBlackListUpdateOne {
	mutation := newIPBlackListMutation(c.config, OpUpdateOne, withIPBlackList(ibl))
	return &IPBlackListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IPBlackListClient) UpdateOneID(id uuid.UUID) *IPBlackListUpdateOne {
	mutation := newIPBlackListMutation(c.config, OpUpdateOne, withIPBlackListID(id))
	return &IPBlackListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for IPBlackList.
func (c *IPBlackListClient) Delete() *IPBlackListDelete {
	mutation := newIPBlackListMutation(c.config, OpDelete)
	return &IPBlackListDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IPBlackListClient) DeleteOne(ibl *IPBlackList) *IPBlackListDeleteOne {
	return c.DeleteOneID(ibl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IPBlackListClient) DeleteOneID(id uuid.UUID) *IPBlackListDeleteOne {
	builder := c.Delete().Where(ipblacklist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IPBlackListDeleteOne{builder}
}

// Query returns a query builder for IPBlackList.
func (c *IPBlackListClient) Query() *IPBlackListQuery {
	return &IPBlackListQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIPBlackList},
		inters: c.Interceptors(),
	}
}

// Get returns a IPBlackList entity by its id.
func (c *IPBlackListClient) Get(ctx context.Context, id uuid.UUID) (*IPBlackList, error) {
	return c.Query().Where(ipblacklist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IPBlackListClient) GetX(ctx context.Context, id uuid.UUID) *IPBlackList {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *IPBlackListClient) Hooks() []Hook {
	return c.hooks.IPBlackList
}

// Interceptors returns the client interceptors.
func (c *IPBlackListClient) Interceptors() []Interceptor {
	return c.inters.IPBlackList
}

func (c *IPBlackListClient) mutate(ctx context.Context, m *IPBlackListMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IPBlackListCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IPBlackListUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IPBlackListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IPBlackListDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown IPBlackList mutation op: %q", m.Op())
	}
}

// MqLogClient is a client for the MqLog schema.
type MqLogClient struct {
	config
}

// NewMqLogClient returns a client for the MqLog from the given config.
func NewMqLogClient(c config) *MqLogClient {
	return &MqLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mqlog.Hooks(f(g(h())))`.
func (c *MqLogClient) Use(hooks ...Hook) {
	c.hooks.MqLog = append(c.hooks.MqLog, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `mqlog.Intercept(f(g(h())))`.
func (c *MqLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.MqLog = append(c.inters.MqLog, interceptors...)
}

// Create returns a builder for creating a MqLog entity.
func (c *MqLogClient) Create() *MqLogCreate {
	mutation := newMqLogMutation(c.config, OpCreate)
	return &MqLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MqLog entities.
func (c *MqLogClient) CreateBulk(builders ...*MqLogCreate) *MqLogCreateBulk {
	return &MqLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MqLog.
func (c *MqLogClient) Update() *MqLogUpdate {
	mutation := newMqLogMutation(c.config, OpUpdate)
	return &MqLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MqLogClient) UpdateOne(ml *MqLog) *MqLogUpdateOne {
	mutation := newMqLogMutation(c.config, OpUpdateOne, withMqLog(ml))
	return &MqLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MqLogClient) UpdateOneID(id uuid.UUID) *MqLogUpdateOne {
	mutation := newMqLogMutation(c.config, OpUpdateOne, withMqLogID(id))
	return &MqLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MqLog.
func (c *MqLogClient) Delete() *MqLogDelete {
	mutation := newMqLogMutation(c.config, OpDelete)
	return &MqLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MqLogClient) DeleteOne(ml *MqLog) *MqLogDeleteOne {
	return c.DeleteOneID(ml.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MqLogClient) DeleteOneID(id uuid.UUID) *MqLogDeleteOne {
	builder := c.Delete().Where(mqlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MqLogDeleteOne{builder}
}

// Query returns a query builder for MqLog.
func (c *MqLogClient) Query() *MqLogQuery {
	return &MqLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMqLog},
		inters: c.Interceptors(),
	}
}

// Get returns a MqLog entity by its id.
func (c *MqLogClient) Get(ctx context.Context, id uuid.UUID) (*MqLog, error) {
	return c.Query().Where(mqlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MqLogClient) GetX(ctx context.Context, id uuid.UUID) *MqLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MqLogClient) Hooks() []Hook {
	return c.hooks.MqLog
}

// Interceptors returns the client interceptors.
func (c *MqLogClient) Interceptors() []Interceptor {
	return c.inters.MqLog
}

func (c *MqLogClient) mutate(ctx context.Context, m *MqLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MqLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MqLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MqLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MqLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MqLog mutation op: %q", m.Op())
	}
}

// NegativePromptClient is a client for the NegativePrompt schema.
type NegativePromptClient struct {
	config
}

// NewNegativePromptClient returns a client for the NegativePrompt from the given config.
func NewNegativePromptClient(c config) *NegativePromptClient {
	return &NegativePromptClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `negativeprompt.Hooks(f(g(h())))`.
func (c *NegativePromptClient) Use(hooks ...Hook) {
	c.hooks.NegativePrompt = append(c.hooks.NegativePrompt, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `negativeprompt.Intercept(f(g(h())))`.
func (c *NegativePromptClient) Intercept(interceptors ...Interceptor) {
	c.inters.NegativePrompt = append(c.inters.NegativePrompt, interceptors...)
}

// Create returns a builder for creating a NegativePrompt entity.
func (c *NegativePromptClient) Create() *NegativePromptCreate {
	mutation := newNegativePromptMutation(c.config, OpCreate)
	return &NegativePromptCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NegativePrompt entities.
func (c *NegativePromptClient) CreateBulk(builders ...*NegativePromptCreate) *NegativePromptCreateBulk {
	return &NegativePromptCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NegativePrompt.
func (c *NegativePromptClient) Update() *NegativePromptUpdate {
	mutation := newNegativePromptMutation(c.config, OpUpdate)
	return &NegativePromptUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NegativePromptClient) UpdateOne(np *NegativePrompt) *NegativePromptUpdateOne {
	mutation := newNegativePromptMutation(c.config, OpUpdateOne, withNegativePrompt(np))
	return &NegativePromptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NegativePromptClient) UpdateOneID(id uuid.UUID) *NegativePromptUpdateOne {
	mutation := newNegativePromptMutation(c.config, OpUpdateOne, withNegativePromptID(id))
	return &NegativePromptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NegativePrompt.
func (c *NegativePromptClient) Delete() *NegativePromptDelete {
	mutation := newNegativePromptMutation(c.config, OpDelete)
	return &NegativePromptDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NegativePromptClient) DeleteOne(np *NegativePrompt) *NegativePromptDeleteOne {
	return c.DeleteOneID(np.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NegativePromptClient) DeleteOneID(id uuid.UUID) *NegativePromptDeleteOne {
	builder := c.Delete().Where(negativeprompt.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NegativePromptDeleteOne{builder}
}

// Query returns a query builder for NegativePrompt.
func (c *NegativePromptClient) Query() *NegativePromptQuery {
	return &NegativePromptQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNegativePrompt},
		inters: c.Interceptors(),
	}
}

// Get returns a NegativePrompt entity by its id.
func (c *NegativePromptClient) Get(ctx context.Context, id uuid.UUID) (*NegativePrompt, error) {
	return c.Query().Where(negativeprompt.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NegativePromptClient) GetX(ctx context.Context, id uuid.UUID) *NegativePrompt {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGenerations queries the generations edge of a NegativePrompt.
func (c *NegativePromptClient) QueryGenerations(np *NegativePrompt) *GenerationQuery {
	query := (&GenerationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := np.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(negativeprompt.Table, negativeprompt.FieldID, id),
			sqlgraph.To(generation.Table, generation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, negativeprompt.GenerationsTable, negativeprompt.GenerationsColumn),
		)
		fromV = sqlgraph.Neighbors(np.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NegativePromptClient) Hooks() []Hook {
	return c.hooks.NegativePrompt
}

// Interceptors returns the client interceptors.
func (c *NegativePromptClient) Interceptors() []Interceptor {
	return c.inters.NegativePrompt
}

func (c *NegativePromptClient) mutate(ctx context.Context, m *NegativePromptMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NegativePromptCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NegativePromptUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NegativePromptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NegativePromptDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NegativePrompt mutation op: %q", m.Op())
	}
}

// PromptClient is a client for the Prompt schema.
type PromptClient struct {
	config
}

// NewPromptClient returns a client for the Prompt from the given config.
func NewPromptClient(c config) *PromptClient {
	return &PromptClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `prompt.Hooks(f(g(h())))`.
func (c *PromptClient) Use(hooks ...Hook) {
	c.hooks.Prompt = append(c.hooks.Prompt, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `prompt.Intercept(f(g(h())))`.
func (c *PromptClient) Intercept(interceptors ...Interceptor) {
	c.inters.Prompt = append(c.inters.Prompt, interceptors...)
}

// Create returns a builder for creating a Prompt entity.
func (c *PromptClient) Create() *PromptCreate {
	mutation := newPromptMutation(c.config, OpCreate)
	return &PromptCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Prompt entities.
func (c *PromptClient) CreateBulk(builders ...*PromptCreate) *PromptCreateBulk {
	return &PromptCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Prompt.
func (c *PromptClient) Update() *PromptUpdate {
	mutation := newPromptMutation(c.config, OpUpdate)
	return &PromptUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromptClient) UpdateOne(pr *Prompt) *PromptUpdateOne {
	mutation := newPromptMutation(c.config, OpUpdateOne, withPrompt(pr))
	return &PromptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromptClient) UpdateOneID(id uuid.UUID) *PromptUpdateOne {
	mutation := newPromptMutation(c.config, OpUpdateOne, withPromptID(id))
	return &PromptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Prompt.
func (c *PromptClient) Delete() *PromptDelete {
	mutation := newPromptMutation(c.config, OpDelete)
	return &PromptDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PromptClient) DeleteOne(pr *Prompt) *PromptDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PromptClient) DeleteOneID(id uuid.UUID) *PromptDeleteOne {
	builder := c.Delete().Where(prompt.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromptDeleteOne{builder}
}

// Query returns a query builder for Prompt.
func (c *PromptClient) Query() *PromptQuery {
	return &PromptQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePrompt},
		inters: c.Interceptors(),
	}
}

// Get returns a Prompt entity by its id.
func (c *PromptClient) Get(ctx context.Context, id uuid.UUID) (*Prompt, error) {
	return c.Query().Where(prompt.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromptClient) GetX(ctx context.Context, id uuid.UUID) *Prompt {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGenerations queries the generations edge of a Prompt.
func (c *PromptClient) QueryGenerations(pr *Prompt) *GenerationQuery {
	query := (&GenerationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prompt.Table, prompt.FieldID, id),
			sqlgraph.To(generation.Table, generation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, prompt.GenerationsTable, prompt.GenerationsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVoiceovers queries the voiceovers edge of a Prompt.
func (c *PromptClient) QueryVoiceovers(pr *Prompt) *VoiceoverQuery {
	query := (&VoiceoverClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prompt.Table, prompt.FieldID, id),
			sqlgraph.To(voiceover.Table, voiceover.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, prompt.VoiceoversTable, prompt.VoiceoversColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PromptClient) Hooks() []Hook {
	return c.hooks.Prompt
}

// Interceptors returns the client interceptors.
func (c *PromptClient) Interceptors() []Interceptor {
	return c.inters.Prompt
}

func (c *PromptClient) mutate(ctx context.Context, m *PromptMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PromptCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PromptUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PromptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PromptDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Prompt mutation op: %q", m.Op())
	}
}

// RoleClient is a client for the Role schema.
type RoleClient struct {
	config
}

// NewRoleClient returns a client for the Role from the given config.
func NewRoleClient(c config) *RoleClient {
	return &RoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `role.Hooks(f(g(h())))`.
func (c *RoleClient) Use(hooks ...Hook) {
	c.hooks.Role = append(c.hooks.Role, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `role.Intercept(f(g(h())))`.
func (c *RoleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Role = append(c.inters.Role, interceptors...)
}

// Create returns a builder for creating a Role entity.
func (c *RoleClient) Create() *RoleCreate {
	mutation := newRoleMutation(c.config, OpCreate)
	return &RoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Role entities.
func (c *RoleClient) CreateBulk(builders ...*RoleCreate) *RoleCreateBulk {
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Role.
func (c *RoleClient) Update() *RoleUpdate {
	mutation := newRoleMutation(c.config, OpUpdate)
	return &RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleClient) UpdateOne(r *Role) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRole(r))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleClient) UpdateOneID(id uuid.UUID) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRoleID(id))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Role.
func (c *RoleClient) Delete() *RoleDelete {
	mutation := newRoleMutation(c.config, OpDelete)
	return &RoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoleClient) DeleteOne(r *Role) *RoleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoleClient) DeleteOneID(id uuid.UUID) *RoleDeleteOne {
	builder := c.Delete().Where(role.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleDeleteOne{builder}
}

// Query returns a query builder for Role.
func (c *RoleClient) Query() *RoleQuery {
	return &RoleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRole},
		inters: c.Interceptors(),
	}
}

// Get returns a Role entity by its id.
func (c *RoleClient) Get(ctx context.Context, id uuid.UUID) (*Role, error) {
	return c.Query().Where(role.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleClient) GetX(ctx context.Context, id uuid.UUID) *Role {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Role.
func (c *RoleClient) QueryUsers(r *Role) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, role.UsersTable, role.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleClient) Hooks() []Hook {
	return c.hooks.Role
}

// Interceptors returns the client interceptors.
func (c *RoleClient) Interceptors() []Interceptor {
	return c.inters.Role
}

func (c *RoleClient) mutate(ctx context.Context, m *RoleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Role mutation op: %q", m.Op())
	}
}

// SchedulerClient is a client for the Scheduler schema.
type SchedulerClient struct {
	config
}

// NewSchedulerClient returns a client for the Scheduler from the given config.
func NewSchedulerClient(c config) *SchedulerClient {
	return &SchedulerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `scheduler.Hooks(f(g(h())))`.
func (c *SchedulerClient) Use(hooks ...Hook) {
	c.hooks.Scheduler = append(c.hooks.Scheduler, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `scheduler.Intercept(f(g(h())))`.
func (c *SchedulerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Scheduler = append(c.inters.Scheduler, interceptors...)
}

// Create returns a builder for creating a Scheduler entity.
func (c *SchedulerClient) Create() *SchedulerCreate {
	mutation := newSchedulerMutation(c.config, OpCreate)
	return &SchedulerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Scheduler entities.
func (c *SchedulerClient) CreateBulk(builders ...*SchedulerCreate) *SchedulerCreateBulk {
	return &SchedulerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Scheduler.
func (c *SchedulerClient) Update() *SchedulerUpdate {
	mutation := newSchedulerMutation(c.config, OpUpdate)
	return &SchedulerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SchedulerClient) UpdateOne(s *Scheduler) *SchedulerUpdateOne {
	mutation := newSchedulerMutation(c.config, OpUpdateOne, withScheduler(s))
	return &SchedulerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SchedulerClient) UpdateOneID(id uuid.UUID) *SchedulerUpdateOne {
	mutation := newSchedulerMutation(c.config, OpUpdateOne, withSchedulerID(id))
	return &SchedulerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Scheduler.
func (c *SchedulerClient) Delete() *SchedulerDelete {
	mutation := newSchedulerMutation(c.config, OpDelete)
	return &SchedulerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SchedulerClient) DeleteOne(s *Scheduler) *SchedulerDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SchedulerClient) DeleteOneID(id uuid.UUID) *SchedulerDeleteOne {
	builder := c.Delete().Where(scheduler.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SchedulerDeleteOne{builder}
}

// Query returns a query builder for Scheduler.
func (c *SchedulerClient) Query() *SchedulerQuery {
	return &SchedulerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeScheduler},
		inters: c.Interceptors(),
	}
}

// Get returns a Scheduler entity by its id.
func (c *SchedulerClient) Get(ctx context.Context, id uuid.UUID) (*Scheduler, error) {
	return c.Query().Where(scheduler.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SchedulerClient) GetX(ctx context.Context, id uuid.UUID) *Scheduler {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGenerations queries the generations edge of a Scheduler.
func (c *SchedulerClient) QueryGenerations(s *Scheduler) *GenerationQuery {
	query := (&GenerationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(scheduler.Table, scheduler.FieldID, id),
			sqlgraph.To(generation.Table, generation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, scheduler.GenerationsTable, scheduler.GenerationsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGenerationModels queries the generation_models edge of a Scheduler.
func (c *SchedulerClient) QueryGenerationModels(s *Scheduler) *GenerationModelQuery {
	query := (&GenerationModelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(scheduler.Table, scheduler.FieldID, id),
			sqlgraph.To(generationmodel.Table, generationmodel.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, scheduler.GenerationModelsTable, scheduler.GenerationModelsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SchedulerClient) Hooks() []Hook {
	return c.hooks.Scheduler
}

// Interceptors returns the client interceptors.
func (c *SchedulerClient) Interceptors() []Interceptor {
	return c.inters.Scheduler
}

func (c *SchedulerClient) mutate(ctx context.Context, m *SchedulerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SchedulerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SchedulerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SchedulerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SchedulerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Scheduler mutation op: %q", m.Op())
	}
}

// ThumbmarkIdBlackListClient is a client for the ThumbmarkIdBlackList schema.
type ThumbmarkIdBlackListClient struct {
	config
}

// NewThumbmarkIdBlackListClient returns a client for the ThumbmarkIdBlackList from the given config.
func NewThumbmarkIdBlackListClient(c config) *ThumbmarkIdBlackListClient {
	return &ThumbmarkIdBlackListClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `thumbmarkidblacklist.Hooks(f(g(h())))`.
func (c *ThumbmarkIdBlackListClient) Use(hooks ...Hook) {
	c.hooks.ThumbmarkIdBlackList = append(c.hooks.ThumbmarkIdBlackList, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `thumbmarkidblacklist.Intercept(f(g(h())))`.
func (c *ThumbmarkIdBlackListClient) Intercept(interceptors ...Interceptor) {
	c.inters.ThumbmarkIdBlackList = append(c.inters.ThumbmarkIdBlackList, interceptors...)
}

// Create returns a builder for creating a ThumbmarkIdBlackList entity.
func (c *ThumbmarkIdBlackListClient) Create() *ThumbmarkIdBlackListCreate {
	mutation := newThumbmarkIdBlackListMutation(c.config, OpCreate)
	return &ThumbmarkIdBlackListCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ThumbmarkIdBlackList entities.
func (c *ThumbmarkIdBlackListClient) CreateBulk(builders ...*ThumbmarkIdBlackListCreate) *ThumbmarkIdBlackListCreateBulk {
	return &ThumbmarkIdBlackListCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ThumbmarkIdBlackList.
func (c *ThumbmarkIdBlackListClient) Update() *ThumbmarkIdBlackListUpdate {
	mutation := newThumbmarkIdBlackListMutation(c.config, OpUpdate)
	return &ThumbmarkIdBlackListUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ThumbmarkIdBlackListClient) UpdateOne(tibl *ThumbmarkIdBlackList) *ThumbmarkIdBlackListUpdateOne {
	mutation := newThumbmarkIdBlackListMutation(c.config, OpUpdateOne, withThumbmarkIdBlackList(tibl))
	return &ThumbmarkIdBlackListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ThumbmarkIdBlackListClient) UpdateOneID(id uuid.UUID) *ThumbmarkIdBlackListUpdateOne {
	mutation := newThumbmarkIdBlackListMutation(c.config, OpUpdateOne, withThumbmarkIdBlackListID(id))
	return &ThumbmarkIdBlackListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ThumbmarkIdBlackList.
func (c *ThumbmarkIdBlackListClient) Delete() *ThumbmarkIdBlackListDelete {
	mutation := newThumbmarkIdBlackListMutation(c.config, OpDelete)
	return &ThumbmarkIdBlackListDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ThumbmarkIdBlackListClient) DeleteOne(tibl *ThumbmarkIdBlackList) *ThumbmarkIdBlackListDeleteOne {
	return c.DeleteOneID(tibl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ThumbmarkIdBlackListClient) DeleteOneID(id uuid.UUID) *ThumbmarkIdBlackListDeleteOne {
	builder := c.Delete().Where(thumbmarkidblacklist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ThumbmarkIdBlackListDeleteOne{builder}
}

// Query returns a query builder for ThumbmarkIdBlackList.
func (c *ThumbmarkIdBlackListClient) Query() *ThumbmarkIdBlackListQuery {
	return &ThumbmarkIdBlackListQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeThumbmarkIdBlackList},
		inters: c.Interceptors(),
	}
}

// Get returns a ThumbmarkIdBlackList entity by its id.
func (c *ThumbmarkIdBlackListClient) Get(ctx context.Context, id uuid.UUID) (*ThumbmarkIdBlackList, error) {
	return c.Query().Where(thumbmarkidblacklist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ThumbmarkIdBlackListClient) GetX(ctx context.Context, id uuid.UUID) *ThumbmarkIdBlackList {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ThumbmarkIdBlackListClient) Hooks() []Hook {
	return c.hooks.ThumbmarkIdBlackList
}

// Interceptors returns the client interceptors.
func (c *ThumbmarkIdBlackListClient) Interceptors() []Interceptor {
	return c.inters.ThumbmarkIdBlackList
}

func (c *ThumbmarkIdBlackListClient) mutate(ctx context.Context, m *ThumbmarkIdBlackListMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ThumbmarkIdBlackListCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ThumbmarkIdBlackListUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ThumbmarkIdBlackListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ThumbmarkIdBlackListDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ThumbmarkIdBlackList mutation op: %q", m.Op())
	}
}

// TipLogClient is a client for the TipLog schema.
type TipLogClient struct {
	config
}

// NewTipLogClient returns a client for the TipLog from the given config.
func NewTipLogClient(c config) *TipLogClient {
	return &TipLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tiplog.Hooks(f(g(h())))`.
func (c *TipLogClient) Use(hooks ...Hook) {
	c.hooks.TipLog = append(c.hooks.TipLog, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tiplog.Intercept(f(g(h())))`.
func (c *TipLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.TipLog = append(c.inters.TipLog, interceptors...)
}

// Create returns a builder for creating a TipLog entity.
func (c *TipLogClient) Create() *TipLogCreate {
	mutation := newTipLogMutation(c.config, OpCreate)
	return &TipLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TipLog entities.
func (c *TipLogClient) CreateBulk(builders ...*TipLogCreate) *TipLogCreateBulk {
	return &TipLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TipLog.
func (c *TipLogClient) Update() *TipLogUpdate {
	mutation := newTipLogMutation(c.config, OpUpdate)
	return &TipLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TipLogClient) UpdateOne(tl *TipLog) *TipLogUpdateOne {
	mutation := newTipLogMutation(c.config, OpUpdateOne, withTipLog(tl))
	return &TipLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TipLogClient) UpdateOneID(id uuid.UUID) *TipLogUpdateOne {
	mutation := newTipLogMutation(c.config, OpUpdateOne, withTipLogID(id))
	return &TipLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TipLog.
func (c *TipLogClient) Delete() *TipLogDelete {
	mutation := newTipLogMutation(c.config, OpDelete)
	return &TipLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TipLogClient) DeleteOne(tl *TipLog) *TipLogDeleteOne {
	return c.DeleteOneID(tl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TipLogClient) DeleteOneID(id uuid.UUID) *TipLogDeleteOne {
	builder := c.Delete().Where(tiplog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TipLogDeleteOne{builder}
}

// Query returns a query builder for TipLog.
func (c *TipLogClient) Query() *TipLogQuery {
	return &TipLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTipLog},
		inters: c.Interceptors(),
	}
}

// Get returns a TipLog entity by its id.
func (c *TipLogClient) Get(ctx context.Context, id uuid.UUID) (*TipLog, error) {
	return c.Query().Where(tiplog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TipLogClient) GetX(ctx context.Context, id uuid.UUID) *TipLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTipsReceived queries the tips_received edge of a TipLog.
func (c *TipLogClient) QueryTipsReceived(tl *TipLog) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tiplog.Table, tiplog.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tiplog.TipsReceivedTable, tiplog.TipsReceivedColumn),
		)
		fromV = sqlgraph.Neighbors(tl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTipsGiven queries the tips_given edge of a TipLog.
func (c *TipLogClient) QueryTipsGiven(tl *TipLog) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tiplog.Table, tiplog.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tiplog.TipsGivenTable, tiplog.TipsGivenColumn),
		)
		fromV = sqlgraph.Neighbors(tl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TipLogClient) Hooks() []Hook {
	return c.hooks.TipLog
}

// Interceptors returns the client interceptors.
func (c *TipLogClient) Interceptors() []Interceptor {
	return c.inters.TipLog
}

func (c *TipLogClient) mutate(ctx context.Context, m *TipLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TipLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TipLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TipLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TipLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TipLog mutation op: %q", m.Op())
	}
}

// UpscaleClient is a client for the Upscale schema.
type UpscaleClient struct {
	config
}

// NewUpscaleClient returns a client for the Upscale from the given config.
func NewUpscaleClient(c config) *UpscaleClient {
	return &UpscaleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upscale.Hooks(f(g(h())))`.
func (c *UpscaleClient) Use(hooks ...Hook) {
	c.hooks.Upscale = append(c.hooks.Upscale, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upscale.Intercept(f(g(h())))`.
func (c *UpscaleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Upscale = append(c.inters.Upscale, interceptors...)
}

// Create returns a builder for creating a Upscale entity.
func (c *UpscaleClient) Create() *UpscaleCreate {
	mutation := newUpscaleMutation(c.config, OpCreate)
	return &UpscaleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Upscale entities.
func (c *UpscaleClient) CreateBulk(builders ...*UpscaleCreate) *UpscaleCreateBulk {
	return &UpscaleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Upscale.
func (c *UpscaleClient) Update() *UpscaleUpdate {
	mutation := newUpscaleMutation(c.config, OpUpdate)
	return &UpscaleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpscaleClient) UpdateOne(u *Upscale) *UpscaleUpdateOne {
	mutation := newUpscaleMutation(c.config, OpUpdateOne, withUpscale(u))
	return &UpscaleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpscaleClient) UpdateOneID(id uuid.UUID) *UpscaleUpdateOne {
	mutation := newUpscaleMutation(c.config, OpUpdateOne, withUpscaleID(id))
	return &UpscaleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Upscale.
func (c *UpscaleClient) Delete() *UpscaleDelete {
	mutation := newUpscaleMutation(c.config, OpDelete)
	return &UpscaleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpscaleClient) DeleteOne(u *Upscale) *UpscaleDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpscaleClient) DeleteOneID(id uuid.UUID) *UpscaleDeleteOne {
	builder := c.Delete().Where(upscale.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpscaleDeleteOne{builder}
}

// Query returns a query builder for Upscale.
func (c *UpscaleClient) Query() *UpscaleQuery {
	return &UpscaleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpscale},
		inters: c.Interceptors(),
	}
}

// Get returns a Upscale entity by its id.
func (c *UpscaleClient) Get(ctx context.Context, id uuid.UUID) (*Upscale, error) {
	return c.Query().Where(upscale.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpscaleClient) GetX(ctx context.Context, id uuid.UUID) *Upscale {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Upscale.
func (c *UpscaleClient) QueryUser(u *Upscale) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(upscale.Table, upscale.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, upscale.UserTable, upscale.UserColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeviceInfo queries the device_info edge of a Upscale.
func (c *UpscaleClient) QueryDeviceInfo(u *Upscale) *DeviceInfoQuery {
	query := (&DeviceInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(upscale.Table, upscale.FieldID, id),
			sqlgraph.To(deviceinfo.Table, deviceinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, upscale.DeviceInfoTable, upscale.DeviceInfoColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpscaleModels queries the upscale_models edge of a Upscale.
func (c *UpscaleClient) QueryUpscaleModels(u *Upscale) *UpscaleModelQuery {
	query := (&UpscaleModelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(upscale.Table, upscale.FieldID, id),
			sqlgraph.To(upscalemodel.Table, upscalemodel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, upscale.UpscaleModelsTable, upscale.UpscaleModelsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAPITokens queries the api_tokens edge of a Upscale.
func (c *UpscaleClient) QueryAPITokens(u *Upscale) *ApiTokenQuery {
	query := (&ApiTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(upscale.Table, upscale.FieldID, id),
			sqlgraph.To(apitoken.Table, apitoken.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, upscale.APITokensTable, upscale.APITokensColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpscaleOutputs queries the upscale_outputs edge of a Upscale.
func (c *UpscaleClient) QueryUpscaleOutputs(u *Upscale) *UpscaleOutputQuery {
	query := (&UpscaleOutputClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(upscale.Table, upscale.FieldID, id),
			sqlgraph.To(upscaleoutput.Table, upscaleoutput.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, upscale.UpscaleOutputsTable, upscale.UpscaleOutputsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UpscaleClient) Hooks() []Hook {
	return c.hooks.Upscale
}

// Interceptors returns the client interceptors.
func (c *UpscaleClient) Interceptors() []Interceptor {
	return c.inters.Upscale
}

func (c *UpscaleClient) mutate(ctx context.Context, m *UpscaleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpscaleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpscaleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpscaleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpscaleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Upscale mutation op: %q", m.Op())
	}
}

// UpscaleModelClient is a client for the UpscaleModel schema.
type UpscaleModelClient struct {
	config
}

// NewUpscaleModelClient returns a client for the UpscaleModel from the given config.
func NewUpscaleModelClient(c config) *UpscaleModelClient {
	return &UpscaleModelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upscalemodel.Hooks(f(g(h())))`.
func (c *UpscaleModelClient) Use(hooks ...Hook) {
	c.hooks.UpscaleModel = append(c.hooks.UpscaleModel, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upscalemodel.Intercept(f(g(h())))`.
func (c *UpscaleModelClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpscaleModel = append(c.inters.UpscaleModel, interceptors...)
}

// Create returns a builder for creating a UpscaleModel entity.
func (c *UpscaleModelClient) Create() *UpscaleModelCreate {
	mutation := newUpscaleModelMutation(c.config, OpCreate)
	return &UpscaleModelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpscaleModel entities.
func (c *UpscaleModelClient) CreateBulk(builders ...*UpscaleModelCreate) *UpscaleModelCreateBulk {
	return &UpscaleModelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpscaleModel.
func (c *UpscaleModelClient) Update() *UpscaleModelUpdate {
	mutation := newUpscaleModelMutation(c.config, OpUpdate)
	return &UpscaleModelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpscaleModelClient) UpdateOne(um *UpscaleModel) *UpscaleModelUpdateOne {
	mutation := newUpscaleModelMutation(c.config, OpUpdateOne, withUpscaleModel(um))
	return &UpscaleModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpscaleModelClient) UpdateOneID(id uuid.UUID) *UpscaleModelUpdateOne {
	mutation := newUpscaleModelMutation(c.config, OpUpdateOne, withUpscaleModelID(id))
	return &UpscaleModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpscaleModel.
func (c *UpscaleModelClient) Delete() *UpscaleModelDelete {
	mutation := newUpscaleModelMutation(c.config, OpDelete)
	return &UpscaleModelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpscaleModelClient) DeleteOne(um *UpscaleModel) *UpscaleModelDeleteOne {
	return c.DeleteOneID(um.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpscaleModelClient) DeleteOneID(id uuid.UUID) *UpscaleModelDeleteOne {
	builder := c.Delete().Where(upscalemodel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpscaleModelDeleteOne{builder}
}

// Query returns a query builder for UpscaleModel.
func (c *UpscaleModelClient) Query() *UpscaleModelQuery {
	return &UpscaleModelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpscaleModel},
		inters: c.Interceptors(),
	}
}

// Get returns a UpscaleModel entity by its id.
func (c *UpscaleModelClient) Get(ctx context.Context, id uuid.UUID) (*UpscaleModel, error) {
	return c.Query().Where(upscalemodel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpscaleModelClient) GetX(ctx context.Context, id uuid.UUID) *UpscaleModel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUpscales queries the upscales edge of a UpscaleModel.
func (c *UpscaleModelClient) QueryUpscales(um *UpscaleModel) *UpscaleQuery {
	query := (&UpscaleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := um.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(upscalemodel.Table, upscalemodel.FieldID, id),
			sqlgraph.To(upscale.Table, upscale.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, upscalemodel.UpscalesTable, upscalemodel.UpscalesColumn),
		)
		fromV = sqlgraph.Neighbors(um.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UpscaleModelClient) Hooks() []Hook {
	return c.hooks.UpscaleModel
}

// Interceptors returns the client interceptors.
func (c *UpscaleModelClient) Interceptors() []Interceptor {
	return c.inters.UpscaleModel
}

func (c *UpscaleModelClient) mutate(ctx context.Context, m *UpscaleModelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpscaleModelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpscaleModelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpscaleModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpscaleModelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpscaleModel mutation op: %q", m.Op())
	}
}

// UpscaleOutputClient is a client for the UpscaleOutput schema.
type UpscaleOutputClient struct {
	config
}

// NewUpscaleOutputClient returns a client for the UpscaleOutput from the given config.
func NewUpscaleOutputClient(c config) *UpscaleOutputClient {
	return &UpscaleOutputClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upscaleoutput.Hooks(f(g(h())))`.
func (c *UpscaleOutputClient) Use(hooks ...Hook) {
	c.hooks.UpscaleOutput = append(c.hooks.UpscaleOutput, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upscaleoutput.Intercept(f(g(h())))`.
func (c *UpscaleOutputClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpscaleOutput = append(c.inters.UpscaleOutput, interceptors...)
}

// Create returns a builder for creating a UpscaleOutput entity.
func (c *UpscaleOutputClient) Create() *UpscaleOutputCreate {
	mutation := newUpscaleOutputMutation(c.config, OpCreate)
	return &UpscaleOutputCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpscaleOutput entities.
func (c *UpscaleOutputClient) CreateBulk(builders ...*UpscaleOutputCreate) *UpscaleOutputCreateBulk {
	return &UpscaleOutputCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpscaleOutput.
func (c *UpscaleOutputClient) Update() *UpscaleOutputUpdate {
	mutation := newUpscaleOutputMutation(c.config, OpUpdate)
	return &UpscaleOutputUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpscaleOutputClient) UpdateOne(uo *UpscaleOutput) *UpscaleOutputUpdateOne {
	mutation := newUpscaleOutputMutation(c.config, OpUpdateOne, withUpscaleOutput(uo))
	return &UpscaleOutputUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpscaleOutputClient) UpdateOneID(id uuid.UUID) *UpscaleOutputUpdateOne {
	mutation := newUpscaleOutputMutation(c.config, OpUpdateOne, withUpscaleOutputID(id))
	return &UpscaleOutputUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpscaleOutput.
func (c *UpscaleOutputClient) Delete() *UpscaleOutputDelete {
	mutation := newUpscaleOutputMutation(c.config, OpDelete)
	return &UpscaleOutputDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpscaleOutputClient) DeleteOne(uo *UpscaleOutput) *UpscaleOutputDeleteOne {
	return c.DeleteOneID(uo.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpscaleOutputClient) DeleteOneID(id uuid.UUID) *UpscaleOutputDeleteOne {
	builder := c.Delete().Where(upscaleoutput.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpscaleOutputDeleteOne{builder}
}

// Query returns a query builder for UpscaleOutput.
func (c *UpscaleOutputClient) Query() *UpscaleOutputQuery {
	return &UpscaleOutputQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpscaleOutput},
		inters: c.Interceptors(),
	}
}

// Get returns a UpscaleOutput entity by its id.
func (c *UpscaleOutputClient) Get(ctx context.Context, id uuid.UUID) (*UpscaleOutput, error) {
	return c.Query().Where(upscaleoutput.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpscaleOutputClient) GetX(ctx context.Context, id uuid.UUID) *UpscaleOutput {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUpscales queries the upscales edge of a UpscaleOutput.
func (c *UpscaleOutputClient) QueryUpscales(uo *UpscaleOutput) *UpscaleQuery {
	query := (&UpscaleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(upscaleoutput.Table, upscaleoutput.FieldID, id),
			sqlgraph.To(upscale.Table, upscale.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, upscaleoutput.UpscalesTable, upscaleoutput.UpscalesColumn),
		)
		fromV = sqlgraph.Neighbors(uo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGenerationOutput queries the generation_output edge of a UpscaleOutput.
func (c *UpscaleOutputClient) QueryGenerationOutput(uo *UpscaleOutput) *GenerationOutputQuery {
	query := (&GenerationOutputClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(upscaleoutput.Table, upscaleoutput.FieldID, id),
			sqlgraph.To(generationoutput.Table, generationoutput.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, upscaleoutput.GenerationOutputTable, upscaleoutput.GenerationOutputColumn),
		)
		fromV = sqlgraph.Neighbors(uo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UpscaleOutputClient) Hooks() []Hook {
	return c.hooks.UpscaleOutput
}

// Interceptors returns the client interceptors.
func (c *UpscaleOutputClient) Interceptors() []Interceptor {
	return c.inters.UpscaleOutput
}

func (c *UpscaleOutputClient) mutate(ctx context.Context, m *UpscaleOutputMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpscaleOutputCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpscaleOutputUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpscaleOutputUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpscaleOutputDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpscaleOutput mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGenerations queries the generations edge of a User.
func (c *UserClient) QueryGenerations(u *User) *GenerationQuery {
	query := (&GenerationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(generation.Table, generation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.GenerationsTable, user.GenerationsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpscales queries the upscales edge of a User.
func (c *UserClient) QueryUpscales(u *User) *UpscaleQuery {
	query := (&UpscaleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(upscale.Table, upscale.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UpscalesTable, user.UpscalesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVoiceovers queries the voiceovers edge of a User.
func (c *UserClient) QueryVoiceovers(u *User) *VoiceoverQuery {
	query := (&VoiceoverClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(voiceover.Table, voiceover.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.VoiceoversTable, user.VoiceoversColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCredits queries the credits edge of a User.
func (c *UserClient) QueryCredits(u *User) *CreditQuery {
	query := (&CreditClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(credit.Table, credit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CreditsTable, user.CreditsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAPITokens queries the api_tokens edge of a User.
func (c *UserClient) QueryAPITokens(u *User) *ApiTokenQuery {
	query := (&ApiTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(apitoken.Table, apitoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.APITokensTable, user.APITokensColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTipsGiven queries the tips_given edge of a User.
func (c *UserClient) QueryTipsGiven(u *User) *TipLogQuery {
	query := (&TipLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(tiplog.Table, tiplog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TipsGivenTable, user.TipsGivenColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTipsReceived queries the tips_received edge of a User.
func (c *UserClient) QueryTipsReceived(u *User) *TipLogQuery {
	query := (&TipLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(tiplog.Table, tiplog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TipsReceivedTable, user.TipsReceivedColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoles queries the roles edge of a User.
func (c *UserClient) QueryRoles(u *User) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.RolesTable, user.RolesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGenerationOutputLikes queries the generation_output_likes edge of a User.
func (c *UserClient) QueryGenerationOutputLikes(u *User) *GenerationOutputLikeQuery {
	query := (&GenerationOutputLikeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(generationoutputlike.Table, generationoutputlike.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.GenerationOutputLikesTable, user.GenerationOutputLikesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UsernameBlacklistClient is a client for the UsernameBlacklist schema.
type UsernameBlacklistClient struct {
	config
}

// NewUsernameBlacklistClient returns a client for the UsernameBlacklist from the given config.
func NewUsernameBlacklistClient(c config) *UsernameBlacklistClient {
	return &UsernameBlacklistClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usernameblacklist.Hooks(f(g(h())))`.
func (c *UsernameBlacklistClient) Use(hooks ...Hook) {
	c.hooks.UsernameBlacklist = append(c.hooks.UsernameBlacklist, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usernameblacklist.Intercept(f(g(h())))`.
func (c *UsernameBlacklistClient) Intercept(interceptors ...Interceptor) {
	c.inters.UsernameBlacklist = append(c.inters.UsernameBlacklist, interceptors...)
}

// Create returns a builder for creating a UsernameBlacklist entity.
func (c *UsernameBlacklistClient) Create() *UsernameBlacklistCreate {
	mutation := newUsernameBlacklistMutation(c.config, OpCreate)
	return &UsernameBlacklistCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UsernameBlacklist entities.
func (c *UsernameBlacklistClient) CreateBulk(builders ...*UsernameBlacklistCreate) *UsernameBlacklistCreateBulk {
	return &UsernameBlacklistCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UsernameBlacklist.
func (c *UsernameBlacklistClient) Update() *UsernameBlacklistUpdate {
	mutation := newUsernameBlacklistMutation(c.config, OpUpdate)
	return &UsernameBlacklistUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UsernameBlacklistClient) UpdateOne(ub *UsernameBlacklist) *UsernameBlacklistUpdateOne {
	mutation := newUsernameBlacklistMutation(c.config, OpUpdateOne, withUsernameBlacklist(ub))
	return &UsernameBlacklistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UsernameBlacklistClient) UpdateOneID(id uuid.UUID) *UsernameBlacklistUpdateOne {
	mutation := newUsernameBlacklistMutation(c.config, OpUpdateOne, withUsernameBlacklistID(id))
	return &UsernameBlacklistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UsernameBlacklist.
func (c *UsernameBlacklistClient) Delete() *UsernameBlacklistDelete {
	mutation := newUsernameBlacklistMutation(c.config, OpDelete)
	return &UsernameBlacklistDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UsernameBlacklistClient) DeleteOne(ub *UsernameBlacklist) *UsernameBlacklistDeleteOne {
	return c.DeleteOneID(ub.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UsernameBlacklistClient) DeleteOneID(id uuid.UUID) *UsernameBlacklistDeleteOne {
	builder := c.Delete().Where(usernameblacklist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UsernameBlacklistDeleteOne{builder}
}

// Query returns a query builder for UsernameBlacklist.
func (c *UsernameBlacklistClient) Query() *UsernameBlacklistQuery {
	return &UsernameBlacklistQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUsernameBlacklist},
		inters: c.Interceptors(),
	}
}

// Get returns a UsernameBlacklist entity by its id.
func (c *UsernameBlacklistClient) Get(ctx context.Context, id uuid.UUID) (*UsernameBlacklist, error) {
	return c.Query().Where(usernameblacklist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UsernameBlacklistClient) GetX(ctx context.Context, id uuid.UUID) *UsernameBlacklist {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UsernameBlacklistClient) Hooks() []Hook {
	return c.hooks.UsernameBlacklist
}

// Interceptors returns the client interceptors.
func (c *UsernameBlacklistClient) Interceptors() []Interceptor {
	return c.inters.UsernameBlacklist
}

func (c *UsernameBlacklistClient) mutate(ctx context.Context, m *UsernameBlacklistMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UsernameBlacklistCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UsernameBlacklistUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UsernameBlacklistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UsernameBlacklistDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UsernameBlacklist mutation op: %q", m.Op())
	}
}

// VoiceoverClient is a client for the Voiceover schema.
type VoiceoverClient struct {
	config
}

// NewVoiceoverClient returns a client for the Voiceover from the given config.
func NewVoiceoverClient(c config) *VoiceoverClient {
	return &VoiceoverClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `voiceover.Hooks(f(g(h())))`.
func (c *VoiceoverClient) Use(hooks ...Hook) {
	c.hooks.Voiceover = append(c.hooks.Voiceover, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `voiceover.Intercept(f(g(h())))`.
func (c *VoiceoverClient) Intercept(interceptors ...Interceptor) {
	c.inters.Voiceover = append(c.inters.Voiceover, interceptors...)
}

// Create returns a builder for creating a Voiceover entity.
func (c *VoiceoverClient) Create() *VoiceoverCreate {
	mutation := newVoiceoverMutation(c.config, OpCreate)
	return &VoiceoverCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Voiceover entities.
func (c *VoiceoverClient) CreateBulk(builders ...*VoiceoverCreate) *VoiceoverCreateBulk {
	return &VoiceoverCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Voiceover.
func (c *VoiceoverClient) Update() *VoiceoverUpdate {
	mutation := newVoiceoverMutation(c.config, OpUpdate)
	return &VoiceoverUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VoiceoverClient) UpdateOne(v *Voiceover) *VoiceoverUpdateOne {
	mutation := newVoiceoverMutation(c.config, OpUpdateOne, withVoiceover(v))
	return &VoiceoverUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VoiceoverClient) UpdateOneID(id uuid.UUID) *VoiceoverUpdateOne {
	mutation := newVoiceoverMutation(c.config, OpUpdateOne, withVoiceoverID(id))
	return &VoiceoverUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Voiceover.
func (c *VoiceoverClient) Delete() *VoiceoverDelete {
	mutation := newVoiceoverMutation(c.config, OpDelete)
	return &VoiceoverDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VoiceoverClient) DeleteOne(v *Voiceover) *VoiceoverDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VoiceoverClient) DeleteOneID(id uuid.UUID) *VoiceoverDeleteOne {
	builder := c.Delete().Where(voiceover.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VoiceoverDeleteOne{builder}
}

// Query returns a query builder for Voiceover.
func (c *VoiceoverClient) Query() *VoiceoverQuery {
	return &VoiceoverQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVoiceover},
		inters: c.Interceptors(),
	}
}

// Get returns a Voiceover entity by its id.
func (c *VoiceoverClient) Get(ctx context.Context, id uuid.UUID) (*Voiceover, error) {
	return c.Query().Where(voiceover.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VoiceoverClient) GetX(ctx context.Context, id uuid.UUID) *Voiceover {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Voiceover.
func (c *VoiceoverClient) QueryUser(v *Voiceover) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(voiceover.Table, voiceover.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, voiceover.UserTable, voiceover.UserColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrompt queries the prompt edge of a Voiceover.
func (c *VoiceoverClient) QueryPrompt(v *Voiceover) *PromptQuery {
	query := (&PromptClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(voiceover.Table, voiceover.FieldID, id),
			sqlgraph.To(prompt.Table, prompt.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, voiceover.PromptTable, voiceover.PromptColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeviceInfo queries the device_info edge of a Voiceover.
func (c *VoiceoverClient) QueryDeviceInfo(v *Voiceover) *DeviceInfoQuery {
	query := (&DeviceInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(voiceover.Table, voiceover.FieldID, id),
			sqlgraph.To(deviceinfo.Table, deviceinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, voiceover.DeviceInfoTable, voiceover.DeviceInfoColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVoiceoverModels queries the voiceover_models edge of a Voiceover.
func (c *VoiceoverClient) QueryVoiceoverModels(v *Voiceover) *VoiceoverModelQuery {
	query := (&VoiceoverModelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(voiceover.Table, voiceover.FieldID, id),
			sqlgraph.To(voiceovermodel.Table, voiceovermodel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, voiceover.VoiceoverModelsTable, voiceover.VoiceoverModelsColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVoiceoverSpeakers queries the voiceover_speakers edge of a Voiceover.
func (c *VoiceoverClient) QueryVoiceoverSpeakers(v *Voiceover) *VoiceoverSpeakerQuery {
	query := (&VoiceoverSpeakerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(voiceover.Table, voiceover.FieldID, id),
			sqlgraph.To(voiceoverspeaker.Table, voiceoverspeaker.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, voiceover.VoiceoverSpeakersTable, voiceover.VoiceoverSpeakersColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAPITokens queries the api_tokens edge of a Voiceover.
func (c *VoiceoverClient) QueryAPITokens(v *Voiceover) *ApiTokenQuery {
	query := (&ApiTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(voiceover.Table, voiceover.FieldID, id),
			sqlgraph.To(apitoken.Table, apitoken.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, voiceover.APITokensTable, voiceover.APITokensColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVoiceoverOutputs queries the voiceover_outputs edge of a Voiceover.
func (c *VoiceoverClient) QueryVoiceoverOutputs(v *Voiceover) *VoiceoverOutputQuery {
	query := (&VoiceoverOutputClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(voiceover.Table, voiceover.FieldID, id),
			sqlgraph.To(voiceoveroutput.Table, voiceoveroutput.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, voiceover.VoiceoverOutputsTable, voiceover.VoiceoverOutputsColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VoiceoverClient) Hooks() []Hook {
	return c.hooks.Voiceover
}

// Interceptors returns the client interceptors.
func (c *VoiceoverClient) Interceptors() []Interceptor {
	return c.inters.Voiceover
}

func (c *VoiceoverClient) mutate(ctx context.Context, m *VoiceoverMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VoiceoverCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VoiceoverUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VoiceoverUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VoiceoverDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Voiceover mutation op: %q", m.Op())
	}
}

// VoiceoverModelClient is a client for the VoiceoverModel schema.
type VoiceoverModelClient struct {
	config
}

// NewVoiceoverModelClient returns a client for the VoiceoverModel from the given config.
func NewVoiceoverModelClient(c config) *VoiceoverModelClient {
	return &VoiceoverModelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `voiceovermodel.Hooks(f(g(h())))`.
func (c *VoiceoverModelClient) Use(hooks ...Hook) {
	c.hooks.VoiceoverModel = append(c.hooks.VoiceoverModel, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `voiceovermodel.Intercept(f(g(h())))`.
func (c *VoiceoverModelClient) Intercept(interceptors ...Interceptor) {
	c.inters.VoiceoverModel = append(c.inters.VoiceoverModel, interceptors...)
}

// Create returns a builder for creating a VoiceoverModel entity.
func (c *VoiceoverModelClient) Create() *VoiceoverModelCreate {
	mutation := newVoiceoverModelMutation(c.config, OpCreate)
	return &VoiceoverModelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VoiceoverModel entities.
func (c *VoiceoverModelClient) CreateBulk(builders ...*VoiceoverModelCreate) *VoiceoverModelCreateBulk {
	return &VoiceoverModelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VoiceoverModel.
func (c *VoiceoverModelClient) Update() *VoiceoverModelUpdate {
	mutation := newVoiceoverModelMutation(c.config, OpUpdate)
	return &VoiceoverModelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VoiceoverModelClient) UpdateOne(vm *VoiceoverModel) *VoiceoverModelUpdateOne {
	mutation := newVoiceoverModelMutation(c.config, OpUpdateOne, withVoiceoverModel(vm))
	return &VoiceoverModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VoiceoverModelClient) UpdateOneID(id uuid.UUID) *VoiceoverModelUpdateOne {
	mutation := newVoiceoverModelMutation(c.config, OpUpdateOne, withVoiceoverModelID(id))
	return &VoiceoverModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VoiceoverModel.
func (c *VoiceoverModelClient) Delete() *VoiceoverModelDelete {
	mutation := newVoiceoverModelMutation(c.config, OpDelete)
	return &VoiceoverModelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VoiceoverModelClient) DeleteOne(vm *VoiceoverModel) *VoiceoverModelDeleteOne {
	return c.DeleteOneID(vm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VoiceoverModelClient) DeleteOneID(id uuid.UUID) *VoiceoverModelDeleteOne {
	builder := c.Delete().Where(voiceovermodel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VoiceoverModelDeleteOne{builder}
}

// Query returns a query builder for VoiceoverModel.
func (c *VoiceoverModelClient) Query() *VoiceoverModelQuery {
	return &VoiceoverModelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVoiceoverModel},
		inters: c.Interceptors(),
	}
}

// Get returns a VoiceoverModel entity by its id.
func (c *VoiceoverModelClient) Get(ctx context.Context, id uuid.UUID) (*VoiceoverModel, error) {
	return c.Query().Where(voiceovermodel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VoiceoverModelClient) GetX(ctx context.Context, id uuid.UUID) *VoiceoverModel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVoiceovers queries the voiceovers edge of a VoiceoverModel.
func (c *VoiceoverModelClient) QueryVoiceovers(vm *VoiceoverModel) *VoiceoverQuery {
	query := (&VoiceoverClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := vm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(voiceovermodel.Table, voiceovermodel.FieldID, id),
			sqlgraph.To(voiceover.Table, voiceover.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, voiceovermodel.VoiceoversTable, voiceovermodel.VoiceoversColumn),
		)
		fromV = sqlgraph.Neighbors(vm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVoiceoverSpeakers queries the voiceover_speakers edge of a VoiceoverModel.
func (c *VoiceoverModelClient) QueryVoiceoverSpeakers(vm *VoiceoverModel) *VoiceoverSpeakerQuery {
	query := (&VoiceoverSpeakerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := vm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(voiceovermodel.Table, voiceovermodel.FieldID, id),
			sqlgraph.To(voiceoverspeaker.Table, voiceoverspeaker.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, voiceovermodel.VoiceoverSpeakersTable, voiceovermodel.VoiceoverSpeakersColumn),
		)
		fromV = sqlgraph.Neighbors(vm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VoiceoverModelClient) Hooks() []Hook {
	return c.hooks.VoiceoverModel
}

// Interceptors returns the client interceptors.
func (c *VoiceoverModelClient) Interceptors() []Interceptor {
	return c.inters.VoiceoverModel
}

func (c *VoiceoverModelClient) mutate(ctx context.Context, m *VoiceoverModelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VoiceoverModelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VoiceoverModelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VoiceoverModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VoiceoverModelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown VoiceoverModel mutation op: %q", m.Op())
	}
}

// VoiceoverOutputClient is a client for the VoiceoverOutput schema.
type VoiceoverOutputClient struct {
	config
}

// NewVoiceoverOutputClient returns a client for the VoiceoverOutput from the given config.
func NewVoiceoverOutputClient(c config) *VoiceoverOutputClient {
	return &VoiceoverOutputClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `voiceoveroutput.Hooks(f(g(h())))`.
func (c *VoiceoverOutputClient) Use(hooks ...Hook) {
	c.hooks.VoiceoverOutput = append(c.hooks.VoiceoverOutput, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `voiceoveroutput.Intercept(f(g(h())))`.
func (c *VoiceoverOutputClient) Intercept(interceptors ...Interceptor) {
	c.inters.VoiceoverOutput = append(c.inters.VoiceoverOutput, interceptors...)
}

// Create returns a builder for creating a VoiceoverOutput entity.
func (c *VoiceoverOutputClient) Create() *VoiceoverOutputCreate {
	mutation := newVoiceoverOutputMutation(c.config, OpCreate)
	return &VoiceoverOutputCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VoiceoverOutput entities.
func (c *VoiceoverOutputClient) CreateBulk(builders ...*VoiceoverOutputCreate) *VoiceoverOutputCreateBulk {
	return &VoiceoverOutputCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VoiceoverOutput.
func (c *VoiceoverOutputClient) Update() *VoiceoverOutputUpdate {
	mutation := newVoiceoverOutputMutation(c.config, OpUpdate)
	return &VoiceoverOutputUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VoiceoverOutputClient) UpdateOne(vo *VoiceoverOutput) *VoiceoverOutputUpdateOne {
	mutation := newVoiceoverOutputMutation(c.config, OpUpdateOne, withVoiceoverOutput(vo))
	return &VoiceoverOutputUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VoiceoverOutputClient) UpdateOneID(id uuid.UUID) *VoiceoverOutputUpdateOne {
	mutation := newVoiceoverOutputMutation(c.config, OpUpdateOne, withVoiceoverOutputID(id))
	return &VoiceoverOutputUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VoiceoverOutput.
func (c *VoiceoverOutputClient) Delete() *VoiceoverOutputDelete {
	mutation := newVoiceoverOutputMutation(c.config, OpDelete)
	return &VoiceoverOutputDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VoiceoverOutputClient) DeleteOne(vo *VoiceoverOutput) *VoiceoverOutputDeleteOne {
	return c.DeleteOneID(vo.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VoiceoverOutputClient) DeleteOneID(id uuid.UUID) *VoiceoverOutputDeleteOne {
	builder := c.Delete().Where(voiceoveroutput.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VoiceoverOutputDeleteOne{builder}
}

// Query returns a query builder for VoiceoverOutput.
func (c *VoiceoverOutputClient) Query() *VoiceoverOutputQuery {
	return &VoiceoverOutputQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVoiceoverOutput},
		inters: c.Interceptors(),
	}
}

// Get returns a VoiceoverOutput entity by its id.
func (c *VoiceoverOutputClient) Get(ctx context.Context, id uuid.UUID) (*VoiceoverOutput, error) {
	return c.Query().Where(voiceoveroutput.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VoiceoverOutputClient) GetX(ctx context.Context, id uuid.UUID) *VoiceoverOutput {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVoiceovers queries the voiceovers edge of a VoiceoverOutput.
func (c *VoiceoverOutputClient) QueryVoiceovers(vo *VoiceoverOutput) *VoiceoverQuery {
	query := (&VoiceoverClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := vo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(voiceoveroutput.Table, voiceoveroutput.FieldID, id),
			sqlgraph.To(voiceover.Table, voiceover.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, voiceoveroutput.VoiceoversTable, voiceoveroutput.VoiceoversColumn),
		)
		fromV = sqlgraph.Neighbors(vo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VoiceoverOutputClient) Hooks() []Hook {
	return c.hooks.VoiceoverOutput
}

// Interceptors returns the client interceptors.
func (c *VoiceoverOutputClient) Interceptors() []Interceptor {
	return c.inters.VoiceoverOutput
}

func (c *VoiceoverOutputClient) mutate(ctx context.Context, m *VoiceoverOutputMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VoiceoverOutputCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VoiceoverOutputUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VoiceoverOutputUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VoiceoverOutputDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown VoiceoverOutput mutation op: %q", m.Op())
	}
}

// VoiceoverSpeakerClient is a client for the VoiceoverSpeaker schema.
type VoiceoverSpeakerClient struct {
	config
}

// NewVoiceoverSpeakerClient returns a client for the VoiceoverSpeaker from the given config.
func NewVoiceoverSpeakerClient(c config) *VoiceoverSpeakerClient {
	return &VoiceoverSpeakerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `voiceoverspeaker.Hooks(f(g(h())))`.
func (c *VoiceoverSpeakerClient) Use(hooks ...Hook) {
	c.hooks.VoiceoverSpeaker = append(c.hooks.VoiceoverSpeaker, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `voiceoverspeaker.Intercept(f(g(h())))`.
func (c *VoiceoverSpeakerClient) Intercept(interceptors ...Interceptor) {
	c.inters.VoiceoverSpeaker = append(c.inters.VoiceoverSpeaker, interceptors...)
}

// Create returns a builder for creating a VoiceoverSpeaker entity.
func (c *VoiceoverSpeakerClient) Create() *VoiceoverSpeakerCreate {
	mutation := newVoiceoverSpeakerMutation(c.config, OpCreate)
	return &VoiceoverSpeakerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VoiceoverSpeaker entities.
func (c *VoiceoverSpeakerClient) CreateBulk(builders ...*VoiceoverSpeakerCreate) *VoiceoverSpeakerCreateBulk {
	return &VoiceoverSpeakerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VoiceoverSpeaker.
func (c *VoiceoverSpeakerClient) Update() *VoiceoverSpeakerUpdate {
	mutation := newVoiceoverSpeakerMutation(c.config, OpUpdate)
	return &VoiceoverSpeakerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VoiceoverSpeakerClient) UpdateOne(vs *VoiceoverSpeaker) *VoiceoverSpeakerUpdateOne {
	mutation := newVoiceoverSpeakerMutation(c.config, OpUpdateOne, withVoiceoverSpeaker(vs))
	return &VoiceoverSpeakerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VoiceoverSpeakerClient) UpdateOneID(id uuid.UUID) *VoiceoverSpeakerUpdateOne {
	mutation := newVoiceoverSpeakerMutation(c.config, OpUpdateOne, withVoiceoverSpeakerID(id))
	return &VoiceoverSpeakerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VoiceoverSpeaker.
func (c *VoiceoverSpeakerClient) Delete() *VoiceoverSpeakerDelete {
	mutation := newVoiceoverSpeakerMutation(c.config, OpDelete)
	return &VoiceoverSpeakerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VoiceoverSpeakerClient) DeleteOne(vs *VoiceoverSpeaker) *VoiceoverSpeakerDeleteOne {
	return c.DeleteOneID(vs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VoiceoverSpeakerClient) DeleteOneID(id uuid.UUID) *VoiceoverSpeakerDeleteOne {
	builder := c.Delete().Where(voiceoverspeaker.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VoiceoverSpeakerDeleteOne{builder}
}

// Query returns a query builder for VoiceoverSpeaker.
func (c *VoiceoverSpeakerClient) Query() *VoiceoverSpeakerQuery {
	return &VoiceoverSpeakerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVoiceoverSpeaker},
		inters: c.Interceptors(),
	}
}

// Get returns a VoiceoverSpeaker entity by its id.
func (c *VoiceoverSpeakerClient) Get(ctx context.Context, id uuid.UUID) (*VoiceoverSpeaker, error) {
	return c.Query().Where(voiceoverspeaker.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VoiceoverSpeakerClient) GetX(ctx context.Context, id uuid.UUID) *VoiceoverSpeaker {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVoiceovers queries the voiceovers edge of a VoiceoverSpeaker.
func (c *VoiceoverSpeakerClient) QueryVoiceovers(vs *VoiceoverSpeaker) *VoiceoverQuery {
	query := (&VoiceoverClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := vs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(voiceoverspeaker.Table, voiceoverspeaker.FieldID, id),
			sqlgraph.To(voiceover.Table, voiceover.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, voiceoverspeaker.VoiceoversTable, voiceoverspeaker.VoiceoversColumn),
		)
		fromV = sqlgraph.Neighbors(vs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVoiceoverModels queries the voiceover_models edge of a VoiceoverSpeaker.
func (c *VoiceoverSpeakerClient) QueryVoiceoverModels(vs *VoiceoverSpeaker) *VoiceoverModelQuery {
	query := (&VoiceoverModelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := vs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(voiceoverspeaker.Table, voiceoverspeaker.FieldID, id),
			sqlgraph.To(voiceovermodel.Table, voiceovermodel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, voiceoverspeaker.VoiceoverModelsTable, voiceoverspeaker.VoiceoverModelsColumn),
		)
		fromV = sqlgraph.Neighbors(vs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VoiceoverSpeakerClient) Hooks() []Hook {
	return c.hooks.VoiceoverSpeaker
}

// Interceptors returns the client interceptors.
func (c *VoiceoverSpeakerClient) Interceptors() []Interceptor {
	return c.inters.VoiceoverSpeaker
}

func (c *VoiceoverSpeakerClient) mutate(ctx context.Context, m *VoiceoverSpeakerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VoiceoverSpeakerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VoiceoverSpeakerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VoiceoverSpeakerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VoiceoverSpeakerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown VoiceoverSpeaker mutation op: %q", m.Op())
	}
}
