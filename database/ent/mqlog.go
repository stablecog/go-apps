// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/mqlog"
)

// MqLog is the model entity for the MqLog schema.
type MqLog struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// MessageID holds the value of the "message_id" field.
	MessageID string `json:"message_id,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority int `json:"priority,omitempty"`
	// IsProcessing holds the value of the "is_processing" field.
	IsProcessing bool `json:"is_processing,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MqLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mqlog.FieldIsProcessing:
			values[i] = new(sql.NullBool)
		case mqlog.FieldPriority:
			values[i] = new(sql.NullInt64)
		case mqlog.FieldMessageID:
			values[i] = new(sql.NullString)
		case mqlog.FieldCreatedAt, mqlog.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case mqlog.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MqLog fields.
func (ml *MqLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mqlog.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ml.ID = *value
			}
		case mqlog.FieldMessageID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message_id", values[i])
			} else if value.Valid {
				ml.MessageID = value.String
			}
		case mqlog.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				ml.Priority = int(value.Int64)
			}
		case mqlog.FieldIsProcessing:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_processing", values[i])
			} else if value.Valid {
				ml.IsProcessing = value.Bool
			}
		case mqlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ml.CreatedAt = value.Time
			}
		case mqlog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ml.UpdatedAt = value.Time
			}
		default:
			ml.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MqLog.
// This includes values selected through modifiers, order, etc.
func (ml *MqLog) Value(name string) (ent.Value, error) {
	return ml.selectValues.Get(name)
}

// Update returns a builder for updating this MqLog.
// Note that you need to call MqLog.Unwrap() before calling this method if this MqLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (ml *MqLog) Update() *MqLogUpdateOne {
	return NewMqLogClient(ml.config).UpdateOne(ml)
}

// Unwrap unwraps the MqLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ml *MqLog) Unwrap() *MqLog {
	_tx, ok := ml.config.driver.(*txDriver)
	if !ok {
		panic("ent: MqLog is not a transactional entity")
	}
	ml.config.driver = _tx.drv
	return ml
}

// String implements the fmt.Stringer.
func (ml *MqLog) String() string {
	var builder strings.Builder
	builder.WriteString("MqLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ml.ID))
	builder.WriteString("message_id=")
	builder.WriteString(ml.MessageID)
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", ml.Priority))
	builder.WriteString(", ")
	builder.WriteString("is_processing=")
	builder.WriteString(fmt.Sprintf("%v", ml.IsProcessing))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ml.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ml.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MqLogs is a parsable slice of MqLog.
type MqLogs []*MqLog
