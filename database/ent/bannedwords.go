// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/bannedwords"
)

// BannedWords is the model entity for the BannedWords schema.
type BannedWords struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Words holds the value of the "words" field.
	Words []string `json:"words,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason string `json:"reason,omitempty"`
	// SplitMatch holds the value of the "split_match" field.
	SplitMatch bool `json:"split_match,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BannedWords) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bannedwords.FieldWords:
			values[i] = new([]byte)
		case bannedwords.FieldSplitMatch:
			values[i] = new(sql.NullBool)
		case bannedwords.FieldReason:
			values[i] = new(sql.NullString)
		case bannedwords.FieldCreatedAt, bannedwords.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case bannedwords.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BannedWords fields.
func (bw *BannedWords) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bannedwords.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				bw.ID = *value
			}
		case bannedwords.FieldWords:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field words", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bw.Words); err != nil {
					return fmt.Errorf("unmarshal field words: %w", err)
				}
			}
		case bannedwords.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				bw.Reason = value.String
			}
		case bannedwords.FieldSplitMatch:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field split_match", values[i])
			} else if value.Valid {
				bw.SplitMatch = value.Bool
			}
		case bannedwords.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bw.CreatedAt = value.Time
			}
		case bannedwords.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bw.UpdatedAt = value.Time
			}
		default:
			bw.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BannedWords.
// This includes values selected through modifiers, order, etc.
func (bw *BannedWords) Value(name string) (ent.Value, error) {
	return bw.selectValues.Get(name)
}

// Update returns a builder for updating this BannedWords.
// Note that you need to call BannedWords.Unwrap() before calling this method if this BannedWords
// was returned from a transaction, and the transaction was committed or rolled back.
func (bw *BannedWords) Update() *BannedWordsUpdateOne {
	return NewBannedWordsClient(bw.config).UpdateOne(bw)
}

// Unwrap unwraps the BannedWords entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bw *BannedWords) Unwrap() *BannedWords {
	_tx, ok := bw.config.driver.(*txDriver)
	if !ok {
		panic("ent: BannedWords is not a transactional entity")
	}
	bw.config.driver = _tx.drv
	return bw
}

// String implements the fmt.Stringer.
func (bw *BannedWords) String() string {
	var builder strings.Builder
	builder.WriteString("BannedWords(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bw.ID))
	builder.WriteString("words=")
	builder.WriteString(fmt.Sprintf("%v", bw.Words))
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(bw.Reason)
	builder.WriteString(", ")
	builder.WriteString("split_match=")
	builder.WriteString(fmt.Sprintf("%v", bw.SplitMatch))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bw.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bw.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BannedWordsSlice is a parsable slice of BannedWords.
type BannedWordsSlice []*BannedWords
