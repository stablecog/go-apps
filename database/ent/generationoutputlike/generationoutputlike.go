// Code generated by ent, DO NOT EDIT.

package generationoutputlike

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the generationoutputlike type in the database.
	Label = "generation_output_like"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOutputID holds the string denoting the output_id field in the database.
	FieldOutputID = "output_id"
	// FieldLikedByUserID holds the string denoting the liked_by_user_id field in the database.
	FieldLikedByUserID = "liked_by_user_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeGenerationOutputs holds the string denoting the generation_outputs edge name in mutations.
	EdgeGenerationOutputs = "generation_outputs"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// Table holds the table name of the generationoutputlike in the database.
	Table = "generation_output_likes"
	// GenerationOutputsTable is the table that holds the generation_outputs relation/edge.
	GenerationOutputsTable = "generation_output_likes"
	// GenerationOutputsInverseTable is the table name for the GenerationOutput entity.
	// It exists in this package in order to avoid circular dependency with the "generationoutput" package.
	GenerationOutputsInverseTable = "generation_outputs"
	// GenerationOutputsColumn is the table column denoting the generation_outputs relation/edge.
	GenerationOutputsColumn = "output_id"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "generation_output_likes"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "liked_by_user_id"
)

// Columns holds all SQL columns for generationoutputlike fields.
var Columns = []string{
	FieldID,
	FieldOutputID,
	FieldLikedByUserID,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the GenerationOutputLike queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOutputID orders the results by the output_id field.
func ByOutputID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutputID, opts...).ToFunc()
}

// ByLikedByUserID orders the results by the liked_by_user_id field.
func ByLikedByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikedByUserID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByGenerationOutputsField orders the results by generation_outputs field.
func ByGenerationOutputsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGenerationOutputsStep(), sql.OrderByField(field, opts...))
	}
}

// ByUsersField orders the results by users field.
func ByUsersField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), sql.OrderByField(field, opts...))
	}
}
func newGenerationOutputsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GenerationOutputsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GenerationOutputsTable, GenerationOutputsColumn),
	)
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
	)
}
